
helloworld.elf:     file format elf32-littlenios2
helloworld.elf
architecture: nios2, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x0c0001b4

Program Header:
    LOAD off    0x00001000 vaddr 0x0c000000 paddr 0x0c000000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x0c000020 paddr 0x0c000020 align 2**12
         filesz 0x000073d8 memsz 0x000073d8 flags r-x
    LOAD off    0x000083f8 vaddr 0x0c0073f8 paddr 0x0c008fd4 align 2**12
         filesz 0x00001bdc memsz 0x00001bdc flags rw-
    LOAD off    0x0000abb0 vaddr 0x0c00abb0 paddr 0x0c00abb0 align 2**12
         filesz 0x00000000 memsz 0x000002e0 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  0c000000  0c000000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000194  0c000020  0c000020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         000071c8  0c0001b4  0c0001b4  000011b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       0000007c  0c00737c  0c00737c  0000837c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001bdc  0c0073f8  0c008fd4  000083f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          000002e0  0c00abb0  0c00abb0  0000abb0  2**2
                  ALLOC, SMALL_DATA
  6 .comment      00000023  00000000  00000000  00009fd4  2**0
                  CONTENTS, READONLY
  7 .debug_aranges 000009f8  00000000  00000000  00009ff8  2**3
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_pubnames 000010b4  00000000  00000000  0000a9f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   0001c9a8  00000000  00000000  0000baa4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 000058e8  00000000  00000000  0002844c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   0000e3d4  00000000  00000000  0002dd34  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  000014a0  00000000  00000000  0003c108  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    0000188d  00000000  00000000  0003d5a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    000044a7  00000000  00000000  0003ee35  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000010  00000000  00000000  000432dc  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 000002f8  00000000  00000000  000432f0  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  000461c1  2**0
                  CONTENTS, READONLY
 18 .cpu          00000005  00000000  00000000  000461c4  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  000461c9  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  000461ca  2**0
                  CONTENTS, READONLY
 21 .sysid_hash   00000004  00000000  00000000  000461cb  2**0
                  CONTENTS, READONLY
 22 .sysid_base   00000004  00000000  00000000  000461cf  2**0
                  CONTENTS, READONLY
 23 .sysid_time   00000004  00000000  00000000  000461d3  2**0
                  CONTENTS, READONLY
 24 .stderr_dev   0000000b  00000000  00000000  000461d7  2**0
                  CONTENTS, READONLY
 25 .stdin_dev    0000000b  00000000  00000000  000461e2  2**0
                  CONTENTS, READONLY
 26 .stdout_dev   0000000b  00000000  00000000  000461ed  2**0
                  CONTENTS, READONLY
 27 .sopc_system_name 00000005  00000000  00000000  000461f8  2**0
                  CONTENTS, READONLY
 28 .quartus_project_dir 0000001f  00000000  00000000  000461fd  2**0
                  CONTENTS, READONLY
 29 .sopcinfo     0008b708  00000000  00000000  0004621c  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
0c000000 l    d  .entry	00000000 .entry
0c000020 l    d  .exceptions	00000000 .exceptions
0c0001b4 l    d  .text	00000000 .text
0c00737c l    d  .rodata	00000000 .rodata
0c0073f8 l    d  .rwdata	00000000 .rwdata
0c00abb0 l    d  .bss	00000000 .bss
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_pubnames	00000000 .debug_pubnames
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
0c0001ec l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 hello_world.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 impure.c
0c0073f8 l     O .rwdata	00000400 impure_data
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
0c001b5c l     F .text	00000058 std
0c001c68 l     F .text	00000008 __fp_lock
0c001c70 l     F .text	00000008 __fp_unlock
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 alt_close.c
0c002ca0 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
0c002d00 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
0c002e04 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_isatty.c
0c002f28 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
0c003008 l     F .text	0000006c alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
0c003168 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_read.c
0c003398 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
0c008fbc l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_write.c
0c003650 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
0c007da8 l     O .rwdata	000000c8 epcs_flash_controller_0
0c007e70 l     O .rwdata	00001060 jtag_uart_0
0c008ed0 l     O .rwdata	000000c4 uart_0
0c00376c l     F .text	00000038 alt_dev_reg
00000000 l    df *ABS*	00000000 altera_avalon_epcs_flash_controller.c
0c003830 l     F .text	00000288 alt_epcs_flash_query
0c0037f8 l     F .text	00000038 alt_flash_device_register
0c003ab8 l     F .text	00000108 alt_epcs_flash_memcmp
0c003f40 l     F .text	00000094 alt_epcs_test_address
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
0c004390 l     F .text	00000228 altera_avalon_jtag_uart_irq
0c0045b8 l     F .text	000000b0 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
0c004c34 l     F .text	00000070 alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 altera_avalon_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_uart_init.c
0c004ef4 l     F .text	0000009c altera_avalon_uart_irq
0c004f90 l     F .text	000000e0 altera_avalon_uart_rxirq
0c005070 l     F .text	0000015c altera_avalon_uart_txirq
00000000 l    df *ABS*	00000000 altera_avalon_uart_read.c
0c00545c l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 altera_avalon_uart_write.c
0c005684 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 epcs_commands.c
0c00583c l     F .text	00000038 epcs_await_wip_released
0c005874 l     F .text	00000038 epcs_test_wip
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
0c005fdc l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_flash_dev.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
0c0064bc l     F .text	000000d8 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
0c00660c l     F .text	000000f8 alt_file_locked
0c006890 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_qsys_irq.c
00000000 l    df *ABS*	00000000 altera_avalon_spi.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
0c007164 l     F .text	00000004 register_fini
00000000 l    df *ABS*	00000000 alt_exit.c
0c007318 l     F .text	00000040 alt_sim_halt
0c003e40 g     F .text	00000090 alt_epcs_flash_get_info
0c002a08 g     F .text	00000070 _isatty_r
0c0031c8 g     F .text	0000006c alt_main
0c000224 g     F .text	000000a0 _puts_r
0c00ac00 g     O .bss	00000100 alt_irq
0c002a78 g     F .text	00000078 _lseek_r
0c008fd4 g       *ABS*	00000000 __flash_rwdata_start
0c00ae90 g       *ABS*	00000000 __alt_heap_start
0c002644 g     F .text	00000068 __sseek
0c001bc4 g     F .text	000000a4 __sinit
0c001cc4 g     F .text	0000009c __sfmoreglue
0c003254 g     F .text	00000020 __malloc_unlock
0c0010ac g     F .text	000000e0 memmove
0c001cb4 g     F .text	00000010 _cleanup
00000000  w      *UND*	00000000 __errno
0c005744 g     F .text	000000f8 epcs_sector_erase
0c000000 g     F .entry	0000000c __reset
0c000020 g       *ABS*	00000000 __flash_exceptions_start
0c002994 g     F .text	00000074 _fstat_r
0c00abbc g     O .bss	00000004 errno
0c00abc4 g     O .bss	00000004 alt_argv
0c010f94 g       *ABS*	00000000 _gp
0c007c28 g     O .rwdata	00000180 alt_fd_list
0c005a48 g     F .text	00000064 epcs_write_status_register
0c006cec g     F .text	00000094 alt_find_dev
0c00100c g     F .text	000000a0 memcpy
0c001ca8 g     F .text	0000000c _cleanup_r
0c006594 g     F .text	00000078 alt_io_redirect
0c00737c g       *ABS*	00000000 __DTOR_END__
0c0002c4 g     F .text	00000014 puts
0c003fd4 g     F .text	0000011c alt_epcs_flash_write_block
0c0047d0 g     F .text	00000224 altera_avalon_jtag_uart_read
00000000  w      *UND*	00000000 malloc
0c002e64 g     F .text	000000c4 isatty
0c00abb0 g     O .bss	00000004 __malloc_top_pad
0c00034c g     F .text	0000049c __sfvwrite_r
0c001780 g     F .text	00000070 _sbrk_r
0c002af0 g     F .text	00000078 _read_r
0c008fb4 g     O .rwdata	00000004 alt_max_fd
0c002870 g     F .text	00000110 _fclose_r
0c001b28 g     F .text	00000034 fflush
0c00abb4 g     O .bss	00000004 __malloc_max_sbrked_mem
0c003ed0 g     F .text	00000070 alt_epcs_flash_erase_block
0c003074 g     F .text	000000f4 lseek
0c008f98 g     O .rwdata	00000004 _global_impure_ptr
0c005d60 g     F .text	00000058 epcs_exit_4_bytes_mode
0c00118c g     F .text	000005f4 _realloc_r
0c00ae90 g       *ABS*	00000000 __bss_end
0c0063c4 g     F .text	000000f8 alt_iic_isr_register
0c006988 g     F .text	0000010c alt_tick
0c004e2c g     F .text	000000c8 altera_avalon_uart_init
0c001c90 g     F .text	00000018 __fp_lock_all
0c00637c g     F .text	00000048 alt_ic_irq_enabled
0c0068f0 g     F .text	00000098 alt_alarm_stop
0c00abcc g     O .bss	00000004 alt_irq_active
0c0000ec g     F .exceptions	000000c8 alt_irq_handler
0c007c00 g     O .rwdata	00000028 alt_dev_null
0c005f0c g     F .text	0000001c alt_dcache_flush_all
0c008fd4 g       *ABS*	00000000 __ram_rwdata_end
0c008fac g     O .rwdata	00000008 alt_dev_list
0c00352c g     F .text	00000124 write
0c0073f8 g       *ABS*	00000000 __ram_rodata_end
0c002d2c g     F .text	000000d8 fstat
0c005c1c g     F .text	0000006c epcs_read_electronic_signature
0c00ae90 g       *ABS*	00000000 end
0c0054bc g     F .text	000001c8 altera_avalon_uart_write
0c0042d0 g     F .text	000000c0 altera_avalon_jtag_uart_init
0c007378 g       *ABS*	00000000 __CTOR_LIST__
10000000 g       *ABS*	00000000 __alt_stack_pointer
0c004ca4 g     F .text	00000090 alt_avalon_timer_sc_init
0c004d8c g     F .text	00000058 altera_avalon_uart_write_fd
0c004de4 g     F .text	00000048 altera_avalon_uart_close_fd
0c0049f4 g     F .text	00000240 altera_avalon_jtag_uart_write
0c001bb4 g     F .text	00000004 __sfp_lock_acquire
0c000f28 g     F .text	000000e4 memchr
0c001f7c g     F .text	00000314 _free_r
0c007168 g     F .text	000001b0 __call_exitprocs
0c008fa0 g     O .rwdata	00000004 __malloc_sbrk_base
0c0001b4 g     F .text	0000003c _start
0c00abd0 g     O .bss	00000004 _alt_tick_rate
0c006ab4 g     F .text	00000238 alt_avalon_spi_command
0c00abd4 g     O .bss	00000004 _alt_nticks
0c003274 g     F .text	00000124 read
0c0036e4 g     F .text	00000088 alt_sys_init
0c007030 g     F .text	00000134 __register_exitproc
0c004668 g     F .text	00000074 altera_avalon_jtag_uart_close
0c002b68 g     F .text	00000038 __mulsi3
0c0073f8 g       *ABS*	00000000 __ram_rwdata_start
0c00737c g       *ABS*	00000000 __ram_rodata_start
0c00abd8 g     O .bss	00000028 __malloc_current_mallinfo
0c0056e4 g     F .text	00000060 epcs_read_status_register
0c004188 g     F .text	00000058 altera_avalon_jtag_uart_read_fd
0c006ea0 g     F .text	000000d0 alt_get_fd
0c002800 g     F .text	00000070 _close_r
0c005c88 g     F .text	00000080 epcs_read_device_id
0c006fbc g     F .text	00000074 memcmp
0c004238 g     F .text	00000048 altera_avalon_jtag_uart_close_fd
0c00ae90 g       *ABS*	00000000 __alt_stack_base
0c004280 g     F .text	00000050 altera_avalon_jtag_uart_ioctl_fd
11003000 g       *ABS*	00000000 __alt_mem_epcs_flash_controller_0
0c0017f0 g     F .text	0000013c __swsetup_r
0c001d60 g     F .text	000000f0 __sfp
0c0077f8 g     O .rwdata	00000408 __malloc_av_
0c001bc0 g     F .text	00000004 __sinit_lock_release
0c002728 g     F .text	00000060 __sread
0c006d80 g     F .text	00000120 alt_find_file
0c005f28 g     F .text	000000b4 alt_dev_llist_insert
0c003234 g     F .text	00000020 __malloc_lock
0c003470 g     F .text	000000bc sbrk
0c00192c g     F .text	000001fc _fflush_r
0c008fc0 g     O .rwdata	00000008 alt_flash_dev_list
0c00abb0 g       *ABS*	00000000 __bss_start
0c0025a4 g     F .text	00000098 memset
0c0001f0 g     F .text	00000034 main
0c00abc8 g     O .bss	00000004 alt_envp
0c00abb8 g     O .bss	00000004 __malloc_max_total_mem
0c0041e0 g     F .text	00000058 altera_avalon_jtag_uart_write_fd
0c00263c g     F .text	00000008 __sclose
10000000 g       *ABS*	00000000 __alt_heap_limit
0c002980 g     F .text	00000014 fclose
0c00ad00 g     O .bss	00000190 _atexit0
0c0007e8 g     F .text	00000740 _malloc_r
0c008fb8 g     O .rwdata	00000004 alt_errno
0c002358 g     F .text	000000b8 _fwalk
0c001e50 g     F .text	0000012c _malloc_trim_r
0c00737c g       *ABS*	00000000 __CTOR_END__
0c003bc0 g     F .text	00000280 alt_epcs_flash_write
0c00737c g       *ABS*	00000000 __flash_rodata_start
0c00737c g       *ABS*	00000000 __DTOR_LIST__
0c0036b0 g     F .text	00000034 alt_irq_init
0c0033f8 g     F .text	00000078 alt_release_fd
0c006f70 g     F .text	00000014 atexit
0c002788 g     F .text	00000078 _write_r
0c008f94 g     O .rwdata	00000004 _impure_ptr
0c00abc0 g     O .bss	00000004 alt_argc
0c0060a0 g     F .text	00000064 _do_dtors
0c000020 g       .exceptions	00000000 alt_irq_entry
0c001c78 g     F .text	00000018 __fp_unlock_all
0c008fa4 g     O .rwdata	00000008 alt_fs_list
0c000020 g       *ABS*	00000000 __ram_exceptions_start
0c0058ac g     F .text	0000014c epcs_read_buffer
0c0037a4 g     F .text	00000054 alt_epcs_flash_init
0c0061f0 g     F .text	00000050 alt_ic_isr_register
0c008fd4 g       *ABS*	00000000 _edata
0c004d34 g     F .text	00000058 altera_avalon_uart_read_fd
0c000000 g       *ABS*	00000000 __alt_mem_ddr2
0c00ae90 g       *ABS*	00000000 _end
0c006104 g     F .text	0000007c alt_flash_open_dev
0c0001b4 g       *ABS*	00000000 __ram_exceptions_end
0c0046dc g     F .text	000000f4 altera_avalon_jtag_uart_ioctl
0c0062dc g     F .text	000000a0 alt_ic_irq_disable
0c005d08 g     F .text	00000058 epcs_enter_4_bytes_mode
0c0026ac g     F .text	0000007c __swrite
0c008f9c g     O .rwdata	00000004 __malloc_trim_threshold
0c006a94 g     F .text	00000020 altera_nios2_qsys_irq_init
0c006f84 g     F .text	00000038 exit
0c002290 g     F .text	000000c8 _fwalk_reent
0c006180 g     F .text	00000054 alt_flash_close_dev
10000000 g       *ABS*	00000000 __alt_data_end
0c000020 g     F .exceptions	00000000 alt_exception
0c001bb8 g     F .text	00000004 __sfp_lock_release
11001000 g       *ABS*	00000000 __alt_mem_onchip_ram
0c0051cc g     F .text	00000060 altera_avalon_uart_close
0c007358 g     F .text	00000020 _exit
0c005db8 g     F .text	00000154 alt_alarm_start
0c002410 g     F .text	00000194 __smakebuf_r
0c0002d8 g     F .text	00000074 strlen
0c0059f8 g     F .text	00000050 epcs_write_enable
0c006704 g     F .text	0000018c open
0c0061d4 g     F .text	0000001c alt_icache_flush_all
0c008fc8 g     O .rwdata	00000004 alt_priority_mask
0c006240 g     F .text	0000009c alt_ic_irq_enable
0c00522c g     F .text	00000230 altera_avalon_uart_read
0c0040f0 g     F .text	00000098 alt_epcs_flash_read
0c008fcc g     O .rwdata	00000008 alt_alarm_list
0c00603c g     F .text	00000064 _do_ctors
0c002ba0 g     F .text	00000100 close
0c002f88 g     F .text	00000080 alt_load
00000000  w      *UND*	00000000 free
0c001bbc g     F .text	00000004 __sinit_lock_acquire
0c005aac g     F .text	00000170 epcs_write_buffer



Disassembly of section .entry:

0c000000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
 c000000:	00430034 	movhi	at,3072
    ori r1, r1, %lo(_start)
 c000004:	08406d14 	ori	at,at,436
    jmp r1
 c000008:	0800683a 	jmp	at
	...

Disassembly of section .exceptions:

0c000020 <alt_exception>:
         * Process an exception.  For all exceptions we must preserve all
         * caller saved registers on the stack (See the Nios2 ABI
         * documentation for details).
         */

        addi  sp, sp, -76
 c000020:	deffed04 	addi	sp,sp,-76

#endif

#endif

        stw   ra,  0(sp)
 c000024:	dfc00015 	stw	ra,0(sp)
        /*
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */

        stw   r1,   8(sp)
 c000028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
 c00002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
 c000030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
 c000034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
 c000038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
 c00003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
 c000040:	d9c00815 	stw	r7,32(sp)

        rdctl r5, estatus
 c000044:	000b307a 	rdctl	r5,estatus

        stw   r8,  36(sp)
 c000048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
 c00004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
 c000050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
 c000054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
 c000058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
 c00005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
 c000060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
 c000064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
 c000068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
 c00006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
 c000070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
 c000074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
 c000078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
 c00007c:	10000326 	beq	r2,zero,c00008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
 c000080:	20000226 	beq	r4,zero,c00008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
 c000084:	c0000ec0 	call	c0000ec <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
 c000088:	00000306 	br	c000098 <alt_exception+0x78>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw   ea,  72(sp)  /* Don't re-issue */
 c00008c:	df401215 	stw	ea,72(sp)
        ldw   r2, -4(ea)   /* Instruction that caused exception */
 c000090:	e8bfff17 	ldw	r2,-4(ea)
#ifdef NIOS2_HAS_DEBUG_STUB
       /*
        *  Either tell the user now (if there is a debugger attached) or go into
        *  the debug monitor which will loop until a debugger is attached.
        */
        break
 c000094:	003da03a 	break	0
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
 c000098:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
 c00009c:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
 c0000a0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
 c0000a4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
 c0000a8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
 c0000ac:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
 c0000b0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
 c0000b4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
 c0000b8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
 c0000bc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
 c0000c0:	d9c00817 	ldw	r7,32(sp)
#ifdef ALT_STACK_CHECK
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif
#endif

        ldw   r8,  36(sp)
 c0000c4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
 c0000c8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
 c0000cc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
 c0000d0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
 c0000d4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
 c0000d8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
 c0000dc:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
 c0000e0:	dbc01017 	ldw	r15,64(sp)
#endif

        ldw   sp,  76(sp)

#else
        addi  sp, sp, 76
 c0000e4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
 c0000e8:	ef80083a 	eret

0c0000ec <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
 c0000ec:	defff904 	addi	sp,sp,-28
 c0000f0:	dfc00615 	stw	ra,24(sp)
 c0000f4:	df000515 	stw	fp,20(sp)
 c0000f8:	df000504 	addi	fp,sp,20
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 c0000fc:	0005313a 	rdctl	r2,ipending
 c000100:	e0bffc15 	stw	r2,-16(fp)

  return active;
 c000104:	e0bffc17 	ldw	r2,-16(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
 c000108:	e0bfff15 	stw	r2,-4(fp)

  do
  {
    i = 0;
 c00010c:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
 c000110:	00800044 	movi	r2,1
 c000114:	e0bffe15 	stw	r2,-8(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
 c000118:	e0ffff17 	ldw	r3,-4(fp)
 c00011c:	e0bffe17 	ldw	r2,-8(fp)
 c000120:	1884703a 	and	r2,r3,r2
 c000124:	1005003a 	cmpeq	r2,r2,zero
 c000128:	1000161e 	bne	r2,zero,c000184 <alt_irq_handler+0x98>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
 c00012c:	e0bffd17 	ldw	r2,-12(fp)
 c000130:	00c30074 	movhi	r3,3073
 c000134:	18eb0004 	addi	r3,r3,-21504
 c000138:	100490fa 	slli	r2,r2,3
 c00013c:	10c5883a 	add	r2,r2,r3
 c000140:	11400017 	ldw	r5,0(r2)
 c000144:	e0bffd17 	ldw	r2,-12(fp)
 c000148:	00c30074 	movhi	r3,3073
 c00014c:	18eb0004 	addi	r3,r3,-21504
 c000150:	100490fa 	slli	r2,r2,3
 c000154:	10c5883a 	add	r2,r2,r3
 c000158:	10800104 	addi	r2,r2,4
 c00015c:	11000017 	ldw	r4,0(r2)
 c000160:	283ee83a 	callr	r5
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 c000164:	0005313a 	rdctl	r2,ipending
 c000168:	e0bffb15 	stw	r2,-20(fp)

  return active;
 c00016c:	e0bffb17 	ldw	r2,-20(fp)
      mask <<= 1;
      i++;

    } while (1);

    active = alt_irq_pending ();
 c000170:	e0bfff15 	stw	r2,-4(fp)
    
  } while (active);
 c000174:	e0bfff17 	ldw	r2,-4(fp)
 c000178:	1004c03a 	cmpne	r2,r2,zero
 c00017c:	103fe31e 	bne	r2,zero,c00010c <alt_irq_handler+0x20>
 c000180:	00000706 	br	c0001a0 <alt_irq_handler+0xb4>
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
      }
      mask <<= 1;
 c000184:	e0bffe17 	ldw	r2,-8(fp)
 c000188:	1085883a 	add	r2,r2,r2
 c00018c:	e0bffe15 	stw	r2,-8(fp)
      i++;
 c000190:	e0bffd17 	ldw	r2,-12(fp)
 c000194:	10800044 	addi	r2,r2,1
 c000198:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
 c00019c:	003fde06 	br	c000118 <alt_irq_handler+0x2c>
  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
}
 c0001a0:	e037883a 	mov	sp,fp
 c0001a4:	dfc00117 	ldw	ra,4(sp)
 c0001a8:	df000017 	ldw	fp,0(sp)
 c0001ac:	dec00204 	addi	sp,sp,8
 c0001b0:	f800283a 	ret

Disassembly of section .text:

0c0001b4 <_start>:
#if (NIOS2_NUM_OF_SHADOW_REG_SETS == 0)    
    /*
     * Now that the caches are initialized, set up the stack pointer.
     * The value provided by the linker is assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
 c0001b4:	06c40034 	movhi	sp,4096
    ori sp, sp, %lo(__alt_stack_pointer)
 c0001b8:	dec00014 	ori	sp,sp,0

    /* Set up the global pointer. */
    movhi gp, %hi(_gp)
 c0001bc:	06830074 	movhi	gp,3073
    ori gp, gp, %lo(_gp)
 c0001c0:	d683e514 	ori	gp,gp,3988
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
 c0001c4:	00830034 	movhi	r2,3072
    ori r2, r2, %lo(__bss_start)
 c0001c8:	10aaec14 	ori	r2,r2,43952

    movhi r3, %hi(__bss_end)
 c0001cc:	00c30034 	movhi	r3,3072
    ori r3, r3, %lo(__bss_end)
 c0001d0:	18eba414 	ori	r3,r3,44688

    beq r2, r3, 1f
 c0001d4:	10c00326 	beq	r2,r3,c0001e4 <_start+0x30>

0:
    stw zero, (r2)
 c0001d8:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
 c0001dc:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
 c0001e0:	10fffd36 	bltu	r2,r3,c0001d8 <_start+0x24>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
 c0001e4:	c002f880 	call	c002f88 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
 c0001e8:	c0031c80 	call	c0031c8 <alt_main>

0c0001ec <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
 c0001ec:	003fff06 	br	c0001ec <alt_after_alt_main>

0c0001f0 <main>:
 */

#include <stdio.h>

int main()
{
 c0001f0:	defffe04 	addi	sp,sp,-8
 c0001f4:	dfc00115 	stw	ra,4(sp)
 c0001f8:	df000015 	stw	fp,0(sp)
 c0001fc:	d839883a 	mov	fp,sp
  printf("Hello from Nios II!\n");
 c000200:	01030034 	movhi	r4,3072
 c000204:	211cdf04 	addi	r4,r4,29564
 c000208:	c0002c40 	call	c0002c4 <puts>

  return 0;
 c00020c:	0005883a 	mov	r2,zero
}
 c000210:	e037883a 	mov	sp,fp
 c000214:	dfc00117 	ldw	ra,4(sp)
 c000218:	df000017 	ldw	fp,0(sp)
 c00021c:	dec00204 	addi	sp,sp,8
 c000220:	f800283a 	ret

0c000224 <_puts_r>:
 c000224:	defff604 	addi	sp,sp,-40
 c000228:	dc400715 	stw	r17,28(sp)
 c00022c:	2023883a 	mov	r17,r4
 c000230:	2809883a 	mov	r4,r5
 c000234:	dfc00915 	stw	ra,36(sp)
 c000238:	dcc00815 	stw	r19,32(sp)
 c00023c:	2827883a 	mov	r19,r5
 c000240:	c0002d80 	call	c0002d8 <strlen>
 c000244:	89400217 	ldw	r5,8(r17)
 c000248:	00c30034 	movhi	r3,3072
 c00024c:	18dce404 	addi	r3,r3,29584
 c000250:	01c00044 	movi	r7,1
 c000254:	12000044 	addi	r8,r2,1
 c000258:	d8c00515 	stw	r3,20(sp)
 c00025c:	d9c00615 	stw	r7,24(sp)
 c000260:	d8c00304 	addi	r3,sp,12
 c000264:	01c00084 	movi	r7,2
 c000268:	8809883a 	mov	r4,r17
 c00026c:	d80d883a 	mov	r6,sp
 c000270:	d8c00015 	stw	r3,0(sp)
 c000274:	dcc00315 	stw	r19,12(sp)
 c000278:	da000215 	stw	r8,8(sp)
 c00027c:	d9c00115 	stw	r7,4(sp)
 c000280:	d8800415 	stw	r2,16(sp)
 c000284:	c00034c0 	call	c00034c <__sfvwrite_r>
 c000288:	00ffffc4 	movi	r3,-1
 c00028c:	10000626 	beq	r2,zero,c0002a8 <_puts_r+0x84>
 c000290:	1805883a 	mov	r2,r3
 c000294:	dfc00917 	ldw	ra,36(sp)
 c000298:	dcc00817 	ldw	r19,32(sp)
 c00029c:	dc400717 	ldw	r17,28(sp)
 c0002a0:	dec00a04 	addi	sp,sp,40
 c0002a4:	f800283a 	ret
 c0002a8:	00c00284 	movi	r3,10
 c0002ac:	1805883a 	mov	r2,r3
 c0002b0:	dfc00917 	ldw	ra,36(sp)
 c0002b4:	dcc00817 	ldw	r19,32(sp)
 c0002b8:	dc400717 	ldw	r17,28(sp)
 c0002bc:	dec00a04 	addi	sp,sp,40
 c0002c0:	f800283a 	ret

0c0002c4 <puts>:
 c0002c4:	00830074 	movhi	r2,3073
 c0002c8:	10a3e504 	addi	r2,r2,-28780
 c0002cc:	200b883a 	mov	r5,r4
 c0002d0:	11000017 	ldw	r4,0(r2)
 c0002d4:	c0002241 	jmpi	c000224 <_puts_r>

0c0002d8 <strlen>:
 c0002d8:	208000cc 	andi	r2,r4,3
 c0002dc:	2011883a 	mov	r8,r4
 c0002e0:	1000161e 	bne	r2,zero,c00033c <strlen+0x64>
 c0002e4:	20c00017 	ldw	r3,0(r4)
 c0002e8:	017fbff4 	movhi	r5,65279
 c0002ec:	297fbfc4 	addi	r5,r5,-257
 c0002f0:	01e02074 	movhi	r7,32897
 c0002f4:	39e02004 	addi	r7,r7,-32640
 c0002f8:	1945883a 	add	r2,r3,r5
 c0002fc:	11c4703a 	and	r2,r2,r7
 c000300:	00c6303a 	nor	r3,zero,r3
 c000304:	1886703a 	and	r3,r3,r2
 c000308:	18000c1e 	bne	r3,zero,c00033c <strlen+0x64>
 c00030c:	280d883a 	mov	r6,r5
 c000310:	380b883a 	mov	r5,r7
 c000314:	21000104 	addi	r4,r4,4
 c000318:	20800017 	ldw	r2,0(r4)
 c00031c:	1187883a 	add	r3,r2,r6
 c000320:	1946703a 	and	r3,r3,r5
 c000324:	0084303a 	nor	r2,zero,r2
 c000328:	10c4703a 	and	r2,r2,r3
 c00032c:	103ff926 	beq	r2,zero,c000314 <strlen+0x3c>
 c000330:	20800007 	ldb	r2,0(r4)
 c000334:	10000326 	beq	r2,zero,c000344 <strlen+0x6c>
 c000338:	21000044 	addi	r4,r4,1
 c00033c:	20800007 	ldb	r2,0(r4)
 c000340:	103ffd1e 	bne	r2,zero,c000338 <strlen+0x60>
 c000344:	2205c83a 	sub	r2,r4,r8
 c000348:	f800283a 	ret

0c00034c <__sfvwrite_r>:
 c00034c:	30800217 	ldw	r2,8(r6)
 c000350:	defff504 	addi	sp,sp,-44
 c000354:	df000915 	stw	fp,36(sp)
 c000358:	dd800715 	stw	r22,28(sp)
 c00035c:	dc800315 	stw	r18,12(sp)
 c000360:	dfc00a15 	stw	ra,40(sp)
 c000364:	ddc00815 	stw	r23,32(sp)
 c000368:	dd400615 	stw	r21,24(sp)
 c00036c:	dd000515 	stw	r20,20(sp)
 c000370:	dcc00415 	stw	r19,16(sp)
 c000374:	dc400215 	stw	r17,8(sp)
 c000378:	dc000115 	stw	r16,4(sp)
 c00037c:	302d883a 	mov	r22,r6
 c000380:	2039883a 	mov	fp,r4
 c000384:	2825883a 	mov	r18,r5
 c000388:	10001c26 	beq	r2,zero,c0003fc <__sfvwrite_r+0xb0>
 c00038c:	29c0030b 	ldhu	r7,12(r5)
 c000390:	3880020c 	andi	r2,r7,8
 c000394:	10002726 	beq	r2,zero,c000434 <__sfvwrite_r+0xe8>
 c000398:	28800417 	ldw	r2,16(r5)
 c00039c:	10002526 	beq	r2,zero,c000434 <__sfvwrite_r+0xe8>
 c0003a0:	3880008c 	andi	r2,r7,2
 c0003a4:	b5400017 	ldw	r21,0(r22)
 c0003a8:	10002826 	beq	r2,zero,c00044c <__sfvwrite_r+0x100>
 c0003ac:	0021883a 	mov	r16,zero
 c0003b0:	0023883a 	mov	r17,zero
 c0003b4:	880d883a 	mov	r6,r17
 c0003b8:	e009883a 	mov	r4,fp
 c0003bc:	00810004 	movi	r2,1024
 c0003c0:	80006e26 	beq	r16,zero,c00057c <__sfvwrite_r+0x230>
 c0003c4:	800f883a 	mov	r7,r16
 c0003c8:	91400717 	ldw	r5,28(r18)
 c0003cc:	1400012e 	bgeu	r2,r16,c0003d4 <__sfvwrite_r+0x88>
 c0003d0:	100f883a 	mov	r7,r2
 c0003d4:	90c00917 	ldw	r3,36(r18)
 c0003d8:	183ee83a 	callr	r3
 c0003dc:	1007883a 	mov	r3,r2
 c0003e0:	80a1c83a 	sub	r16,r16,r2
 c0003e4:	88a3883a 	add	r17,r17,r2
 c0003e8:	00806d0e 	bge	zero,r2,c0005a0 <__sfvwrite_r+0x254>
 c0003ec:	b0800217 	ldw	r2,8(r22)
 c0003f0:	10c5c83a 	sub	r2,r2,r3
 c0003f4:	b0800215 	stw	r2,8(r22)
 c0003f8:	103fee1e 	bne	r2,zero,c0003b4 <__sfvwrite_r+0x68>
 c0003fc:	0009883a 	mov	r4,zero
 c000400:	2005883a 	mov	r2,r4
 c000404:	dfc00a17 	ldw	ra,40(sp)
 c000408:	df000917 	ldw	fp,36(sp)
 c00040c:	ddc00817 	ldw	r23,32(sp)
 c000410:	dd800717 	ldw	r22,28(sp)
 c000414:	dd400617 	ldw	r21,24(sp)
 c000418:	dd000517 	ldw	r20,20(sp)
 c00041c:	dcc00417 	ldw	r19,16(sp)
 c000420:	dc800317 	ldw	r18,12(sp)
 c000424:	dc400217 	ldw	r17,8(sp)
 c000428:	dc000117 	ldw	r16,4(sp)
 c00042c:	dec00b04 	addi	sp,sp,44
 c000430:	f800283a 	ret
 c000434:	c0017f00 	call	c0017f0 <__swsetup_r>
 c000438:	1000e41e 	bne	r2,zero,c0007cc <__sfvwrite_r+0x480>
 c00043c:	91c0030b 	ldhu	r7,12(r18)
 c000440:	b5400017 	ldw	r21,0(r22)
 c000444:	3880008c 	andi	r2,r7,2
 c000448:	103fd81e 	bne	r2,zero,c0003ac <__sfvwrite_r+0x60>
 c00044c:	3880004c 	andi	r2,r7,1
 c000450:	1005003a 	cmpeq	r2,r2,zero
 c000454:	10005726 	beq	r2,zero,c0005b4 <__sfvwrite_r+0x268>
 c000458:	0029883a 	mov	r20,zero
 c00045c:	002f883a 	mov	r23,zero
 c000460:	a0004226 	beq	r20,zero,c00056c <__sfvwrite_r+0x220>
 c000464:	3880800c 	andi	r2,r7,512
 c000468:	94000217 	ldw	r16,8(r18)
 c00046c:	10008b26 	beq	r2,zero,c00069c <__sfvwrite_r+0x350>
 c000470:	800d883a 	mov	r6,r16
 c000474:	a400a536 	bltu	r20,r16,c00070c <__sfvwrite_r+0x3c0>
 c000478:	3881200c 	andi	r2,r7,1152
 c00047c:	10002726 	beq	r2,zero,c00051c <__sfvwrite_r+0x1d0>
 c000480:	90800517 	ldw	r2,20(r18)
 c000484:	92000417 	ldw	r8,16(r18)
 c000488:	91400017 	ldw	r5,0(r18)
 c00048c:	1087883a 	add	r3,r2,r2
 c000490:	1887883a 	add	r3,r3,r2
 c000494:	1808d7fa 	srli	r4,r3,31
 c000498:	2a21c83a 	sub	r16,r5,r8
 c00049c:	80800044 	addi	r2,r16,1
 c0004a0:	20c9883a 	add	r4,r4,r3
 c0004a4:	2027d07a 	srai	r19,r4,1
 c0004a8:	a085883a 	add	r2,r20,r2
 c0004ac:	980d883a 	mov	r6,r19
 c0004b0:	9880022e 	bgeu	r19,r2,c0004bc <__sfvwrite_r+0x170>
 c0004b4:	1027883a 	mov	r19,r2
 c0004b8:	100d883a 	mov	r6,r2
 c0004bc:	3881000c 	andi	r2,r7,1024
 c0004c0:	1000b826 	beq	r2,zero,c0007a4 <__sfvwrite_r+0x458>
 c0004c4:	300b883a 	mov	r5,r6
 c0004c8:	e009883a 	mov	r4,fp
 c0004cc:	c0007e80 	call	c0007e8 <_malloc_r>
 c0004d0:	10003126 	beq	r2,zero,c000598 <__sfvwrite_r+0x24c>
 c0004d4:	91400417 	ldw	r5,16(r18)
 c0004d8:	1009883a 	mov	r4,r2
 c0004dc:	800d883a 	mov	r6,r16
 c0004e0:	1023883a 	mov	r17,r2
 c0004e4:	c00100c0 	call	c00100c <memcpy>
 c0004e8:	90c0030b 	ldhu	r3,12(r18)
 c0004ec:	00beffc4 	movi	r2,-1025
 c0004f0:	1886703a 	and	r3,r3,r2
 c0004f4:	18c02014 	ori	r3,r3,128
 c0004f8:	90c0030d 	sth	r3,12(r18)
 c0004fc:	9c07c83a 	sub	r3,r19,r16
 c000500:	8c05883a 	add	r2,r17,r16
 c000504:	a00d883a 	mov	r6,r20
 c000508:	a021883a 	mov	r16,r20
 c00050c:	90800015 	stw	r2,0(r18)
 c000510:	90c00215 	stw	r3,8(r18)
 c000514:	94400415 	stw	r17,16(r18)
 c000518:	94c00515 	stw	r19,20(r18)
 c00051c:	91000017 	ldw	r4,0(r18)
 c000520:	b80b883a 	mov	r5,r23
 c000524:	a023883a 	mov	r17,r20
 c000528:	c0010ac0 	call	c0010ac <memmove>
 c00052c:	90c00217 	ldw	r3,8(r18)
 c000530:	90800017 	ldw	r2,0(r18)
 c000534:	a027883a 	mov	r19,r20
 c000538:	1c07c83a 	sub	r3,r3,r16
 c00053c:	1405883a 	add	r2,r2,r16
 c000540:	90c00215 	stw	r3,8(r18)
 c000544:	a021883a 	mov	r16,r20
 c000548:	90800015 	stw	r2,0(r18)
 c00054c:	b0800217 	ldw	r2,8(r22)
 c000550:	1405c83a 	sub	r2,r2,r16
 c000554:	b0800215 	stw	r2,8(r22)
 c000558:	103fa826 	beq	r2,zero,c0003fc <__sfvwrite_r+0xb0>
 c00055c:	a469c83a 	sub	r20,r20,r17
 c000560:	91c0030b 	ldhu	r7,12(r18)
 c000564:	bcef883a 	add	r23,r23,r19
 c000568:	a03fbe1e 	bne	r20,zero,c000464 <__sfvwrite_r+0x118>
 c00056c:	adc00017 	ldw	r23,0(r21)
 c000570:	ad000117 	ldw	r20,4(r21)
 c000574:	ad400204 	addi	r21,r21,8
 c000578:	003fb906 	br	c000460 <__sfvwrite_r+0x114>
 c00057c:	ac400017 	ldw	r17,0(r21)
 c000580:	ac000117 	ldw	r16,4(r21)
 c000584:	ad400204 	addi	r21,r21,8
 c000588:	003f8a06 	br	c0003b4 <__sfvwrite_r+0x68>
 c00058c:	91400417 	ldw	r5,16(r18)
 c000590:	e009883a 	mov	r4,fp
 c000594:	c001f7c0 	call	c001f7c <_free_r>
 c000598:	00800304 	movi	r2,12
 c00059c:	e0800015 	stw	r2,0(fp)
 c0005a0:	9080030b 	ldhu	r2,12(r18)
 c0005a4:	013fffc4 	movi	r4,-1
 c0005a8:	10801014 	ori	r2,r2,64
 c0005ac:	9080030d 	sth	r2,12(r18)
 c0005b0:	003f9306 	br	c000400 <__sfvwrite_r+0xb4>
 c0005b4:	0027883a 	mov	r19,zero
 c0005b8:	002f883a 	mov	r23,zero
 c0005bc:	d8000015 	stw	zero,0(sp)
 c0005c0:	0029883a 	mov	r20,zero
 c0005c4:	98001e26 	beq	r19,zero,c000640 <__sfvwrite_r+0x2f4>
 c0005c8:	d8c00017 	ldw	r3,0(sp)
 c0005cc:	1804c03a 	cmpne	r2,r3,zero
 c0005d0:	10005e26 	beq	r2,zero,c00074c <__sfvwrite_r+0x400>
 c0005d4:	9821883a 	mov	r16,r19
 c0005d8:	a4c0012e 	bgeu	r20,r19,c0005e0 <__sfvwrite_r+0x294>
 c0005dc:	a021883a 	mov	r16,r20
 c0005e0:	91000017 	ldw	r4,0(r18)
 c0005e4:	90800417 	ldw	r2,16(r18)
 c0005e8:	91800217 	ldw	r6,8(r18)
 c0005ec:	91c00517 	ldw	r7,20(r18)
 c0005f0:	1100022e 	bgeu	r2,r4,c0005fc <__sfvwrite_r+0x2b0>
 c0005f4:	31e3883a 	add	r17,r6,r7
 c0005f8:	8c001616 	blt	r17,r16,c000654 <__sfvwrite_r+0x308>
 c0005fc:	81c03816 	blt	r16,r7,c0006e0 <__sfvwrite_r+0x394>
 c000600:	90c00917 	ldw	r3,36(r18)
 c000604:	91400717 	ldw	r5,28(r18)
 c000608:	e009883a 	mov	r4,fp
 c00060c:	b80d883a 	mov	r6,r23
 c000610:	183ee83a 	callr	r3
 c000614:	1023883a 	mov	r17,r2
 c000618:	00bfe10e 	bge	zero,r2,c0005a0 <__sfvwrite_r+0x254>
 c00061c:	a469c83a 	sub	r20,r20,r17
 c000620:	a0001826 	beq	r20,zero,c000684 <__sfvwrite_r+0x338>
 c000624:	b0800217 	ldw	r2,8(r22)
 c000628:	1445c83a 	sub	r2,r2,r17
 c00062c:	b0800215 	stw	r2,8(r22)
 c000630:	103f7226 	beq	r2,zero,c0003fc <__sfvwrite_r+0xb0>
 c000634:	9c67c83a 	sub	r19,r19,r17
 c000638:	bc6f883a 	add	r23,r23,r17
 c00063c:	983fe21e 	bne	r19,zero,c0005c8 <__sfvwrite_r+0x27c>
 c000640:	adc00017 	ldw	r23,0(r21)
 c000644:	acc00117 	ldw	r19,4(r21)
 c000648:	ad400204 	addi	r21,r21,8
 c00064c:	d8000015 	stw	zero,0(sp)
 c000650:	003fdc06 	br	c0005c4 <__sfvwrite_r+0x278>
 c000654:	b80b883a 	mov	r5,r23
 c000658:	880d883a 	mov	r6,r17
 c00065c:	c0010ac0 	call	c0010ac <memmove>
 c000660:	90c00017 	ldw	r3,0(r18)
 c000664:	e009883a 	mov	r4,fp
 c000668:	900b883a 	mov	r5,r18
 c00066c:	1c47883a 	add	r3,r3,r17
 c000670:	90c00015 	stw	r3,0(r18)
 c000674:	c00192c0 	call	c00192c <_fflush_r>
 c000678:	103fc91e 	bne	r2,zero,c0005a0 <__sfvwrite_r+0x254>
 c00067c:	a469c83a 	sub	r20,r20,r17
 c000680:	a03fe81e 	bne	r20,zero,c000624 <__sfvwrite_r+0x2d8>
 c000684:	e009883a 	mov	r4,fp
 c000688:	900b883a 	mov	r5,r18
 c00068c:	c00192c0 	call	c00192c <_fflush_r>
 c000690:	103fc31e 	bne	r2,zero,c0005a0 <__sfvwrite_r+0x254>
 c000694:	d8000015 	stw	zero,0(sp)
 c000698:	003fe206 	br	c000624 <__sfvwrite_r+0x2d8>
 c00069c:	91000017 	ldw	r4,0(r18)
 c0006a0:	90800417 	ldw	r2,16(r18)
 c0006a4:	1100022e 	bgeu	r2,r4,c0006b0 <__sfvwrite_r+0x364>
 c0006a8:	8023883a 	mov	r17,r16
 c0006ac:	85003136 	bltu	r16,r20,c000774 <__sfvwrite_r+0x428>
 c0006b0:	91c00517 	ldw	r7,20(r18)
 c0006b4:	a1c01836 	bltu	r20,r7,c000718 <__sfvwrite_r+0x3cc>
 c0006b8:	90c00917 	ldw	r3,36(r18)
 c0006bc:	91400717 	ldw	r5,28(r18)
 c0006c0:	e009883a 	mov	r4,fp
 c0006c4:	b80d883a 	mov	r6,r23
 c0006c8:	183ee83a 	callr	r3
 c0006cc:	1021883a 	mov	r16,r2
 c0006d0:	00bfb30e 	bge	zero,r2,c0005a0 <__sfvwrite_r+0x254>
 c0006d4:	1023883a 	mov	r17,r2
 c0006d8:	1027883a 	mov	r19,r2
 c0006dc:	003f9b06 	br	c00054c <__sfvwrite_r+0x200>
 c0006e0:	b80b883a 	mov	r5,r23
 c0006e4:	800d883a 	mov	r6,r16
 c0006e8:	c0010ac0 	call	c0010ac <memmove>
 c0006ec:	90c00217 	ldw	r3,8(r18)
 c0006f0:	90800017 	ldw	r2,0(r18)
 c0006f4:	8023883a 	mov	r17,r16
 c0006f8:	1c07c83a 	sub	r3,r3,r16
 c0006fc:	1405883a 	add	r2,r2,r16
 c000700:	90c00215 	stw	r3,8(r18)
 c000704:	90800015 	stw	r2,0(r18)
 c000708:	003fc406 	br	c00061c <__sfvwrite_r+0x2d0>
 c00070c:	a00d883a 	mov	r6,r20
 c000710:	a021883a 	mov	r16,r20
 c000714:	003f8106 	br	c00051c <__sfvwrite_r+0x1d0>
 c000718:	b80b883a 	mov	r5,r23
 c00071c:	a00d883a 	mov	r6,r20
 c000720:	c0010ac0 	call	c0010ac <memmove>
 c000724:	90c00217 	ldw	r3,8(r18)
 c000728:	90800017 	ldw	r2,0(r18)
 c00072c:	a021883a 	mov	r16,r20
 c000730:	1d07c83a 	sub	r3,r3,r20
 c000734:	1505883a 	add	r2,r2,r20
 c000738:	a023883a 	mov	r17,r20
 c00073c:	a027883a 	mov	r19,r20
 c000740:	90c00215 	stw	r3,8(r18)
 c000744:	90800015 	stw	r2,0(r18)
 c000748:	003f8006 	br	c00054c <__sfvwrite_r+0x200>
 c00074c:	b809883a 	mov	r4,r23
 c000750:	01400284 	movi	r5,10
 c000754:	980d883a 	mov	r6,r19
 c000758:	c000f280 	call	c000f28 <memchr>
 c00075c:	10001726 	beq	r2,zero,c0007bc <__sfvwrite_r+0x470>
 c000760:	15c5c83a 	sub	r2,r2,r23
 c000764:	15000044 	addi	r20,r2,1
 c000768:	00800044 	movi	r2,1
 c00076c:	d8800015 	stw	r2,0(sp)
 c000770:	003f9806 	br	c0005d4 <__sfvwrite_r+0x288>
 c000774:	b80b883a 	mov	r5,r23
 c000778:	800d883a 	mov	r6,r16
 c00077c:	c0010ac0 	call	c0010ac <memmove>
 c000780:	90c00017 	ldw	r3,0(r18)
 c000784:	e009883a 	mov	r4,fp
 c000788:	900b883a 	mov	r5,r18
 c00078c:	1c07883a 	add	r3,r3,r16
 c000790:	90c00015 	stw	r3,0(r18)
 c000794:	8027883a 	mov	r19,r16
 c000798:	c00192c0 	call	c00192c <_fflush_r>
 c00079c:	103f6b26 	beq	r2,zero,c00054c <__sfvwrite_r+0x200>
 c0007a0:	003f7f06 	br	c0005a0 <__sfvwrite_r+0x254>
 c0007a4:	400b883a 	mov	r5,r8
 c0007a8:	e009883a 	mov	r4,fp
 c0007ac:	c00118c0 	call	c00118c <_realloc_r>
 c0007b0:	103f7626 	beq	r2,zero,c00058c <__sfvwrite_r+0x240>
 c0007b4:	1023883a 	mov	r17,r2
 c0007b8:	003f5006 	br	c0004fc <__sfvwrite_r+0x1b0>
 c0007bc:	00c00044 	movi	r3,1
 c0007c0:	9d000044 	addi	r20,r19,1
 c0007c4:	d8c00015 	stw	r3,0(sp)
 c0007c8:	003f8206 	br	c0005d4 <__sfvwrite_r+0x288>
 c0007cc:	9080030b 	ldhu	r2,12(r18)
 c0007d0:	00c00244 	movi	r3,9
 c0007d4:	013fffc4 	movi	r4,-1
 c0007d8:	10801014 	ori	r2,r2,64
 c0007dc:	9080030d 	sth	r2,12(r18)
 c0007e0:	e0c00015 	stw	r3,0(fp)
 c0007e4:	003f0606 	br	c000400 <__sfvwrite_r+0xb4>

0c0007e8 <_malloc_r>:
 c0007e8:	defff604 	addi	sp,sp,-40
 c0007ec:	28c002c4 	addi	r3,r5,11
 c0007f0:	00800584 	movi	r2,22
 c0007f4:	dc800215 	stw	r18,8(sp)
 c0007f8:	dfc00915 	stw	ra,36(sp)
 c0007fc:	df000815 	stw	fp,32(sp)
 c000800:	ddc00715 	stw	r23,28(sp)
 c000804:	dd800615 	stw	r22,24(sp)
 c000808:	dd400515 	stw	r21,20(sp)
 c00080c:	dd000415 	stw	r20,16(sp)
 c000810:	dcc00315 	stw	r19,12(sp)
 c000814:	dc400115 	stw	r17,4(sp)
 c000818:	dc000015 	stw	r16,0(sp)
 c00081c:	2025883a 	mov	r18,r4
 c000820:	10c01236 	bltu	r2,r3,c00086c <_malloc_r+0x84>
 c000824:	04400404 	movi	r17,16
 c000828:	8940142e 	bgeu	r17,r5,c00087c <_malloc_r+0x94>
 c00082c:	00800304 	movi	r2,12
 c000830:	0007883a 	mov	r3,zero
 c000834:	90800015 	stw	r2,0(r18)
 c000838:	1805883a 	mov	r2,r3
 c00083c:	dfc00917 	ldw	ra,36(sp)
 c000840:	df000817 	ldw	fp,32(sp)
 c000844:	ddc00717 	ldw	r23,28(sp)
 c000848:	dd800617 	ldw	r22,24(sp)
 c00084c:	dd400517 	ldw	r21,20(sp)
 c000850:	dd000417 	ldw	r20,16(sp)
 c000854:	dcc00317 	ldw	r19,12(sp)
 c000858:	dc800217 	ldw	r18,8(sp)
 c00085c:	dc400117 	ldw	r17,4(sp)
 c000860:	dc000017 	ldw	r16,0(sp)
 c000864:	dec00a04 	addi	sp,sp,40
 c000868:	f800283a 	ret
 c00086c:	00bffe04 	movi	r2,-8
 c000870:	18a2703a 	and	r17,r3,r2
 c000874:	883fed16 	blt	r17,zero,c00082c <_malloc_r+0x44>
 c000878:	897fec36 	bltu	r17,r5,c00082c <_malloc_r+0x44>
 c00087c:	9009883a 	mov	r4,r18
 c000880:	c0032340 	call	c003234 <__malloc_lock>
 c000884:	00807dc4 	movi	r2,503
 c000888:	14402b2e 	bgeu	r2,r17,c000938 <_malloc_r+0x150>
 c00088c:	8806d27a 	srli	r3,r17,9
 c000890:	18003f1e 	bne	r3,zero,c000990 <_malloc_r+0x1a8>
 c000894:	880cd0fa 	srli	r6,r17,3
 c000898:	300490fa 	slli	r2,r6,3
 c00089c:	02c30034 	movhi	r11,3072
 c0008a0:	5addfe04 	addi	r11,r11,30712
 c0008a4:	12cb883a 	add	r5,r2,r11
 c0008a8:	2c000317 	ldw	r16,12(r5)
 c0008ac:	580f883a 	mov	r7,r11
 c0008b0:	2c00041e 	bne	r5,r16,c0008c4 <_malloc_r+0xdc>
 c0008b4:	00000a06 	br	c0008e0 <_malloc_r+0xf8>
 c0008b8:	1800860e 	bge	r3,zero,c000ad4 <_malloc_r+0x2ec>
 c0008bc:	84000317 	ldw	r16,12(r16)
 c0008c0:	2c000726 	beq	r5,r16,c0008e0 <_malloc_r+0xf8>
 c0008c4:	80800117 	ldw	r2,4(r16)
 c0008c8:	00ffff04 	movi	r3,-4
 c0008cc:	10c8703a 	and	r4,r2,r3
 c0008d0:	2447c83a 	sub	r3,r4,r17
 c0008d4:	008003c4 	movi	r2,15
 c0008d8:	10fff70e 	bge	r2,r3,c0008b8 <_malloc_r+0xd0>
 c0008dc:	31bfffc4 	addi	r6,r6,-1
 c0008e0:	32400044 	addi	r9,r6,1
 c0008e4:	02830034 	movhi	r10,3072
 c0008e8:	529e0004 	addi	r10,r10,30720
 c0008ec:	54000217 	ldw	r16,8(r10)
 c0008f0:	8280a026 	beq	r16,r10,c000b74 <_malloc_r+0x38c>
 c0008f4:	80800117 	ldw	r2,4(r16)
 c0008f8:	00ffff04 	movi	r3,-4
 c0008fc:	10ca703a 	and	r5,r2,r3
 c000900:	2c4dc83a 	sub	r6,r5,r17
 c000904:	008003c4 	movi	r2,15
 c000908:	11808316 	blt	r2,r6,c000b18 <_malloc_r+0x330>
 c00090c:	52800315 	stw	r10,12(r10)
 c000910:	52800215 	stw	r10,8(r10)
 c000914:	30002916 	blt	r6,zero,c0009bc <_malloc_r+0x1d4>
 c000918:	8147883a 	add	r3,r16,r5
 c00091c:	18800117 	ldw	r2,4(r3)
 c000920:	9009883a 	mov	r4,r18
 c000924:	10800054 	ori	r2,r2,1
 c000928:	18800115 	stw	r2,4(r3)
 c00092c:	c0032540 	call	c003254 <__malloc_unlock>
 c000930:	80c00204 	addi	r3,r16,8
 c000934:	003fc006 	br	c000838 <_malloc_r+0x50>
 c000938:	02c30034 	movhi	r11,3072
 c00093c:	5addfe04 	addi	r11,r11,30712
 c000940:	8ac5883a 	add	r2,r17,r11
 c000944:	14000317 	ldw	r16,12(r2)
 c000948:	580f883a 	mov	r7,r11
 c00094c:	8806d0fa 	srli	r3,r17,3
 c000950:	14006c26 	beq	r2,r16,c000b04 <_malloc_r+0x31c>
 c000954:	80c00117 	ldw	r3,4(r16)
 c000958:	00bfff04 	movi	r2,-4
 c00095c:	81800317 	ldw	r6,12(r16)
 c000960:	1886703a 	and	r3,r3,r2
 c000964:	80c7883a 	add	r3,r16,r3
 c000968:	18800117 	ldw	r2,4(r3)
 c00096c:	81400217 	ldw	r5,8(r16)
 c000970:	9009883a 	mov	r4,r18
 c000974:	10800054 	ori	r2,r2,1
 c000978:	18800115 	stw	r2,4(r3)
 c00097c:	31400215 	stw	r5,8(r6)
 c000980:	29800315 	stw	r6,12(r5)
 c000984:	c0032540 	call	c003254 <__malloc_unlock>
 c000988:	80c00204 	addi	r3,r16,8
 c00098c:	003faa06 	br	c000838 <_malloc_r+0x50>
 c000990:	00800104 	movi	r2,4
 c000994:	10c0052e 	bgeu	r2,r3,c0009ac <_malloc_r+0x1c4>
 c000998:	00800504 	movi	r2,20
 c00099c:	10c07836 	bltu	r2,r3,c000b80 <_malloc_r+0x398>
 c0009a0:	198016c4 	addi	r6,r3,91
 c0009a4:	300490fa 	slli	r2,r6,3
 c0009a8:	003fbc06 	br	c00089c <_malloc_r+0xb4>
 c0009ac:	8804d1ba 	srli	r2,r17,6
 c0009b0:	11800e04 	addi	r6,r2,56
 c0009b4:	300490fa 	slli	r2,r6,3
 c0009b8:	003fb806 	br	c00089c <_malloc_r+0xb4>
 c0009bc:	00807fc4 	movi	r2,511
 c0009c0:	1140bb36 	bltu	r2,r5,c000cb0 <_malloc_r+0x4c8>
 c0009c4:	2806d0fa 	srli	r3,r5,3
 c0009c8:	573ffe04 	addi	fp,r10,-8
 c0009cc:	00800044 	movi	r2,1
 c0009d0:	180890fa 	slli	r4,r3,3
 c0009d4:	1807d0ba 	srai	r3,r3,2
 c0009d8:	e1c00117 	ldw	r7,4(fp)
 c0009dc:	5909883a 	add	r4,r11,r4
 c0009e0:	21400217 	ldw	r5,8(r4)
 c0009e4:	10c4983a 	sll	r2,r2,r3
 c0009e8:	81000315 	stw	r4,12(r16)
 c0009ec:	81400215 	stw	r5,8(r16)
 c0009f0:	388eb03a 	or	r7,r7,r2
 c0009f4:	2c000315 	stw	r16,12(r5)
 c0009f8:	24000215 	stw	r16,8(r4)
 c0009fc:	e1c00115 	stw	r7,4(fp)
 c000a00:	4807883a 	mov	r3,r9
 c000a04:	4800cd16 	blt	r9,zero,c000d3c <_malloc_r+0x554>
 c000a08:	1807d0ba 	srai	r3,r3,2
 c000a0c:	00800044 	movi	r2,1
 c000a10:	10c8983a 	sll	r4,r2,r3
 c000a14:	39004436 	bltu	r7,r4,c000b28 <_malloc_r+0x340>
 c000a18:	21c4703a 	and	r2,r4,r7
 c000a1c:	10000a1e 	bne	r2,zero,c000a48 <_malloc_r+0x260>
 c000a20:	2109883a 	add	r4,r4,r4
 c000a24:	00bfff04 	movi	r2,-4
 c000a28:	4884703a 	and	r2,r9,r2
 c000a2c:	3906703a 	and	r3,r7,r4
 c000a30:	12400104 	addi	r9,r2,4
 c000a34:	1800041e 	bne	r3,zero,c000a48 <_malloc_r+0x260>
 c000a38:	2109883a 	add	r4,r4,r4
 c000a3c:	3904703a 	and	r2,r7,r4
 c000a40:	4a400104 	addi	r9,r9,4
 c000a44:	103ffc26 	beq	r2,zero,c000a38 <_malloc_r+0x250>
 c000a48:	480490fa 	slli	r2,r9,3
 c000a4c:	4819883a 	mov	r12,r9
 c000a50:	023fff04 	movi	r8,-4
 c000a54:	589b883a 	add	r13,r11,r2
 c000a58:	6807883a 	mov	r3,r13
 c000a5c:	014003c4 	movi	r5,15
 c000a60:	1c000317 	ldw	r16,12(r3)
 c000a64:	1c00041e 	bne	r3,r16,c000a78 <_malloc_r+0x290>
 c000a68:	0000a706 	br	c000d08 <_malloc_r+0x520>
 c000a6c:	3000ab0e 	bge	r6,zero,c000d1c <_malloc_r+0x534>
 c000a70:	84000317 	ldw	r16,12(r16)
 c000a74:	1c00a426 	beq	r3,r16,c000d08 <_malloc_r+0x520>
 c000a78:	80800117 	ldw	r2,4(r16)
 c000a7c:	1204703a 	and	r2,r2,r8
 c000a80:	144dc83a 	sub	r6,r2,r17
 c000a84:	29bff90e 	bge	r5,r6,c000a6c <_malloc_r+0x284>
 c000a88:	81000317 	ldw	r4,12(r16)
 c000a8c:	80c00217 	ldw	r3,8(r16)
 c000a90:	89400054 	ori	r5,r17,1
 c000a94:	8445883a 	add	r2,r16,r17
 c000a98:	20c00215 	stw	r3,8(r4)
 c000a9c:	19000315 	stw	r4,12(r3)
 c000aa0:	81400115 	stw	r5,4(r16)
 c000aa4:	1187883a 	add	r3,r2,r6
 c000aa8:	31000054 	ori	r4,r6,1
 c000aac:	50800315 	stw	r2,12(r10)
 c000ab0:	50800215 	stw	r2,8(r10)
 c000ab4:	19800015 	stw	r6,0(r3)
 c000ab8:	11000115 	stw	r4,4(r2)
 c000abc:	12800215 	stw	r10,8(r2)
 c000ac0:	12800315 	stw	r10,12(r2)
 c000ac4:	9009883a 	mov	r4,r18
 c000ac8:	c0032540 	call	c003254 <__malloc_unlock>
 c000acc:	80c00204 	addi	r3,r16,8
 c000ad0:	003f5906 	br	c000838 <_malloc_r+0x50>
 c000ad4:	8109883a 	add	r4,r16,r4
 c000ad8:	20800117 	ldw	r2,4(r4)
 c000adc:	80c00217 	ldw	r3,8(r16)
 c000ae0:	81400317 	ldw	r5,12(r16)
 c000ae4:	10800054 	ori	r2,r2,1
 c000ae8:	20800115 	stw	r2,4(r4)
 c000aec:	28c00215 	stw	r3,8(r5)
 c000af0:	19400315 	stw	r5,12(r3)
 c000af4:	9009883a 	mov	r4,r18
 c000af8:	c0032540 	call	c003254 <__malloc_unlock>
 c000afc:	80c00204 	addi	r3,r16,8
 c000b00:	003f4d06 	br	c000838 <_malloc_r+0x50>
 c000b04:	80800204 	addi	r2,r16,8
 c000b08:	14000317 	ldw	r16,12(r2)
 c000b0c:	143f911e 	bne	r2,r16,c000954 <_malloc_r+0x16c>
 c000b10:	1a400084 	addi	r9,r3,2
 c000b14:	003f7306 	br	c0008e4 <_malloc_r+0xfc>
 c000b18:	88c00054 	ori	r3,r17,1
 c000b1c:	8445883a 	add	r2,r16,r17
 c000b20:	80c00115 	stw	r3,4(r16)
 c000b24:	003fdf06 	br	c000aa4 <_malloc_r+0x2bc>
 c000b28:	e4000217 	ldw	r16,8(fp)
 c000b2c:	00bfff04 	movi	r2,-4
 c000b30:	80c00117 	ldw	r3,4(r16)
 c000b34:	802d883a 	mov	r22,r16
 c000b38:	18aa703a 	and	r21,r3,r2
 c000b3c:	ac401636 	bltu	r21,r17,c000b98 <_malloc_r+0x3b0>
 c000b40:	ac49c83a 	sub	r4,r21,r17
 c000b44:	008003c4 	movi	r2,15
 c000b48:	1100130e 	bge	r2,r4,c000b98 <_malloc_r+0x3b0>
 c000b4c:	88800054 	ori	r2,r17,1
 c000b50:	8447883a 	add	r3,r16,r17
 c000b54:	80800115 	stw	r2,4(r16)
 c000b58:	20800054 	ori	r2,r4,1
 c000b5c:	18800115 	stw	r2,4(r3)
 c000b60:	e0c00215 	stw	r3,8(fp)
 c000b64:	9009883a 	mov	r4,r18
 c000b68:	c0032540 	call	c003254 <__malloc_unlock>
 c000b6c:	80c00204 	addi	r3,r16,8
 c000b70:	003f3106 	br	c000838 <_malloc_r+0x50>
 c000b74:	39c00117 	ldw	r7,4(r7)
 c000b78:	573ffe04 	addi	fp,r10,-8
 c000b7c:	003fa006 	br	c000a00 <_malloc_r+0x218>
 c000b80:	00801504 	movi	r2,84
 c000b84:	10c06736 	bltu	r2,r3,c000d24 <_malloc_r+0x53c>
 c000b88:	8804d33a 	srli	r2,r17,12
 c000b8c:	11801b84 	addi	r6,r2,110
 c000b90:	300490fa 	slli	r2,r6,3
 c000b94:	003f4106 	br	c00089c <_malloc_r+0xb4>
 c000b98:	d0a70717 	ldw	r2,-25572(gp)
 c000b9c:	d0e00317 	ldw	r3,-32756(gp)
 c000ba0:	053fffc4 	movi	r20,-1
 c000ba4:	10800404 	addi	r2,r2,16
 c000ba8:	88a7883a 	add	r19,r17,r2
 c000bac:	1d000326 	beq	r3,r20,c000bbc <_malloc_r+0x3d4>
 c000bb0:	98c3ffc4 	addi	r3,r19,4095
 c000bb4:	00bc0004 	movi	r2,-4096
 c000bb8:	18a6703a 	and	r19,r3,r2
 c000bbc:	9009883a 	mov	r4,r18
 c000bc0:	980b883a 	mov	r5,r19
 c000bc4:	c0017800 	call	c001780 <_sbrk_r>
 c000bc8:	1009883a 	mov	r4,r2
 c000bcc:	15000426 	beq	r2,r20,c000be0 <_malloc_r+0x3f8>
 c000bd0:	854b883a 	add	r5,r16,r21
 c000bd4:	1029883a 	mov	r20,r2
 c000bd8:	11405a2e 	bgeu	r2,r5,c000d44 <_malloc_r+0x55c>
 c000bdc:	87000c26 	beq	r16,fp,c000c10 <_malloc_r+0x428>
 c000be0:	e4000217 	ldw	r16,8(fp)
 c000be4:	80c00117 	ldw	r3,4(r16)
 c000be8:	00bfff04 	movi	r2,-4
 c000bec:	1884703a 	and	r2,r3,r2
 c000bf0:	14400336 	bltu	r2,r17,c000c00 <_malloc_r+0x418>
 c000bf4:	1449c83a 	sub	r4,r2,r17
 c000bf8:	008003c4 	movi	r2,15
 c000bfc:	113fd316 	blt	r2,r4,c000b4c <_malloc_r+0x364>
 c000c00:	9009883a 	mov	r4,r18
 c000c04:	c0032540 	call	c003254 <__malloc_unlock>
 c000c08:	0007883a 	mov	r3,zero
 c000c0c:	003f0a06 	br	c000838 <_malloc_r+0x50>
 c000c10:	05c30074 	movhi	r23,3073
 c000c14:	bdeaf604 	addi	r23,r23,-21544
 c000c18:	b8800017 	ldw	r2,0(r23)
 c000c1c:	988d883a 	add	r6,r19,r2
 c000c20:	b9800015 	stw	r6,0(r23)
 c000c24:	d0e00317 	ldw	r3,-32756(gp)
 c000c28:	00bfffc4 	movi	r2,-1
 c000c2c:	18808e26 	beq	r3,r2,c000e68 <_malloc_r+0x680>
 c000c30:	2145c83a 	sub	r2,r4,r5
 c000c34:	3085883a 	add	r2,r6,r2
 c000c38:	b8800015 	stw	r2,0(r23)
 c000c3c:	20c001cc 	andi	r3,r4,7
 c000c40:	18005f1e 	bne	r3,zero,c000dc0 <_malloc_r+0x5d8>
 c000c44:	000b883a 	mov	r5,zero
 c000c48:	a4c5883a 	add	r2,r20,r19
 c000c4c:	1083ffcc 	andi	r2,r2,4095
 c000c50:	00c40004 	movi	r3,4096
 c000c54:	1887c83a 	sub	r3,r3,r2
 c000c58:	28e7883a 	add	r19,r5,r3
 c000c5c:	9009883a 	mov	r4,r18
 c000c60:	980b883a 	mov	r5,r19
 c000c64:	c0017800 	call	c001780 <_sbrk_r>
 c000c68:	1007883a 	mov	r3,r2
 c000c6c:	00bfffc4 	movi	r2,-1
 c000c70:	18807a26 	beq	r3,r2,c000e5c <_malloc_r+0x674>
 c000c74:	1d05c83a 	sub	r2,r3,r20
 c000c78:	9885883a 	add	r2,r19,r2
 c000c7c:	10c00054 	ori	r3,r2,1
 c000c80:	b8800017 	ldw	r2,0(r23)
 c000c84:	a021883a 	mov	r16,r20
 c000c88:	a0c00115 	stw	r3,4(r20)
 c000c8c:	9885883a 	add	r2,r19,r2
 c000c90:	b8800015 	stw	r2,0(r23)
 c000c94:	e5000215 	stw	r20,8(fp)
 c000c98:	b7003626 	beq	r22,fp,c000d74 <_malloc_r+0x58c>
 c000c9c:	018003c4 	movi	r6,15
 c000ca0:	35404b36 	bltu	r6,r21,c000dd0 <_malloc_r+0x5e8>
 c000ca4:	00800044 	movi	r2,1
 c000ca8:	a0800115 	stw	r2,4(r20)
 c000cac:	003fcd06 	br	c000be4 <_malloc_r+0x3fc>
 c000cb0:	2808d27a 	srli	r4,r5,9
 c000cb4:	2000371e 	bne	r4,zero,c000d94 <_malloc_r+0x5ac>
 c000cb8:	2808d0fa 	srli	r4,r5,3
 c000cbc:	200690fa 	slli	r3,r4,3
 c000cc0:	1ad1883a 	add	r8,r3,r11
 c000cc4:	41800217 	ldw	r6,8(r8)
 c000cc8:	41805b26 	beq	r8,r6,c000e38 <_malloc_r+0x650>
 c000ccc:	30800117 	ldw	r2,4(r6)
 c000cd0:	00ffff04 	movi	r3,-4
 c000cd4:	10c4703a 	and	r2,r2,r3
 c000cd8:	2880022e 	bgeu	r5,r2,c000ce4 <_malloc_r+0x4fc>
 c000cdc:	31800217 	ldw	r6,8(r6)
 c000ce0:	41bffa1e 	bne	r8,r6,c000ccc <_malloc_r+0x4e4>
 c000ce4:	32000317 	ldw	r8,12(r6)
 c000ce8:	39c00117 	ldw	r7,4(r7)
 c000cec:	82000315 	stw	r8,12(r16)
 c000cf0:	81800215 	stw	r6,8(r16)
 c000cf4:	07030034 	movhi	fp,3072
 c000cf8:	e71dfe04 	addi	fp,fp,30712
 c000cfc:	34000315 	stw	r16,12(r6)
 c000d00:	44000215 	stw	r16,8(r8)
 c000d04:	003f3e06 	br	c000a00 <_malloc_r+0x218>
 c000d08:	63000044 	addi	r12,r12,1
 c000d0c:	608000cc 	andi	r2,r12,3
 c000d10:	10005d26 	beq	r2,zero,c000e88 <_malloc_r+0x6a0>
 c000d14:	18c00204 	addi	r3,r3,8
 c000d18:	003f5106 	br	c000a60 <_malloc_r+0x278>
 c000d1c:	8089883a 	add	r4,r16,r2
 c000d20:	003f6d06 	br	c000ad8 <_malloc_r+0x2f0>
 c000d24:	00805504 	movi	r2,340
 c000d28:	10c02036 	bltu	r2,r3,c000dac <_malloc_r+0x5c4>
 c000d2c:	8804d3fa 	srli	r2,r17,15
 c000d30:	11801dc4 	addi	r6,r2,119
 c000d34:	300490fa 	slli	r2,r6,3
 c000d38:	003ed806 	br	c00089c <_malloc_r+0xb4>
 c000d3c:	48c000c4 	addi	r3,r9,3
 c000d40:	003f3106 	br	c000a08 <_malloc_r+0x220>
 c000d44:	05c30074 	movhi	r23,3073
 c000d48:	bdeaf604 	addi	r23,r23,-21544
 c000d4c:	b8800017 	ldw	r2,0(r23)
 c000d50:	988d883a 	add	r6,r19,r2
 c000d54:	b9800015 	stw	r6,0(r23)
 c000d58:	293fb21e 	bne	r5,r4,c000c24 <_malloc_r+0x43c>
 c000d5c:	2083ffcc 	andi	r2,r4,4095
 c000d60:	103fb01e 	bne	r2,zero,c000c24 <_malloc_r+0x43c>
 c000d64:	e4000217 	ldw	r16,8(fp)
 c000d68:	9d45883a 	add	r2,r19,r21
 c000d6c:	10800054 	ori	r2,r2,1
 c000d70:	80800115 	stw	r2,4(r16)
 c000d74:	b8c00017 	ldw	r3,0(r23)
 c000d78:	d0a70817 	ldw	r2,-25568(gp)
 c000d7c:	10c0012e 	bgeu	r2,r3,c000d84 <_malloc_r+0x59c>
 c000d80:	d0e70815 	stw	r3,-25568(gp)
 c000d84:	d0a70917 	ldw	r2,-25564(gp)
 c000d88:	10ff962e 	bgeu	r2,r3,c000be4 <_malloc_r+0x3fc>
 c000d8c:	d0e70915 	stw	r3,-25564(gp)
 c000d90:	003f9406 	br	c000be4 <_malloc_r+0x3fc>
 c000d94:	00800104 	movi	r2,4
 c000d98:	11001e36 	bltu	r2,r4,c000e14 <_malloc_r+0x62c>
 c000d9c:	2804d1ba 	srli	r2,r5,6
 c000da0:	11000e04 	addi	r4,r2,56
 c000da4:	200690fa 	slli	r3,r4,3
 c000da8:	003fc506 	br	c000cc0 <_malloc_r+0x4d8>
 c000dac:	00815504 	movi	r2,1364
 c000db0:	10c01d2e 	bgeu	r2,r3,c000e28 <_malloc_r+0x640>
 c000db4:	01801f84 	movi	r6,126
 c000db8:	0080fc04 	movi	r2,1008
 c000dbc:	003eb706 	br	c00089c <_malloc_r+0xb4>
 c000dc0:	00800204 	movi	r2,8
 c000dc4:	10cbc83a 	sub	r5,r2,r3
 c000dc8:	2169883a 	add	r20,r4,r5
 c000dcc:	003f9e06 	br	c000c48 <_malloc_r+0x460>
 c000dd0:	00bffe04 	movi	r2,-8
 c000dd4:	a93ffd04 	addi	r4,r21,-12
 c000dd8:	2088703a 	and	r4,r4,r2
 c000ddc:	b10b883a 	add	r5,r22,r4
 c000de0:	00c00144 	movi	r3,5
 c000de4:	28c00215 	stw	r3,8(r5)
 c000de8:	28c00115 	stw	r3,4(r5)
 c000dec:	b0800117 	ldw	r2,4(r22)
 c000df0:	1080004c 	andi	r2,r2,1
 c000df4:	2084b03a 	or	r2,r4,r2
 c000df8:	b0800115 	stw	r2,4(r22)
 c000dfc:	313fdd2e 	bgeu	r6,r4,c000d74 <_malloc_r+0x58c>
 c000e00:	b1400204 	addi	r5,r22,8
 c000e04:	9009883a 	mov	r4,r18
 c000e08:	c001f7c0 	call	c001f7c <_free_r>
 c000e0c:	e4000217 	ldw	r16,8(fp)
 c000e10:	003fd806 	br	c000d74 <_malloc_r+0x58c>
 c000e14:	00800504 	movi	r2,20
 c000e18:	11001536 	bltu	r2,r4,c000e70 <_malloc_r+0x688>
 c000e1c:	210016c4 	addi	r4,r4,91
 c000e20:	200690fa 	slli	r3,r4,3
 c000e24:	003fa606 	br	c000cc0 <_malloc_r+0x4d8>
 c000e28:	8804d4ba 	srli	r2,r17,18
 c000e2c:	11801f04 	addi	r6,r2,124
 c000e30:	300490fa 	slli	r2,r6,3
 c000e34:	003e9906 	br	c00089c <_malloc_r+0xb4>
 c000e38:	2009d0ba 	srai	r4,r4,2
 c000e3c:	01430034 	movhi	r5,3072
 c000e40:	295dfe04 	addi	r5,r5,30712
 c000e44:	00c00044 	movi	r3,1
 c000e48:	28800117 	ldw	r2,4(r5)
 c000e4c:	1906983a 	sll	r3,r3,r4
 c000e50:	10c4b03a 	or	r2,r2,r3
 c000e54:	28800115 	stw	r2,4(r5)
 c000e58:	003fa306 	br	c000ce8 <_malloc_r+0x500>
 c000e5c:	0027883a 	mov	r19,zero
 c000e60:	00c00044 	movi	r3,1
 c000e64:	003f8606 	br	c000c80 <_malloc_r+0x498>
 c000e68:	d1200315 	stw	r4,-32756(gp)
 c000e6c:	003f7306 	br	c000c3c <_malloc_r+0x454>
 c000e70:	00801504 	movi	r2,84
 c000e74:	11001936 	bltu	r2,r4,c000edc <_malloc_r+0x6f4>
 c000e78:	2804d33a 	srli	r2,r5,12
 c000e7c:	11001b84 	addi	r4,r2,110
 c000e80:	200690fa 	slli	r3,r4,3
 c000e84:	003f8e06 	br	c000cc0 <_malloc_r+0x4d8>
 c000e88:	480b883a 	mov	r5,r9
 c000e8c:	6807883a 	mov	r3,r13
 c000e90:	288000cc 	andi	r2,r5,3
 c000e94:	18fffe04 	addi	r3,r3,-8
 c000e98:	297fffc4 	addi	r5,r5,-1
 c000e9c:	10001526 	beq	r2,zero,c000ef4 <_malloc_r+0x70c>
 c000ea0:	18800217 	ldw	r2,8(r3)
 c000ea4:	10fffa26 	beq	r2,r3,c000e90 <_malloc_r+0x6a8>
 c000ea8:	2109883a 	add	r4,r4,r4
 c000eac:	393f1e36 	bltu	r7,r4,c000b28 <_malloc_r+0x340>
 c000eb0:	203f1d26 	beq	r4,zero,c000b28 <_malloc_r+0x340>
 c000eb4:	21c4703a 	and	r2,r4,r7
 c000eb8:	10000226 	beq	r2,zero,c000ec4 <_malloc_r+0x6dc>
 c000ebc:	6013883a 	mov	r9,r12
 c000ec0:	003ee106 	br	c000a48 <_malloc_r+0x260>
 c000ec4:	2109883a 	add	r4,r4,r4
 c000ec8:	3904703a 	and	r2,r7,r4
 c000ecc:	63000104 	addi	r12,r12,4
 c000ed0:	103ffc26 	beq	r2,zero,c000ec4 <_malloc_r+0x6dc>
 c000ed4:	6013883a 	mov	r9,r12
 c000ed8:	003edb06 	br	c000a48 <_malloc_r+0x260>
 c000edc:	00805504 	movi	r2,340
 c000ee0:	11000836 	bltu	r2,r4,c000f04 <_malloc_r+0x71c>
 c000ee4:	2804d3fa 	srli	r2,r5,15
 c000ee8:	11001dc4 	addi	r4,r2,119
 c000eec:	200690fa 	slli	r3,r4,3
 c000ef0:	003f7306 	br	c000cc0 <_malloc_r+0x4d8>
 c000ef4:	0104303a 	nor	r2,zero,r4
 c000ef8:	388e703a 	and	r7,r7,r2
 c000efc:	e1c00115 	stw	r7,4(fp)
 c000f00:	003fe906 	br	c000ea8 <_malloc_r+0x6c0>
 c000f04:	00815504 	movi	r2,1364
 c000f08:	1100032e 	bgeu	r2,r4,c000f18 <_malloc_r+0x730>
 c000f0c:	01001f84 	movi	r4,126
 c000f10:	00c0fc04 	movi	r3,1008
 c000f14:	003f6a06 	br	c000cc0 <_malloc_r+0x4d8>
 c000f18:	2804d4ba 	srli	r2,r5,18
 c000f1c:	11001f04 	addi	r4,r2,124
 c000f20:	200690fa 	slli	r3,r4,3
 c000f24:	003f6606 	br	c000cc0 <_malloc_r+0x4d8>

0c000f28 <memchr>:
 c000f28:	008000c4 	movi	r2,3
 c000f2c:	29403fcc 	andi	r5,r5,255
 c000f30:	2007883a 	mov	r3,r4
 c000f34:	1180022e 	bgeu	r2,r6,c000f40 <memchr+0x18>
 c000f38:	2084703a 	and	r2,r4,r2
 c000f3c:	10000b26 	beq	r2,zero,c000f6c <memchr+0x44>
 c000f40:	313fffc4 	addi	r4,r6,-1
 c000f44:	3000051e 	bne	r6,zero,c000f5c <memchr+0x34>
 c000f48:	00002c06 	br	c000ffc <memchr+0xd4>
 c000f4c:	213fffc4 	addi	r4,r4,-1
 c000f50:	00bfffc4 	movi	r2,-1
 c000f54:	18c00044 	addi	r3,r3,1
 c000f58:	20802826 	beq	r4,r2,c000ffc <memchr+0xd4>
 c000f5c:	18800003 	ldbu	r2,0(r3)
 c000f60:	28bffa1e 	bne	r5,r2,c000f4c <memchr+0x24>
 c000f64:	1805883a 	mov	r2,r3
 c000f68:	f800283a 	ret
 c000f6c:	0011883a 	mov	r8,zero
 c000f70:	0007883a 	mov	r3,zero
 c000f74:	01c00104 	movi	r7,4
 c000f78:	4004923a 	slli	r2,r8,8
 c000f7c:	18c00044 	addi	r3,r3,1
 c000f80:	1151883a 	add	r8,r2,r5
 c000f84:	19fffc1e 	bne	r3,r7,c000f78 <memchr+0x50>
 c000f88:	02bfbff4 	movhi	r10,65279
 c000f8c:	52bfbfc4 	addi	r10,r10,-257
 c000f90:	02602074 	movhi	r9,32897
 c000f94:	4a602004 	addi	r9,r9,-32640
 c000f98:	02c000c4 	movi	r11,3
 c000f9c:	20800017 	ldw	r2,0(r4)
 c000fa0:	31bfff04 	addi	r6,r6,-4
 c000fa4:	200f883a 	mov	r7,r4
 c000fa8:	1204f03a 	xor	r2,r2,r8
 c000fac:	1287883a 	add	r3,r2,r10
 c000fb0:	1a46703a 	and	r3,r3,r9
 c000fb4:	0084303a 	nor	r2,zero,r2
 c000fb8:	10c4703a 	and	r2,r2,r3
 c000fbc:	10000b26 	beq	r2,zero,c000fec <memchr+0xc4>
 c000fc0:	20800003 	ldbu	r2,0(r4)
 c000fc4:	28800f26 	beq	r5,r2,c001004 <memchr+0xdc>
 c000fc8:	20800043 	ldbu	r2,1(r4)
 c000fcc:	21c00044 	addi	r7,r4,1
 c000fd0:	28800c26 	beq	r5,r2,c001004 <memchr+0xdc>
 c000fd4:	20800083 	ldbu	r2,2(r4)
 c000fd8:	21c00084 	addi	r7,r4,2
 c000fdc:	28800926 	beq	r5,r2,c001004 <memchr+0xdc>
 c000fe0:	208000c3 	ldbu	r2,3(r4)
 c000fe4:	21c000c4 	addi	r7,r4,3
 c000fe8:	28800626 	beq	r5,r2,c001004 <memchr+0xdc>
 c000fec:	21000104 	addi	r4,r4,4
 c000ff0:	59bfea36 	bltu	r11,r6,c000f9c <memchr+0x74>
 c000ff4:	2007883a 	mov	r3,r4
 c000ff8:	003fd106 	br	c000f40 <memchr+0x18>
 c000ffc:	0005883a 	mov	r2,zero
 c001000:	f800283a 	ret
 c001004:	3805883a 	mov	r2,r7
 c001008:	f800283a 	ret

0c00100c <memcpy>:
 c00100c:	01c003c4 	movi	r7,15
 c001010:	2007883a 	mov	r3,r4
 c001014:	3980032e 	bgeu	r7,r6,c001024 <memcpy+0x18>
 c001018:	2904b03a 	or	r2,r5,r4
 c00101c:	108000cc 	andi	r2,r2,3
 c001020:	10000926 	beq	r2,zero,c001048 <memcpy+0x3c>
 c001024:	30000626 	beq	r6,zero,c001040 <memcpy+0x34>
 c001028:	30cd883a 	add	r6,r6,r3
 c00102c:	28800003 	ldbu	r2,0(r5)
 c001030:	29400044 	addi	r5,r5,1
 c001034:	18800005 	stb	r2,0(r3)
 c001038:	18c00044 	addi	r3,r3,1
 c00103c:	30fffb1e 	bne	r6,r3,c00102c <memcpy+0x20>
 c001040:	2005883a 	mov	r2,r4
 c001044:	f800283a 	ret
 c001048:	3811883a 	mov	r8,r7
 c00104c:	200f883a 	mov	r7,r4
 c001050:	28c00017 	ldw	r3,0(r5)
 c001054:	31bffc04 	addi	r6,r6,-16
 c001058:	38c00015 	stw	r3,0(r7)
 c00105c:	28800117 	ldw	r2,4(r5)
 c001060:	38800115 	stw	r2,4(r7)
 c001064:	28c00217 	ldw	r3,8(r5)
 c001068:	38c00215 	stw	r3,8(r7)
 c00106c:	28800317 	ldw	r2,12(r5)
 c001070:	29400404 	addi	r5,r5,16
 c001074:	38800315 	stw	r2,12(r7)
 c001078:	39c00404 	addi	r7,r7,16
 c00107c:	41bff436 	bltu	r8,r6,c001050 <memcpy+0x44>
 c001080:	008000c4 	movi	r2,3
 c001084:	1180072e 	bgeu	r2,r6,c0010a4 <memcpy+0x98>
 c001088:	1007883a 	mov	r3,r2
 c00108c:	28800017 	ldw	r2,0(r5)
 c001090:	31bfff04 	addi	r6,r6,-4
 c001094:	29400104 	addi	r5,r5,4
 c001098:	38800015 	stw	r2,0(r7)
 c00109c:	39c00104 	addi	r7,r7,4
 c0010a0:	19bffa36 	bltu	r3,r6,c00108c <memcpy+0x80>
 c0010a4:	3807883a 	mov	r3,r7
 c0010a8:	003fde06 	br	c001024 <memcpy+0x18>

0c0010ac <memmove>:
 c0010ac:	2807883a 	mov	r3,r5
 c0010b0:	2011883a 	mov	r8,r4
 c0010b4:	29000c2e 	bgeu	r5,r4,c0010e8 <memmove+0x3c>
 c0010b8:	298f883a 	add	r7,r5,r6
 c0010bc:	21c00a2e 	bgeu	r4,r7,c0010e8 <memmove+0x3c>
 c0010c0:	30000726 	beq	r6,zero,c0010e0 <memmove+0x34>
 c0010c4:	2187883a 	add	r3,r4,r6
 c0010c8:	198dc83a 	sub	r6,r3,r6
 c0010cc:	39ffffc4 	addi	r7,r7,-1
 c0010d0:	38800003 	ldbu	r2,0(r7)
 c0010d4:	18ffffc4 	addi	r3,r3,-1
 c0010d8:	18800005 	stb	r2,0(r3)
 c0010dc:	19bffb1e 	bne	r3,r6,c0010cc <memmove+0x20>
 c0010e0:	2005883a 	mov	r2,r4
 c0010e4:	f800283a 	ret
 c0010e8:	01c003c4 	movi	r7,15
 c0010ec:	39800a36 	bltu	r7,r6,c001118 <memmove+0x6c>
 c0010f0:	303ffb26 	beq	r6,zero,c0010e0 <memmove+0x34>
 c0010f4:	400f883a 	mov	r7,r8
 c0010f8:	320d883a 	add	r6,r6,r8
 c0010fc:	28800003 	ldbu	r2,0(r5)
 c001100:	29400044 	addi	r5,r5,1
 c001104:	38800005 	stb	r2,0(r7)
 c001108:	39c00044 	addi	r7,r7,1
 c00110c:	39bffb1e 	bne	r7,r6,c0010fc <memmove+0x50>
 c001110:	2005883a 	mov	r2,r4
 c001114:	f800283a 	ret
 c001118:	1904b03a 	or	r2,r3,r4
 c00111c:	108000cc 	andi	r2,r2,3
 c001120:	103ff31e 	bne	r2,zero,c0010f0 <memmove+0x44>
 c001124:	3811883a 	mov	r8,r7
 c001128:	180b883a 	mov	r5,r3
 c00112c:	200f883a 	mov	r7,r4
 c001130:	28c00017 	ldw	r3,0(r5)
 c001134:	31bffc04 	addi	r6,r6,-16
 c001138:	38c00015 	stw	r3,0(r7)
 c00113c:	28800117 	ldw	r2,4(r5)
 c001140:	38800115 	stw	r2,4(r7)
 c001144:	28c00217 	ldw	r3,8(r5)
 c001148:	38c00215 	stw	r3,8(r7)
 c00114c:	28800317 	ldw	r2,12(r5)
 c001150:	29400404 	addi	r5,r5,16
 c001154:	38800315 	stw	r2,12(r7)
 c001158:	39c00404 	addi	r7,r7,16
 c00115c:	41bff436 	bltu	r8,r6,c001130 <memmove+0x84>
 c001160:	008000c4 	movi	r2,3
 c001164:	1180072e 	bgeu	r2,r6,c001184 <memmove+0xd8>
 c001168:	1007883a 	mov	r3,r2
 c00116c:	28800017 	ldw	r2,0(r5)
 c001170:	31bfff04 	addi	r6,r6,-4
 c001174:	29400104 	addi	r5,r5,4
 c001178:	38800015 	stw	r2,0(r7)
 c00117c:	39c00104 	addi	r7,r7,4
 c001180:	19bffa36 	bltu	r3,r6,c00116c <memmove+0xc0>
 c001184:	3811883a 	mov	r8,r7
 c001188:	003fd906 	br	c0010f0 <memmove+0x44>

0c00118c <_realloc_r>:
 c00118c:	defff404 	addi	sp,sp,-48
 c001190:	dd800815 	stw	r22,32(sp)
 c001194:	dc800415 	stw	r18,16(sp)
 c001198:	dc400315 	stw	r17,12(sp)
 c00119c:	dfc00b15 	stw	ra,44(sp)
 c0011a0:	df000a15 	stw	fp,40(sp)
 c0011a4:	ddc00915 	stw	r23,36(sp)
 c0011a8:	dd400715 	stw	r21,28(sp)
 c0011ac:	dd000615 	stw	r20,24(sp)
 c0011b0:	dcc00515 	stw	r19,20(sp)
 c0011b4:	dc000215 	stw	r16,8(sp)
 c0011b8:	2825883a 	mov	r18,r5
 c0011bc:	3023883a 	mov	r17,r6
 c0011c0:	202d883a 	mov	r22,r4
 c0011c4:	2800c926 	beq	r5,zero,c0014ec <_realloc_r+0x360>
 c0011c8:	c0032340 	call	c003234 <__malloc_lock>
 c0011cc:	943ffe04 	addi	r16,r18,-8
 c0011d0:	88c002c4 	addi	r3,r17,11
 c0011d4:	00800584 	movi	r2,22
 c0011d8:	82000117 	ldw	r8,4(r16)
 c0011dc:	10c01b2e 	bgeu	r2,r3,c00124c <_realloc_r+0xc0>
 c0011e0:	00bffe04 	movi	r2,-8
 c0011e4:	188e703a 	and	r7,r3,r2
 c0011e8:	3839883a 	mov	fp,r7
 c0011ec:	38001a16 	blt	r7,zero,c001258 <_realloc_r+0xcc>
 c0011f0:	e4401936 	bltu	fp,r17,c001258 <_realloc_r+0xcc>
 c0011f4:	013fff04 	movi	r4,-4
 c0011f8:	4126703a 	and	r19,r8,r4
 c0011fc:	99c02616 	blt	r19,r7,c001298 <_realloc_r+0x10c>
 c001200:	802b883a 	mov	r21,r16
 c001204:	9829883a 	mov	r20,r19
 c001208:	84000204 	addi	r16,r16,8
 c00120c:	a80f883a 	mov	r7,r21
 c001210:	a70dc83a 	sub	r6,r20,fp
 c001214:	008003c4 	movi	r2,15
 c001218:	1180c136 	bltu	r2,r6,c001520 <_realloc_r+0x394>
 c00121c:	38800117 	ldw	r2,4(r7)
 c001220:	a549883a 	add	r4,r20,r21
 c001224:	1080004c 	andi	r2,r2,1
 c001228:	a084b03a 	or	r2,r20,r2
 c00122c:	38800115 	stw	r2,4(r7)
 c001230:	20c00117 	ldw	r3,4(r4)
 c001234:	18c00054 	ori	r3,r3,1
 c001238:	20c00115 	stw	r3,4(r4)
 c00123c:	b009883a 	mov	r4,r22
 c001240:	c0032540 	call	c003254 <__malloc_unlock>
 c001244:	8023883a 	mov	r17,r16
 c001248:	00000606 	br	c001264 <_realloc_r+0xd8>
 c00124c:	01c00404 	movi	r7,16
 c001250:	3839883a 	mov	fp,r7
 c001254:	e47fe72e 	bgeu	fp,r17,c0011f4 <_realloc_r+0x68>
 c001258:	00800304 	movi	r2,12
 c00125c:	0023883a 	mov	r17,zero
 c001260:	b0800015 	stw	r2,0(r22)
 c001264:	8805883a 	mov	r2,r17
 c001268:	dfc00b17 	ldw	ra,44(sp)
 c00126c:	df000a17 	ldw	fp,40(sp)
 c001270:	ddc00917 	ldw	r23,36(sp)
 c001274:	dd800817 	ldw	r22,32(sp)
 c001278:	dd400717 	ldw	r21,28(sp)
 c00127c:	dd000617 	ldw	r20,24(sp)
 c001280:	dcc00517 	ldw	r19,20(sp)
 c001284:	dc800417 	ldw	r18,16(sp)
 c001288:	dc400317 	ldw	r17,12(sp)
 c00128c:	dc000217 	ldw	r16,8(sp)
 c001290:	dec00c04 	addi	sp,sp,48
 c001294:	f800283a 	ret
 c001298:	00830034 	movhi	r2,3072
 c00129c:	109dfe04 	addi	r2,r2,30712
 c0012a0:	12400217 	ldw	r9,8(r2)
 c0012a4:	84cd883a 	add	r6,r16,r19
 c0012a8:	802b883a 	mov	r21,r16
 c0012ac:	3240b926 	beq	r6,r9,c001594 <_realloc_r+0x408>
 c0012b0:	31400117 	ldw	r5,4(r6)
 c0012b4:	00bfff84 	movi	r2,-2
 c0012b8:	2884703a 	and	r2,r5,r2
 c0012bc:	1185883a 	add	r2,r2,r6
 c0012c0:	10c00117 	ldw	r3,4(r2)
 c0012c4:	18c0004c 	andi	r3,r3,1
 c0012c8:	1807003a 	cmpeq	r3,r3,zero
 c0012cc:	1800a326 	beq	r3,zero,c00155c <_realloc_r+0x3d0>
 c0012d0:	2908703a 	and	r4,r5,r4
 c0012d4:	9929883a 	add	r20,r19,r4
 c0012d8:	a1c0a30e 	bge	r20,r7,c001568 <_realloc_r+0x3dc>
 c0012dc:	4080004c 	andi	r2,r8,1
 c0012e0:	1000551e 	bne	r2,zero,c001438 <_realloc_r+0x2ac>
 c0012e4:	80800017 	ldw	r2,0(r16)
 c0012e8:	80afc83a 	sub	r23,r16,r2
 c0012ec:	b8c00117 	ldw	r3,4(r23)
 c0012f0:	00bfff04 	movi	r2,-4
 c0012f4:	1884703a 	and	r2,r3,r2
 c0012f8:	30002e26 	beq	r6,zero,c0013b4 <_realloc_r+0x228>
 c0012fc:	3240b926 	beq	r6,r9,c0015e4 <_realloc_r+0x458>
 c001300:	98a9883a 	add	r20,r19,r2
 c001304:	2509883a 	add	r4,r4,r20
 c001308:	d9000015 	stw	r4,0(sp)
 c00130c:	21c02a16 	blt	r4,r7,c0013b8 <_realloc_r+0x22c>
 c001310:	30800317 	ldw	r2,12(r6)
 c001314:	30c00217 	ldw	r3,8(r6)
 c001318:	01400904 	movi	r5,36
 c00131c:	99bfff04 	addi	r6,r19,-4
 c001320:	18800315 	stw	r2,12(r3)
 c001324:	10c00215 	stw	r3,8(r2)
 c001328:	b9000317 	ldw	r4,12(r23)
 c00132c:	b8800217 	ldw	r2,8(r23)
 c001330:	b82b883a 	mov	r21,r23
 c001334:	bc000204 	addi	r16,r23,8
 c001338:	20800215 	stw	r2,8(r4)
 c00133c:	11000315 	stw	r4,12(r2)
 c001340:	2980e436 	bltu	r5,r6,c0016d4 <_realloc_r+0x548>
 c001344:	008004c4 	movi	r2,19
 c001348:	9009883a 	mov	r4,r18
 c00134c:	8011883a 	mov	r8,r16
 c001350:	11800f2e 	bgeu	r2,r6,c001390 <_realloc_r+0x204>
 c001354:	90800017 	ldw	r2,0(r18)
 c001358:	ba000404 	addi	r8,r23,16
 c00135c:	91000204 	addi	r4,r18,8
 c001360:	b8800215 	stw	r2,8(r23)
 c001364:	90c00117 	ldw	r3,4(r18)
 c001368:	008006c4 	movi	r2,27
 c00136c:	b8c00315 	stw	r3,12(r23)
 c001370:	1180072e 	bgeu	r2,r6,c001390 <_realloc_r+0x204>
 c001374:	90c00217 	ldw	r3,8(r18)
 c001378:	ba000604 	addi	r8,r23,24
 c00137c:	91000404 	addi	r4,r18,16
 c001380:	b8c00415 	stw	r3,16(r23)
 c001384:	90800317 	ldw	r2,12(r18)
 c001388:	b8800515 	stw	r2,20(r23)
 c00138c:	3140e726 	beq	r6,r5,c00172c <_realloc_r+0x5a0>
 c001390:	20800017 	ldw	r2,0(r4)
 c001394:	dd000017 	ldw	r20,0(sp)
 c001398:	b80f883a 	mov	r7,r23
 c00139c:	40800015 	stw	r2,0(r8)
 c0013a0:	20c00117 	ldw	r3,4(r4)
 c0013a4:	40c00115 	stw	r3,4(r8)
 c0013a8:	20800217 	ldw	r2,8(r4)
 c0013ac:	40800215 	stw	r2,8(r8)
 c0013b0:	003f9706 	br	c001210 <_realloc_r+0x84>
 c0013b4:	98a9883a 	add	r20,r19,r2
 c0013b8:	a1c01f16 	blt	r20,r7,c001438 <_realloc_r+0x2ac>
 c0013bc:	b8c00317 	ldw	r3,12(r23)
 c0013c0:	b8800217 	ldw	r2,8(r23)
 c0013c4:	99bfff04 	addi	r6,r19,-4
 c0013c8:	01400904 	movi	r5,36
 c0013cc:	b82b883a 	mov	r21,r23
 c0013d0:	18800215 	stw	r2,8(r3)
 c0013d4:	10c00315 	stw	r3,12(r2)
 c0013d8:	bc000204 	addi	r16,r23,8
 c0013dc:	2980c336 	bltu	r5,r6,c0016ec <_realloc_r+0x560>
 c0013e0:	008004c4 	movi	r2,19
 c0013e4:	9009883a 	mov	r4,r18
 c0013e8:	8011883a 	mov	r8,r16
 c0013ec:	11800f2e 	bgeu	r2,r6,c00142c <_realloc_r+0x2a0>
 c0013f0:	90800017 	ldw	r2,0(r18)
 c0013f4:	ba000404 	addi	r8,r23,16
 c0013f8:	91000204 	addi	r4,r18,8
 c0013fc:	b8800215 	stw	r2,8(r23)
 c001400:	90c00117 	ldw	r3,4(r18)
 c001404:	008006c4 	movi	r2,27
 c001408:	b8c00315 	stw	r3,12(r23)
 c00140c:	1180072e 	bgeu	r2,r6,c00142c <_realloc_r+0x2a0>
 c001410:	90c00217 	ldw	r3,8(r18)
 c001414:	ba000604 	addi	r8,r23,24
 c001418:	91000404 	addi	r4,r18,16
 c00141c:	b8c00415 	stw	r3,16(r23)
 c001420:	90800317 	ldw	r2,12(r18)
 c001424:	b8800515 	stw	r2,20(r23)
 c001428:	3140c726 	beq	r6,r5,c001748 <_realloc_r+0x5bc>
 c00142c:	20800017 	ldw	r2,0(r4)
 c001430:	b80f883a 	mov	r7,r23
 c001434:	003fd906 	br	c00139c <_realloc_r+0x210>
 c001438:	880b883a 	mov	r5,r17
 c00143c:	b009883a 	mov	r4,r22
 c001440:	c0007e80 	call	c0007e8 <_malloc_r>
 c001444:	1023883a 	mov	r17,r2
 c001448:	10002526 	beq	r2,zero,c0014e0 <_realloc_r+0x354>
 c00144c:	80800117 	ldw	r2,4(r16)
 c001450:	00ffff84 	movi	r3,-2
 c001454:	893ffe04 	addi	r4,r17,-8
 c001458:	10c4703a 	and	r2,r2,r3
 c00145c:	8085883a 	add	r2,r16,r2
 c001460:	20809526 	beq	r4,r2,c0016b8 <_realloc_r+0x52c>
 c001464:	99bfff04 	addi	r6,r19,-4
 c001468:	01c00904 	movi	r7,36
 c00146c:	39804536 	bltu	r7,r6,c001584 <_realloc_r+0x3f8>
 c001470:	008004c4 	movi	r2,19
 c001474:	9009883a 	mov	r4,r18
 c001478:	880b883a 	mov	r5,r17
 c00147c:	11800f2e 	bgeu	r2,r6,c0014bc <_realloc_r+0x330>
 c001480:	90800017 	ldw	r2,0(r18)
 c001484:	89400204 	addi	r5,r17,8
 c001488:	91000204 	addi	r4,r18,8
 c00148c:	88800015 	stw	r2,0(r17)
 c001490:	90c00117 	ldw	r3,4(r18)
 c001494:	008006c4 	movi	r2,27
 c001498:	88c00115 	stw	r3,4(r17)
 c00149c:	1180072e 	bgeu	r2,r6,c0014bc <_realloc_r+0x330>
 c0014a0:	90c00217 	ldw	r3,8(r18)
 c0014a4:	89400404 	addi	r5,r17,16
 c0014a8:	91000404 	addi	r4,r18,16
 c0014ac:	88c00215 	stw	r3,8(r17)
 c0014b0:	90800317 	ldw	r2,12(r18)
 c0014b4:	88800315 	stw	r2,12(r17)
 c0014b8:	31c09126 	beq	r6,r7,c001700 <_realloc_r+0x574>
 c0014bc:	20800017 	ldw	r2,0(r4)
 c0014c0:	28800015 	stw	r2,0(r5)
 c0014c4:	20c00117 	ldw	r3,4(r4)
 c0014c8:	28c00115 	stw	r3,4(r5)
 c0014cc:	20800217 	ldw	r2,8(r4)
 c0014d0:	28800215 	stw	r2,8(r5)
 c0014d4:	900b883a 	mov	r5,r18
 c0014d8:	b009883a 	mov	r4,r22
 c0014dc:	c001f7c0 	call	c001f7c <_free_r>
 c0014e0:	b009883a 	mov	r4,r22
 c0014e4:	c0032540 	call	c003254 <__malloc_unlock>
 c0014e8:	003f5e06 	br	c001264 <_realloc_r+0xd8>
 c0014ec:	300b883a 	mov	r5,r6
 c0014f0:	dfc00b17 	ldw	ra,44(sp)
 c0014f4:	df000a17 	ldw	fp,40(sp)
 c0014f8:	ddc00917 	ldw	r23,36(sp)
 c0014fc:	dd800817 	ldw	r22,32(sp)
 c001500:	dd400717 	ldw	r21,28(sp)
 c001504:	dd000617 	ldw	r20,24(sp)
 c001508:	dcc00517 	ldw	r19,20(sp)
 c00150c:	dc800417 	ldw	r18,16(sp)
 c001510:	dc400317 	ldw	r17,12(sp)
 c001514:	dc000217 	ldw	r16,8(sp)
 c001518:	dec00c04 	addi	sp,sp,48
 c00151c:	c0007e81 	jmpi	c0007e8 <_malloc_r>
 c001520:	38800117 	ldw	r2,4(r7)
 c001524:	e54b883a 	add	r5,fp,r21
 c001528:	31000054 	ori	r4,r6,1
 c00152c:	1080004c 	andi	r2,r2,1
 c001530:	1704b03a 	or	r2,r2,fp
 c001534:	38800115 	stw	r2,4(r7)
 c001538:	29000115 	stw	r4,4(r5)
 c00153c:	2987883a 	add	r3,r5,r6
 c001540:	18800117 	ldw	r2,4(r3)
 c001544:	29400204 	addi	r5,r5,8
 c001548:	b009883a 	mov	r4,r22
 c00154c:	10800054 	ori	r2,r2,1
 c001550:	18800115 	stw	r2,4(r3)
 c001554:	c001f7c0 	call	c001f7c <_free_r>
 c001558:	003f3806 	br	c00123c <_realloc_r+0xb0>
 c00155c:	000d883a 	mov	r6,zero
 c001560:	0009883a 	mov	r4,zero
 c001564:	003f5d06 	br	c0012dc <_realloc_r+0x150>
 c001568:	30c00217 	ldw	r3,8(r6)
 c00156c:	30800317 	ldw	r2,12(r6)
 c001570:	800f883a 	mov	r7,r16
 c001574:	84000204 	addi	r16,r16,8
 c001578:	10c00215 	stw	r3,8(r2)
 c00157c:	18800315 	stw	r2,12(r3)
 c001580:	003f2306 	br	c001210 <_realloc_r+0x84>
 c001584:	8809883a 	mov	r4,r17
 c001588:	900b883a 	mov	r5,r18
 c00158c:	c0010ac0 	call	c0010ac <memmove>
 c001590:	003fd006 	br	c0014d4 <_realloc_r+0x348>
 c001594:	30800117 	ldw	r2,4(r6)
 c001598:	e0c00404 	addi	r3,fp,16
 c00159c:	1108703a 	and	r4,r2,r4
 c0015a0:	9905883a 	add	r2,r19,r4
 c0015a4:	10ff4d16 	blt	r2,r3,c0012dc <_realloc_r+0x150>
 c0015a8:	1705c83a 	sub	r2,r2,fp
 c0015ac:	870b883a 	add	r5,r16,fp
 c0015b0:	10800054 	ori	r2,r2,1
 c0015b4:	28800115 	stw	r2,4(r5)
 c0015b8:	80c00117 	ldw	r3,4(r16)
 c0015bc:	00830034 	movhi	r2,3072
 c0015c0:	109dfe04 	addi	r2,r2,30712
 c0015c4:	b009883a 	mov	r4,r22
 c0015c8:	18c0004c 	andi	r3,r3,1
 c0015cc:	e0c6b03a 	or	r3,fp,r3
 c0015d0:	11400215 	stw	r5,8(r2)
 c0015d4:	80c00115 	stw	r3,4(r16)
 c0015d8:	c0032540 	call	c003254 <__malloc_unlock>
 c0015dc:	84400204 	addi	r17,r16,8
 c0015e0:	003f2006 	br	c001264 <_realloc_r+0xd8>
 c0015e4:	98a9883a 	add	r20,r19,r2
 c0015e8:	2509883a 	add	r4,r4,r20
 c0015ec:	e0800404 	addi	r2,fp,16
 c0015f0:	d9000115 	stw	r4,4(sp)
 c0015f4:	20bf7016 	blt	r4,r2,c0013b8 <_realloc_r+0x22c>
 c0015f8:	b8c00317 	ldw	r3,12(r23)
 c0015fc:	b8800217 	ldw	r2,8(r23)
 c001600:	99bfff04 	addi	r6,r19,-4
 c001604:	01400904 	movi	r5,36
 c001608:	18800215 	stw	r2,8(r3)
 c00160c:	10c00315 	stw	r3,12(r2)
 c001610:	bc400204 	addi	r17,r23,8
 c001614:	29804136 	bltu	r5,r6,c00171c <_realloc_r+0x590>
 c001618:	008004c4 	movi	r2,19
 c00161c:	9009883a 	mov	r4,r18
 c001620:	880f883a 	mov	r7,r17
 c001624:	11800f2e 	bgeu	r2,r6,c001664 <_realloc_r+0x4d8>
 c001628:	90800017 	ldw	r2,0(r18)
 c00162c:	b9c00404 	addi	r7,r23,16
 c001630:	91000204 	addi	r4,r18,8
 c001634:	b8800215 	stw	r2,8(r23)
 c001638:	90c00117 	ldw	r3,4(r18)
 c00163c:	008006c4 	movi	r2,27
 c001640:	b8c00315 	stw	r3,12(r23)
 c001644:	1180072e 	bgeu	r2,r6,c001664 <_realloc_r+0x4d8>
 c001648:	90c00217 	ldw	r3,8(r18)
 c00164c:	b9c00604 	addi	r7,r23,24
 c001650:	91000404 	addi	r4,r18,16
 c001654:	b8c00415 	stw	r3,16(r23)
 c001658:	90800317 	ldw	r2,12(r18)
 c00165c:	b8800515 	stw	r2,20(r23)
 c001660:	31404026 	beq	r6,r5,c001764 <_realloc_r+0x5d8>
 c001664:	20800017 	ldw	r2,0(r4)
 c001668:	38800015 	stw	r2,0(r7)
 c00166c:	20c00117 	ldw	r3,4(r4)
 c001670:	38c00115 	stw	r3,4(r7)
 c001674:	20800217 	ldw	r2,8(r4)
 c001678:	38800215 	stw	r2,8(r7)
 c00167c:	d8c00117 	ldw	r3,4(sp)
 c001680:	bf0b883a 	add	r5,r23,fp
 c001684:	b009883a 	mov	r4,r22
 c001688:	1f05c83a 	sub	r2,r3,fp
 c00168c:	10800054 	ori	r2,r2,1
 c001690:	28800115 	stw	r2,4(r5)
 c001694:	b8c00117 	ldw	r3,4(r23)
 c001698:	00830034 	movhi	r2,3072
 c00169c:	109dfe04 	addi	r2,r2,30712
 c0016a0:	11400215 	stw	r5,8(r2)
 c0016a4:	18c0004c 	andi	r3,r3,1
 c0016a8:	e0c6b03a 	or	r3,fp,r3
 c0016ac:	b8c00115 	stw	r3,4(r23)
 c0016b0:	c0032540 	call	c003254 <__malloc_unlock>
 c0016b4:	003eeb06 	br	c001264 <_realloc_r+0xd8>
 c0016b8:	20800117 	ldw	r2,4(r4)
 c0016bc:	00ffff04 	movi	r3,-4
 c0016c0:	800f883a 	mov	r7,r16
 c0016c4:	10c4703a 	and	r2,r2,r3
 c0016c8:	98a9883a 	add	r20,r19,r2
 c0016cc:	84000204 	addi	r16,r16,8
 c0016d0:	003ecf06 	br	c001210 <_realloc_r+0x84>
 c0016d4:	900b883a 	mov	r5,r18
 c0016d8:	8009883a 	mov	r4,r16
 c0016dc:	c0010ac0 	call	c0010ac <memmove>
 c0016e0:	dd000017 	ldw	r20,0(sp)
 c0016e4:	b80f883a 	mov	r7,r23
 c0016e8:	003ec906 	br	c001210 <_realloc_r+0x84>
 c0016ec:	900b883a 	mov	r5,r18
 c0016f0:	8009883a 	mov	r4,r16
 c0016f4:	c0010ac0 	call	c0010ac <memmove>
 c0016f8:	b80f883a 	mov	r7,r23
 c0016fc:	003ec406 	br	c001210 <_realloc_r+0x84>
 c001700:	90c00417 	ldw	r3,16(r18)
 c001704:	89400604 	addi	r5,r17,24
 c001708:	91000604 	addi	r4,r18,24
 c00170c:	88c00415 	stw	r3,16(r17)
 c001710:	90800517 	ldw	r2,20(r18)
 c001714:	88800515 	stw	r2,20(r17)
 c001718:	003f6806 	br	c0014bc <_realloc_r+0x330>
 c00171c:	900b883a 	mov	r5,r18
 c001720:	8809883a 	mov	r4,r17
 c001724:	c0010ac0 	call	c0010ac <memmove>
 c001728:	003fd406 	br	c00167c <_realloc_r+0x4f0>
 c00172c:	90c00417 	ldw	r3,16(r18)
 c001730:	91000604 	addi	r4,r18,24
 c001734:	ba000804 	addi	r8,r23,32
 c001738:	b8c00615 	stw	r3,24(r23)
 c00173c:	90800517 	ldw	r2,20(r18)
 c001740:	b8800715 	stw	r2,28(r23)
 c001744:	003f1206 	br	c001390 <_realloc_r+0x204>
 c001748:	90c00417 	ldw	r3,16(r18)
 c00174c:	91000604 	addi	r4,r18,24
 c001750:	ba000804 	addi	r8,r23,32
 c001754:	b8c00615 	stw	r3,24(r23)
 c001758:	90800517 	ldw	r2,20(r18)
 c00175c:	b8800715 	stw	r2,28(r23)
 c001760:	003f3206 	br	c00142c <_realloc_r+0x2a0>
 c001764:	90c00417 	ldw	r3,16(r18)
 c001768:	91000604 	addi	r4,r18,24
 c00176c:	b9c00804 	addi	r7,r23,32
 c001770:	b8c00615 	stw	r3,24(r23)
 c001774:	90800517 	ldw	r2,20(r18)
 c001778:	b8800715 	stw	r2,28(r23)
 c00177c:	003fb906 	br	c001664 <_realloc_r+0x4d8>

0c001780 <_sbrk_r>:
 c001780:	defffd04 	addi	sp,sp,-12
 c001784:	dc000015 	stw	r16,0(sp)
 c001788:	04030074 	movhi	r16,3073
 c00178c:	842aef04 	addi	r16,r16,-21572
 c001790:	dc400115 	stw	r17,4(sp)
 c001794:	80000015 	stw	zero,0(r16)
 c001798:	2023883a 	mov	r17,r4
 c00179c:	2809883a 	mov	r4,r5
 c0017a0:	dfc00215 	stw	ra,8(sp)
 c0017a4:	c0034700 	call	c003470 <sbrk>
 c0017a8:	1007883a 	mov	r3,r2
 c0017ac:	00bfffc4 	movi	r2,-1
 c0017b0:	18800626 	beq	r3,r2,c0017cc <_sbrk_r+0x4c>
 c0017b4:	1805883a 	mov	r2,r3
 c0017b8:	dfc00217 	ldw	ra,8(sp)
 c0017bc:	dc400117 	ldw	r17,4(sp)
 c0017c0:	dc000017 	ldw	r16,0(sp)
 c0017c4:	dec00304 	addi	sp,sp,12
 c0017c8:	f800283a 	ret
 c0017cc:	80800017 	ldw	r2,0(r16)
 c0017d0:	103ff826 	beq	r2,zero,c0017b4 <_sbrk_r+0x34>
 c0017d4:	88800015 	stw	r2,0(r17)
 c0017d8:	1805883a 	mov	r2,r3
 c0017dc:	dfc00217 	ldw	ra,8(sp)
 c0017e0:	dc400117 	ldw	r17,4(sp)
 c0017e4:	dc000017 	ldw	r16,0(sp)
 c0017e8:	dec00304 	addi	sp,sp,12
 c0017ec:	f800283a 	ret

0c0017f0 <__swsetup_r>:
 c0017f0:	00830074 	movhi	r2,3073
 c0017f4:	10a3e504 	addi	r2,r2,-28780
 c0017f8:	10c00017 	ldw	r3,0(r2)
 c0017fc:	defffd04 	addi	sp,sp,-12
 c001800:	dc400115 	stw	r17,4(sp)
 c001804:	dc000015 	stw	r16,0(sp)
 c001808:	dfc00215 	stw	ra,8(sp)
 c00180c:	2023883a 	mov	r17,r4
 c001810:	2821883a 	mov	r16,r5
 c001814:	18000226 	beq	r3,zero,c001820 <__swsetup_r+0x30>
 c001818:	18800e17 	ldw	r2,56(r3)
 c00181c:	10001f26 	beq	r2,zero,c00189c <__swsetup_r+0xac>
 c001820:	8100030b 	ldhu	r4,12(r16)
 c001824:	2080020c 	andi	r2,r4,8
 c001828:	10002826 	beq	r2,zero,c0018cc <__swsetup_r+0xdc>
 c00182c:	81400417 	ldw	r5,16(r16)
 c001830:	28001d26 	beq	r5,zero,c0018a8 <__swsetup_r+0xb8>
 c001834:	2080004c 	andi	r2,r4,1
 c001838:	1005003a 	cmpeq	r2,r2,zero
 c00183c:	10000b26 	beq	r2,zero,c00186c <__swsetup_r+0x7c>
 c001840:	2080008c 	andi	r2,r4,2
 c001844:	10001226 	beq	r2,zero,c001890 <__swsetup_r+0xa0>
 c001848:	0005883a 	mov	r2,zero
 c00184c:	80800215 	stw	r2,8(r16)
 c001850:	28000b26 	beq	r5,zero,c001880 <__swsetup_r+0x90>
 c001854:	0005883a 	mov	r2,zero
 c001858:	dfc00217 	ldw	ra,8(sp)
 c00185c:	dc400117 	ldw	r17,4(sp)
 c001860:	dc000017 	ldw	r16,0(sp)
 c001864:	dec00304 	addi	sp,sp,12
 c001868:	f800283a 	ret
 c00186c:	80800517 	ldw	r2,20(r16)
 c001870:	80000215 	stw	zero,8(r16)
 c001874:	0085c83a 	sub	r2,zero,r2
 c001878:	80800615 	stw	r2,24(r16)
 c00187c:	283ff51e 	bne	r5,zero,c001854 <__swsetup_r+0x64>
 c001880:	2080200c 	andi	r2,r4,128
 c001884:	103ff326 	beq	r2,zero,c001854 <__swsetup_r+0x64>
 c001888:	00bfffc4 	movi	r2,-1
 c00188c:	003ff206 	br	c001858 <__swsetup_r+0x68>
 c001890:	80800517 	ldw	r2,20(r16)
 c001894:	80800215 	stw	r2,8(r16)
 c001898:	003fed06 	br	c001850 <__swsetup_r+0x60>
 c00189c:	1809883a 	mov	r4,r3
 c0018a0:	c001bc40 	call	c001bc4 <__sinit>
 c0018a4:	003fde06 	br	c001820 <__swsetup_r+0x30>
 c0018a8:	20c0a00c 	andi	r3,r4,640
 c0018ac:	00808004 	movi	r2,512
 c0018b0:	18bfe026 	beq	r3,r2,c001834 <__swsetup_r+0x44>
 c0018b4:	8809883a 	mov	r4,r17
 c0018b8:	800b883a 	mov	r5,r16
 c0018bc:	c0024100 	call	c002410 <__smakebuf_r>
 c0018c0:	8100030b 	ldhu	r4,12(r16)
 c0018c4:	81400417 	ldw	r5,16(r16)
 c0018c8:	003fda06 	br	c001834 <__swsetup_r+0x44>
 c0018cc:	2080040c 	andi	r2,r4,16
 c0018d0:	103fed26 	beq	r2,zero,c001888 <__swsetup_r+0x98>
 c0018d4:	2080010c 	andi	r2,r4,4
 c0018d8:	10001226 	beq	r2,zero,c001924 <__swsetup_r+0x134>
 c0018dc:	81400c17 	ldw	r5,48(r16)
 c0018e0:	28000526 	beq	r5,zero,c0018f8 <__swsetup_r+0x108>
 c0018e4:	80801004 	addi	r2,r16,64
 c0018e8:	28800226 	beq	r5,r2,c0018f4 <__swsetup_r+0x104>
 c0018ec:	8809883a 	mov	r4,r17
 c0018f0:	c001f7c0 	call	c001f7c <_free_r>
 c0018f4:	80000c15 	stw	zero,48(r16)
 c0018f8:	8080030b 	ldhu	r2,12(r16)
 c0018fc:	81400417 	ldw	r5,16(r16)
 c001900:	80000115 	stw	zero,4(r16)
 c001904:	10bff6cc 	andi	r2,r2,65499
 c001908:	8080030d 	sth	r2,12(r16)
 c00190c:	81400015 	stw	r5,0(r16)
 c001910:	8080030b 	ldhu	r2,12(r16)
 c001914:	10800214 	ori	r2,r2,8
 c001918:	113fffcc 	andi	r4,r2,65535
 c00191c:	8080030d 	sth	r2,12(r16)
 c001920:	003fc306 	br	c001830 <__swsetup_r+0x40>
 c001924:	81400417 	ldw	r5,16(r16)
 c001928:	003ff906 	br	c001910 <__swsetup_r+0x120>

0c00192c <_fflush_r>:
 c00192c:	defffb04 	addi	sp,sp,-20
 c001930:	dcc00315 	stw	r19,12(sp)
 c001934:	dc800215 	stw	r18,8(sp)
 c001938:	dfc00415 	stw	ra,16(sp)
 c00193c:	dc400115 	stw	r17,4(sp)
 c001940:	dc000015 	stw	r16,0(sp)
 c001944:	2027883a 	mov	r19,r4
 c001948:	2825883a 	mov	r18,r5
 c00194c:	20000226 	beq	r4,zero,c001958 <_fflush_r+0x2c>
 c001950:	20800e17 	ldw	r2,56(r4)
 c001954:	10005626 	beq	r2,zero,c001ab0 <_fflush_r+0x184>
 c001958:	9100030b 	ldhu	r4,12(r18)
 c00195c:	20ffffcc 	andi	r3,r4,65535
 c001960:	18e0001c 	xori	r3,r3,32768
 c001964:	18e00004 	addi	r3,r3,-32768
 c001968:	1880020c 	andi	r2,r3,8
 c00196c:	1000261e 	bne	r2,zero,c001a08 <_fflush_r+0xdc>
 c001970:	90c00117 	ldw	r3,4(r18)
 c001974:	20820014 	ori	r2,r4,2048
 c001978:	9080030d 	sth	r2,12(r18)
 c00197c:	1009883a 	mov	r4,r2
 c001980:	00c0400e 	bge	zero,r3,c001a84 <_fflush_r+0x158>
 c001984:	92000a17 	ldw	r8,40(r18)
 c001988:	40004026 	beq	r8,zero,c001a8c <_fflush_r+0x160>
 c00198c:	2084000c 	andi	r2,r4,4096
 c001990:	10005326 	beq	r2,zero,c001ae0 <_fflush_r+0x1b4>
 c001994:	94001417 	ldw	r16,80(r18)
 c001998:	9080030b 	ldhu	r2,12(r18)
 c00199c:	1080010c 	andi	r2,r2,4
 c0019a0:	1000481e 	bne	r2,zero,c001ac4 <_fflush_r+0x198>
 c0019a4:	91400717 	ldw	r5,28(r18)
 c0019a8:	9809883a 	mov	r4,r19
 c0019ac:	800d883a 	mov	r6,r16
 c0019b0:	000f883a 	mov	r7,zero
 c0019b4:	403ee83a 	callr	r8
 c0019b8:	8080261e 	bne	r16,r2,c001a54 <_fflush_r+0x128>
 c0019bc:	9080030b 	ldhu	r2,12(r18)
 c0019c0:	91000417 	ldw	r4,16(r18)
 c0019c4:	90000115 	stw	zero,4(r18)
 c0019c8:	10bdffcc 	andi	r2,r2,63487
 c0019cc:	10ffffcc 	andi	r3,r2,65535
 c0019d0:	18c4000c 	andi	r3,r3,4096
 c0019d4:	9080030d 	sth	r2,12(r18)
 c0019d8:	91000015 	stw	r4,0(r18)
 c0019dc:	18002b26 	beq	r3,zero,c001a8c <_fflush_r+0x160>
 c0019e0:	0007883a 	mov	r3,zero
 c0019e4:	1805883a 	mov	r2,r3
 c0019e8:	94001415 	stw	r16,80(r18)
 c0019ec:	dfc00417 	ldw	ra,16(sp)
 c0019f0:	dcc00317 	ldw	r19,12(sp)
 c0019f4:	dc800217 	ldw	r18,8(sp)
 c0019f8:	dc400117 	ldw	r17,4(sp)
 c0019fc:	dc000017 	ldw	r16,0(sp)
 c001a00:	dec00504 	addi	sp,sp,20
 c001a04:	f800283a 	ret
 c001a08:	94400417 	ldw	r17,16(r18)
 c001a0c:	88001f26 	beq	r17,zero,c001a8c <_fflush_r+0x160>
 c001a10:	90800017 	ldw	r2,0(r18)
 c001a14:	18c000cc 	andi	r3,r3,3
 c001a18:	94400015 	stw	r17,0(r18)
 c001a1c:	1461c83a 	sub	r16,r2,r17
 c001a20:	18002526 	beq	r3,zero,c001ab8 <_fflush_r+0x18c>
 c001a24:	0005883a 	mov	r2,zero
 c001a28:	90800215 	stw	r2,8(r18)
 c001a2c:	0400170e 	bge	zero,r16,c001a8c <_fflush_r+0x160>
 c001a30:	90c00917 	ldw	r3,36(r18)
 c001a34:	91400717 	ldw	r5,28(r18)
 c001a38:	880d883a 	mov	r6,r17
 c001a3c:	800f883a 	mov	r7,r16
 c001a40:	9809883a 	mov	r4,r19
 c001a44:	183ee83a 	callr	r3
 c001a48:	88a3883a 	add	r17,r17,r2
 c001a4c:	80a1c83a 	sub	r16,r16,r2
 c001a50:	00bff616 	blt	zero,r2,c001a2c <_fflush_r+0x100>
 c001a54:	9080030b 	ldhu	r2,12(r18)
 c001a58:	00ffffc4 	movi	r3,-1
 c001a5c:	10801014 	ori	r2,r2,64
 c001a60:	9080030d 	sth	r2,12(r18)
 c001a64:	1805883a 	mov	r2,r3
 c001a68:	dfc00417 	ldw	ra,16(sp)
 c001a6c:	dcc00317 	ldw	r19,12(sp)
 c001a70:	dc800217 	ldw	r18,8(sp)
 c001a74:	dc400117 	ldw	r17,4(sp)
 c001a78:	dc000017 	ldw	r16,0(sp)
 c001a7c:	dec00504 	addi	sp,sp,20
 c001a80:	f800283a 	ret
 c001a84:	90800f17 	ldw	r2,60(r18)
 c001a88:	00bfbe16 	blt	zero,r2,c001984 <_fflush_r+0x58>
 c001a8c:	0007883a 	mov	r3,zero
 c001a90:	1805883a 	mov	r2,r3
 c001a94:	dfc00417 	ldw	ra,16(sp)
 c001a98:	dcc00317 	ldw	r19,12(sp)
 c001a9c:	dc800217 	ldw	r18,8(sp)
 c001aa0:	dc400117 	ldw	r17,4(sp)
 c001aa4:	dc000017 	ldw	r16,0(sp)
 c001aa8:	dec00504 	addi	sp,sp,20
 c001aac:	f800283a 	ret
 c001ab0:	c001bc40 	call	c001bc4 <__sinit>
 c001ab4:	003fa806 	br	c001958 <_fflush_r+0x2c>
 c001ab8:	90800517 	ldw	r2,20(r18)
 c001abc:	90800215 	stw	r2,8(r18)
 c001ac0:	003fda06 	br	c001a2c <_fflush_r+0x100>
 c001ac4:	90800117 	ldw	r2,4(r18)
 c001ac8:	90c00c17 	ldw	r3,48(r18)
 c001acc:	80a1c83a 	sub	r16,r16,r2
 c001ad0:	183fb426 	beq	r3,zero,c0019a4 <_fflush_r+0x78>
 c001ad4:	90800f17 	ldw	r2,60(r18)
 c001ad8:	80a1c83a 	sub	r16,r16,r2
 c001adc:	003fb106 	br	c0019a4 <_fflush_r+0x78>
 c001ae0:	91400717 	ldw	r5,28(r18)
 c001ae4:	9809883a 	mov	r4,r19
 c001ae8:	000d883a 	mov	r6,zero
 c001aec:	01c00044 	movi	r7,1
 c001af0:	403ee83a 	callr	r8
 c001af4:	1021883a 	mov	r16,r2
 c001af8:	00bfffc4 	movi	r2,-1
 c001afc:	80800226 	beq	r16,r2,c001b08 <_fflush_r+0x1dc>
 c001b00:	92000a17 	ldw	r8,40(r18)
 c001b04:	003fa406 	br	c001998 <_fflush_r+0x6c>
 c001b08:	98c00017 	ldw	r3,0(r19)
 c001b0c:	00800744 	movi	r2,29
 c001b10:	18bfde26 	beq	r3,r2,c001a8c <_fflush_r+0x160>
 c001b14:	9080030b 	ldhu	r2,12(r18)
 c001b18:	8007883a 	mov	r3,r16
 c001b1c:	10801014 	ori	r2,r2,64
 c001b20:	9080030d 	sth	r2,12(r18)
 c001b24:	003fcf06 	br	c001a64 <_fflush_r+0x138>

0c001b28 <fflush>:
 c001b28:	01430034 	movhi	r5,3072
 c001b2c:	29464b04 	addi	r5,r5,6444
 c001b30:	2007883a 	mov	r3,r4
 c001b34:	20000526 	beq	r4,zero,c001b4c <fflush+0x24>
 c001b38:	00830074 	movhi	r2,3073
 c001b3c:	10a3e504 	addi	r2,r2,-28780
 c001b40:	11000017 	ldw	r4,0(r2)
 c001b44:	180b883a 	mov	r5,r3
 c001b48:	c00192c1 	jmpi	c00192c <_fflush_r>
 c001b4c:	00830074 	movhi	r2,3073
 c001b50:	10a3e604 	addi	r2,r2,-28776
 c001b54:	11000017 	ldw	r4,0(r2)
 c001b58:	c0022901 	jmpi	c002290 <_fwalk_reent>

0c001b5c <std>:
 c001b5c:	00830034 	movhi	r2,3072
 c001b60:	10898f04 	addi	r2,r2,9788
 c001b64:	20800b15 	stw	r2,44(r4)
 c001b68:	00830034 	movhi	r2,3072
 c001b6c:	1089ca04 	addi	r2,r2,10024
 c001b70:	20800815 	stw	r2,32(r4)
 c001b74:	00c30034 	movhi	r3,3072
 c001b78:	18c9ab04 	addi	r3,r3,9900
 c001b7c:	00830034 	movhi	r2,3072
 c001b80:	10899104 	addi	r2,r2,9796
 c001b84:	2140030d 	sth	r5,12(r4)
 c001b88:	2180038d 	sth	r6,14(r4)
 c001b8c:	20c00915 	stw	r3,36(r4)
 c001b90:	20800a15 	stw	r2,40(r4)
 c001b94:	20000015 	stw	zero,0(r4)
 c001b98:	20000115 	stw	zero,4(r4)
 c001b9c:	20000215 	stw	zero,8(r4)
 c001ba0:	20000415 	stw	zero,16(r4)
 c001ba4:	20000515 	stw	zero,20(r4)
 c001ba8:	20000615 	stw	zero,24(r4)
 c001bac:	21000715 	stw	r4,28(r4)
 c001bb0:	f800283a 	ret

0c001bb4 <__sfp_lock_acquire>:
 c001bb4:	f800283a 	ret

0c001bb8 <__sfp_lock_release>:
 c001bb8:	f800283a 	ret

0c001bbc <__sinit_lock_acquire>:
 c001bbc:	f800283a 	ret

0c001bc0 <__sinit_lock_release>:
 c001bc0:	f800283a 	ret

0c001bc4 <__sinit>:
 c001bc4:	20800e17 	ldw	r2,56(r4)
 c001bc8:	defffd04 	addi	sp,sp,-12
 c001bcc:	dc400115 	stw	r17,4(sp)
 c001bd0:	dc000015 	stw	r16,0(sp)
 c001bd4:	dfc00215 	stw	ra,8(sp)
 c001bd8:	04400044 	movi	r17,1
 c001bdc:	01400104 	movi	r5,4
 c001be0:	000d883a 	mov	r6,zero
 c001be4:	2021883a 	mov	r16,r4
 c001be8:	2200bb04 	addi	r8,r4,748
 c001bec:	200f883a 	mov	r7,r4
 c001bf0:	10000526 	beq	r2,zero,c001c08 <__sinit+0x44>
 c001bf4:	dfc00217 	ldw	ra,8(sp)
 c001bf8:	dc400117 	ldw	r17,4(sp)
 c001bfc:	dc000017 	ldw	r16,0(sp)
 c001c00:	dec00304 	addi	sp,sp,12
 c001c04:	f800283a 	ret
 c001c08:	21000117 	ldw	r4,4(r4)
 c001c0c:	00830034 	movhi	r2,3072
 c001c10:	10872a04 	addi	r2,r2,7336
 c001c14:	00c000c4 	movi	r3,3
 c001c18:	80800f15 	stw	r2,60(r16)
 c001c1c:	80c0b915 	stw	r3,740(r16)
 c001c20:	8200ba15 	stw	r8,744(r16)
 c001c24:	84400e15 	stw	r17,56(r16)
 c001c28:	8000b815 	stw	zero,736(r16)
 c001c2c:	c001b5c0 	call	c001b5c <std>
 c001c30:	81000217 	ldw	r4,8(r16)
 c001c34:	880d883a 	mov	r6,r17
 c001c38:	800f883a 	mov	r7,r16
 c001c3c:	01400284 	movi	r5,10
 c001c40:	c001b5c0 	call	c001b5c <std>
 c001c44:	81000317 	ldw	r4,12(r16)
 c001c48:	800f883a 	mov	r7,r16
 c001c4c:	01400484 	movi	r5,18
 c001c50:	01800084 	movi	r6,2
 c001c54:	dfc00217 	ldw	ra,8(sp)
 c001c58:	dc400117 	ldw	r17,4(sp)
 c001c5c:	dc000017 	ldw	r16,0(sp)
 c001c60:	dec00304 	addi	sp,sp,12
 c001c64:	c001b5c1 	jmpi	c001b5c <std>

0c001c68 <__fp_lock>:
 c001c68:	0005883a 	mov	r2,zero
 c001c6c:	f800283a 	ret

0c001c70 <__fp_unlock>:
 c001c70:	0005883a 	mov	r2,zero
 c001c74:	f800283a 	ret

0c001c78 <__fp_unlock_all>:
 c001c78:	00830074 	movhi	r2,3073
 c001c7c:	10a3e504 	addi	r2,r2,-28780
 c001c80:	11000017 	ldw	r4,0(r2)
 c001c84:	01430034 	movhi	r5,3072
 c001c88:	29471c04 	addi	r5,r5,7280
 c001c8c:	c0023581 	jmpi	c002358 <_fwalk>

0c001c90 <__fp_lock_all>:
 c001c90:	00830074 	movhi	r2,3073
 c001c94:	10a3e504 	addi	r2,r2,-28780
 c001c98:	11000017 	ldw	r4,0(r2)
 c001c9c:	01430034 	movhi	r5,3072
 c001ca0:	29471a04 	addi	r5,r5,7272
 c001ca4:	c0023581 	jmpi	c002358 <_fwalk>

0c001ca8 <_cleanup_r>:
 c001ca8:	01430034 	movhi	r5,3072
 c001cac:	294a6004 	addi	r5,r5,10624
 c001cb0:	c0023581 	jmpi	c002358 <_fwalk>

0c001cb4 <_cleanup>:
 c001cb4:	00830074 	movhi	r2,3073
 c001cb8:	10a3e604 	addi	r2,r2,-28776
 c001cbc:	11000017 	ldw	r4,0(r2)
 c001cc0:	c001ca81 	jmpi	c001ca8 <_cleanup_r>

0c001cc4 <__sfmoreglue>:
 c001cc4:	defffc04 	addi	sp,sp,-16
 c001cc8:	dc000015 	stw	r16,0(sp)
 c001ccc:	2821883a 	mov	r16,r5
 c001cd0:	dc400115 	stw	r17,4(sp)
 c001cd4:	01401704 	movi	r5,92
 c001cd8:	2023883a 	mov	r17,r4
 c001cdc:	8009883a 	mov	r4,r16
 c001ce0:	dfc00315 	stw	ra,12(sp)
 c001ce4:	dcc00215 	stw	r19,8(sp)
 c001ce8:	c002b680 	call	c002b68 <__mulsi3>
 c001cec:	11400304 	addi	r5,r2,12
 c001cf0:	8809883a 	mov	r4,r17
 c001cf4:	1027883a 	mov	r19,r2
 c001cf8:	c0007e80 	call	c0007e8 <_malloc_r>
 c001cfc:	10c00304 	addi	r3,r2,12
 c001d00:	1023883a 	mov	r17,r2
 c001d04:	1809883a 	mov	r4,r3
 c001d08:	980d883a 	mov	r6,r19
 c001d0c:	000b883a 	mov	r5,zero
 c001d10:	10000b26 	beq	r2,zero,c001d40 <__sfmoreglue+0x7c>
 c001d14:	14000115 	stw	r16,4(r2)
 c001d18:	10c00215 	stw	r3,8(r2)
 c001d1c:	10000015 	stw	zero,0(r2)
 c001d20:	c0025a40 	call	c0025a4 <memset>
 c001d24:	8805883a 	mov	r2,r17
 c001d28:	dfc00317 	ldw	ra,12(sp)
 c001d2c:	dcc00217 	ldw	r19,8(sp)
 c001d30:	dc400117 	ldw	r17,4(sp)
 c001d34:	dc000017 	ldw	r16,0(sp)
 c001d38:	dec00404 	addi	sp,sp,16
 c001d3c:	f800283a 	ret
 c001d40:	0023883a 	mov	r17,zero
 c001d44:	8805883a 	mov	r2,r17
 c001d48:	dfc00317 	ldw	ra,12(sp)
 c001d4c:	dcc00217 	ldw	r19,8(sp)
 c001d50:	dc400117 	ldw	r17,4(sp)
 c001d54:	dc000017 	ldw	r16,0(sp)
 c001d58:	dec00404 	addi	sp,sp,16
 c001d5c:	f800283a 	ret

0c001d60 <__sfp>:
 c001d60:	defffd04 	addi	sp,sp,-12
 c001d64:	00830074 	movhi	r2,3073
 c001d68:	10a3e604 	addi	r2,r2,-28776
 c001d6c:	dc000015 	stw	r16,0(sp)
 c001d70:	14000017 	ldw	r16,0(r2)
 c001d74:	dc400115 	stw	r17,4(sp)
 c001d78:	dfc00215 	stw	ra,8(sp)
 c001d7c:	80800e17 	ldw	r2,56(r16)
 c001d80:	2023883a 	mov	r17,r4
 c001d84:	10002626 	beq	r2,zero,c001e20 <__sfp+0xc0>
 c001d88:	8400b804 	addi	r16,r16,736
 c001d8c:	80800117 	ldw	r2,4(r16)
 c001d90:	81000217 	ldw	r4,8(r16)
 c001d94:	10ffffc4 	addi	r3,r2,-1
 c001d98:	18000916 	blt	r3,zero,c001dc0 <__sfp+0x60>
 c001d9c:	2080030f 	ldh	r2,12(r4)
 c001da0:	10000b26 	beq	r2,zero,c001dd0 <__sfp+0x70>
 c001da4:	017fffc4 	movi	r5,-1
 c001da8:	00000206 	br	c001db4 <__sfp+0x54>
 c001dac:	2080030f 	ldh	r2,12(r4)
 c001db0:	10000726 	beq	r2,zero,c001dd0 <__sfp+0x70>
 c001db4:	18ffffc4 	addi	r3,r3,-1
 c001db8:	21001704 	addi	r4,r4,92
 c001dbc:	197ffb1e 	bne	r3,r5,c001dac <__sfp+0x4c>
 c001dc0:	80800017 	ldw	r2,0(r16)
 c001dc4:	10001926 	beq	r2,zero,c001e2c <__sfp+0xcc>
 c001dc8:	1021883a 	mov	r16,r2
 c001dcc:	003fef06 	br	c001d8c <__sfp+0x2c>
 c001dd0:	00bfffc4 	movi	r2,-1
 c001dd4:	00c00044 	movi	r3,1
 c001dd8:	2080038d 	sth	r2,14(r4)
 c001ddc:	20c0030d 	sth	r3,12(r4)
 c001de0:	20000015 	stw	zero,0(r4)
 c001de4:	20000215 	stw	zero,8(r4)
 c001de8:	20000115 	stw	zero,4(r4)
 c001dec:	20000415 	stw	zero,16(r4)
 c001df0:	20000515 	stw	zero,20(r4)
 c001df4:	20000615 	stw	zero,24(r4)
 c001df8:	20000c15 	stw	zero,48(r4)
 c001dfc:	20000d15 	stw	zero,52(r4)
 c001e00:	20001115 	stw	zero,68(r4)
 c001e04:	20001215 	stw	zero,72(r4)
 c001e08:	2005883a 	mov	r2,r4
 c001e0c:	dfc00217 	ldw	ra,8(sp)
 c001e10:	dc400117 	ldw	r17,4(sp)
 c001e14:	dc000017 	ldw	r16,0(sp)
 c001e18:	dec00304 	addi	sp,sp,12
 c001e1c:	f800283a 	ret
 c001e20:	8009883a 	mov	r4,r16
 c001e24:	c001bc40 	call	c001bc4 <__sinit>
 c001e28:	003fd706 	br	c001d88 <__sfp+0x28>
 c001e2c:	8809883a 	mov	r4,r17
 c001e30:	01400104 	movi	r5,4
 c001e34:	c001cc40 	call	c001cc4 <__sfmoreglue>
 c001e38:	80800015 	stw	r2,0(r16)
 c001e3c:	103fe21e 	bne	r2,zero,c001dc8 <__sfp+0x68>
 c001e40:	00800304 	movi	r2,12
 c001e44:	0009883a 	mov	r4,zero
 c001e48:	88800015 	stw	r2,0(r17)
 c001e4c:	003fee06 	br	c001e08 <__sfp+0xa8>

0c001e50 <_malloc_trim_r>:
 c001e50:	defffb04 	addi	sp,sp,-20
 c001e54:	dcc00315 	stw	r19,12(sp)
 c001e58:	04c30034 	movhi	r19,3072
 c001e5c:	9cddfe04 	addi	r19,r19,30712
 c001e60:	dc800215 	stw	r18,8(sp)
 c001e64:	dc400115 	stw	r17,4(sp)
 c001e68:	dc000015 	stw	r16,0(sp)
 c001e6c:	2823883a 	mov	r17,r5
 c001e70:	2025883a 	mov	r18,r4
 c001e74:	dfc00415 	stw	ra,16(sp)
 c001e78:	c0032340 	call	c003234 <__malloc_lock>
 c001e7c:	98800217 	ldw	r2,8(r19)
 c001e80:	9009883a 	mov	r4,r18
 c001e84:	000b883a 	mov	r5,zero
 c001e88:	10c00117 	ldw	r3,4(r2)
 c001e8c:	00bfff04 	movi	r2,-4
 c001e90:	18a0703a 	and	r16,r3,r2
 c001e94:	8463c83a 	sub	r17,r16,r17
 c001e98:	8c43fbc4 	addi	r17,r17,4079
 c001e9c:	8822d33a 	srli	r17,r17,12
 c001ea0:	0083ffc4 	movi	r2,4095
 c001ea4:	8c7fffc4 	addi	r17,r17,-1
 c001ea8:	8822933a 	slli	r17,r17,12
 c001eac:	1440060e 	bge	r2,r17,c001ec8 <_malloc_trim_r+0x78>
 c001eb0:	c0017800 	call	c001780 <_sbrk_r>
 c001eb4:	98c00217 	ldw	r3,8(r19)
 c001eb8:	9009883a 	mov	r4,r18
 c001ebc:	044bc83a 	sub	r5,zero,r17
 c001ec0:	80c7883a 	add	r3,r16,r3
 c001ec4:	10c00926 	beq	r2,r3,c001eec <_malloc_trim_r+0x9c>
 c001ec8:	c0032540 	call	c003254 <__malloc_unlock>
 c001ecc:	0005883a 	mov	r2,zero
 c001ed0:	dfc00417 	ldw	ra,16(sp)
 c001ed4:	dcc00317 	ldw	r19,12(sp)
 c001ed8:	dc800217 	ldw	r18,8(sp)
 c001edc:	dc400117 	ldw	r17,4(sp)
 c001ee0:	dc000017 	ldw	r16,0(sp)
 c001ee4:	dec00504 	addi	sp,sp,20
 c001ee8:	f800283a 	ret
 c001eec:	9009883a 	mov	r4,r18
 c001ef0:	c0017800 	call	c001780 <_sbrk_r>
 c001ef4:	844dc83a 	sub	r6,r16,r17
 c001ef8:	00ffffc4 	movi	r3,-1
 c001efc:	9009883a 	mov	r4,r18
 c001f00:	000b883a 	mov	r5,zero
 c001f04:	01c30074 	movhi	r7,3073
 c001f08:	39eaf604 	addi	r7,r7,-21544
 c001f0c:	31800054 	ori	r6,r6,1
 c001f10:	10c00926 	beq	r2,r3,c001f38 <_malloc_trim_r+0xe8>
 c001f14:	38800017 	ldw	r2,0(r7)
 c001f18:	98c00217 	ldw	r3,8(r19)
 c001f1c:	9009883a 	mov	r4,r18
 c001f20:	1445c83a 	sub	r2,r2,r17
 c001f24:	38800015 	stw	r2,0(r7)
 c001f28:	19800115 	stw	r6,4(r3)
 c001f2c:	c0032540 	call	c003254 <__malloc_unlock>
 c001f30:	00800044 	movi	r2,1
 c001f34:	003fe606 	br	c001ed0 <_malloc_trim_r+0x80>
 c001f38:	c0017800 	call	c001780 <_sbrk_r>
 c001f3c:	99800217 	ldw	r6,8(r19)
 c001f40:	100f883a 	mov	r7,r2
 c001f44:	9009883a 	mov	r4,r18
 c001f48:	1187c83a 	sub	r3,r2,r6
 c001f4c:	008003c4 	movi	r2,15
 c001f50:	19400054 	ori	r5,r3,1
 c001f54:	10ffdc0e 	bge	r2,r3,c001ec8 <_malloc_trim_r+0x78>
 c001f58:	00830074 	movhi	r2,3073
 c001f5c:	10a3e804 	addi	r2,r2,-28768
 c001f60:	10c00017 	ldw	r3,0(r2)
 c001f64:	00830074 	movhi	r2,3073
 c001f68:	10aaf604 	addi	r2,r2,-21544
 c001f6c:	31400115 	stw	r5,4(r6)
 c001f70:	38c7c83a 	sub	r3,r7,r3
 c001f74:	10c00015 	stw	r3,0(r2)
 c001f78:	003fd306 	br	c001ec8 <_malloc_trim_r+0x78>

0c001f7c <_free_r>:
 c001f7c:	defffd04 	addi	sp,sp,-12
 c001f80:	dc400115 	stw	r17,4(sp)
 c001f84:	dc000015 	stw	r16,0(sp)
 c001f88:	dfc00215 	stw	ra,8(sp)
 c001f8c:	2821883a 	mov	r16,r5
 c001f90:	2023883a 	mov	r17,r4
 c001f94:	28005a26 	beq	r5,zero,c002100 <_free_r+0x184>
 c001f98:	c0032340 	call	c003234 <__malloc_lock>
 c001f9c:	823ffe04 	addi	r8,r16,-8
 c001fa0:	41400117 	ldw	r5,4(r8)
 c001fa4:	00bfff84 	movi	r2,-2
 c001fa8:	02830034 	movhi	r10,3072
 c001fac:	529dfe04 	addi	r10,r10,30712
 c001fb0:	288e703a 	and	r7,r5,r2
 c001fb4:	41cd883a 	add	r6,r8,r7
 c001fb8:	30c00117 	ldw	r3,4(r6)
 c001fbc:	51000217 	ldw	r4,8(r10)
 c001fc0:	00bfff04 	movi	r2,-4
 c001fc4:	1892703a 	and	r9,r3,r2
 c001fc8:	5017883a 	mov	r11,r10
 c001fcc:	31006726 	beq	r6,r4,c00216c <_free_r+0x1f0>
 c001fd0:	2880004c 	andi	r2,r5,1
 c001fd4:	1005003a 	cmpeq	r2,r2,zero
 c001fd8:	32400115 	stw	r9,4(r6)
 c001fdc:	10001a1e 	bne	r2,zero,c002048 <_free_r+0xcc>
 c001fe0:	000b883a 	mov	r5,zero
 c001fe4:	3247883a 	add	r3,r6,r9
 c001fe8:	18800117 	ldw	r2,4(r3)
 c001fec:	1080004c 	andi	r2,r2,1
 c001ff0:	1000231e 	bne	r2,zero,c002080 <_free_r+0x104>
 c001ff4:	280ac03a 	cmpne	r5,r5,zero
 c001ff8:	3a4f883a 	add	r7,r7,r9
 c001ffc:	2800451e 	bne	r5,zero,c002114 <_free_r+0x198>
 c002000:	31000217 	ldw	r4,8(r6)
 c002004:	00830034 	movhi	r2,3072
 c002008:	109e0004 	addi	r2,r2,30720
 c00200c:	20807b26 	beq	r4,r2,c0021fc <_free_r+0x280>
 c002010:	30800317 	ldw	r2,12(r6)
 c002014:	3a07883a 	add	r3,r7,r8
 c002018:	19c00015 	stw	r7,0(r3)
 c00201c:	11000215 	stw	r4,8(r2)
 c002020:	20800315 	stw	r2,12(r4)
 c002024:	38800054 	ori	r2,r7,1
 c002028:	40800115 	stw	r2,4(r8)
 c00202c:	28001a26 	beq	r5,zero,c002098 <_free_r+0x11c>
 c002030:	8809883a 	mov	r4,r17
 c002034:	dfc00217 	ldw	ra,8(sp)
 c002038:	dc400117 	ldw	r17,4(sp)
 c00203c:	dc000017 	ldw	r16,0(sp)
 c002040:	dec00304 	addi	sp,sp,12
 c002044:	c0032541 	jmpi	c003254 <__malloc_unlock>
 c002048:	80bffe17 	ldw	r2,-8(r16)
 c00204c:	50c00204 	addi	r3,r10,8
 c002050:	4091c83a 	sub	r8,r8,r2
 c002054:	41000217 	ldw	r4,8(r8)
 c002058:	388f883a 	add	r7,r7,r2
 c00205c:	20c06126 	beq	r4,r3,c0021e4 <_free_r+0x268>
 c002060:	40800317 	ldw	r2,12(r8)
 c002064:	3247883a 	add	r3,r6,r9
 c002068:	000b883a 	mov	r5,zero
 c00206c:	11000215 	stw	r4,8(r2)
 c002070:	20800315 	stw	r2,12(r4)
 c002074:	18800117 	ldw	r2,4(r3)
 c002078:	1080004c 	andi	r2,r2,1
 c00207c:	103fdd26 	beq	r2,zero,c001ff4 <_free_r+0x78>
 c002080:	38800054 	ori	r2,r7,1
 c002084:	3a07883a 	add	r3,r7,r8
 c002088:	280ac03a 	cmpne	r5,r5,zero
 c00208c:	40800115 	stw	r2,4(r8)
 c002090:	19c00015 	stw	r7,0(r3)
 c002094:	283fe61e 	bne	r5,zero,c002030 <_free_r+0xb4>
 c002098:	00807fc4 	movi	r2,511
 c00209c:	11c01f2e 	bgeu	r2,r7,c00211c <_free_r+0x1a0>
 c0020a0:	3806d27a 	srli	r3,r7,9
 c0020a4:	1800481e 	bne	r3,zero,c0021c8 <_free_r+0x24c>
 c0020a8:	3804d0fa 	srli	r2,r7,3
 c0020ac:	100690fa 	slli	r3,r2,3
 c0020b0:	1acd883a 	add	r6,r3,r11
 c0020b4:	31400217 	ldw	r5,8(r6)
 c0020b8:	31405926 	beq	r6,r5,c002220 <_free_r+0x2a4>
 c0020bc:	28800117 	ldw	r2,4(r5)
 c0020c0:	00ffff04 	movi	r3,-4
 c0020c4:	10c4703a 	and	r2,r2,r3
 c0020c8:	3880022e 	bgeu	r7,r2,c0020d4 <_free_r+0x158>
 c0020cc:	29400217 	ldw	r5,8(r5)
 c0020d0:	317ffa1e 	bne	r6,r5,c0020bc <_free_r+0x140>
 c0020d4:	29800317 	ldw	r6,12(r5)
 c0020d8:	41800315 	stw	r6,12(r8)
 c0020dc:	41400215 	stw	r5,8(r8)
 c0020e0:	8809883a 	mov	r4,r17
 c0020e4:	2a000315 	stw	r8,12(r5)
 c0020e8:	32000215 	stw	r8,8(r6)
 c0020ec:	dfc00217 	ldw	ra,8(sp)
 c0020f0:	dc400117 	ldw	r17,4(sp)
 c0020f4:	dc000017 	ldw	r16,0(sp)
 c0020f8:	dec00304 	addi	sp,sp,12
 c0020fc:	c0032541 	jmpi	c003254 <__malloc_unlock>
 c002100:	dfc00217 	ldw	ra,8(sp)
 c002104:	dc400117 	ldw	r17,4(sp)
 c002108:	dc000017 	ldw	r16,0(sp)
 c00210c:	dec00304 	addi	sp,sp,12
 c002110:	f800283a 	ret
 c002114:	31000217 	ldw	r4,8(r6)
 c002118:	003fbd06 	br	c002010 <_free_r+0x94>
 c00211c:	3806d0fa 	srli	r3,r7,3
 c002120:	00800044 	movi	r2,1
 c002124:	51400117 	ldw	r5,4(r10)
 c002128:	180890fa 	slli	r4,r3,3
 c00212c:	1807d0ba 	srai	r3,r3,2
 c002130:	22c9883a 	add	r4,r4,r11
 c002134:	21800217 	ldw	r6,8(r4)
 c002138:	10c4983a 	sll	r2,r2,r3
 c00213c:	41000315 	stw	r4,12(r8)
 c002140:	41800215 	stw	r6,8(r8)
 c002144:	288ab03a 	or	r5,r5,r2
 c002148:	22000215 	stw	r8,8(r4)
 c00214c:	8809883a 	mov	r4,r17
 c002150:	51400115 	stw	r5,4(r10)
 c002154:	32000315 	stw	r8,12(r6)
 c002158:	dfc00217 	ldw	ra,8(sp)
 c00215c:	dc400117 	ldw	r17,4(sp)
 c002160:	dc000017 	ldw	r16,0(sp)
 c002164:	dec00304 	addi	sp,sp,12
 c002168:	c0032541 	jmpi	c003254 <__malloc_unlock>
 c00216c:	2880004c 	andi	r2,r5,1
 c002170:	3a4d883a 	add	r6,r7,r9
 c002174:	1000071e 	bne	r2,zero,c002194 <_free_r+0x218>
 c002178:	80bffe17 	ldw	r2,-8(r16)
 c00217c:	4091c83a 	sub	r8,r8,r2
 c002180:	41000317 	ldw	r4,12(r8)
 c002184:	40c00217 	ldw	r3,8(r8)
 c002188:	308d883a 	add	r6,r6,r2
 c00218c:	20c00215 	stw	r3,8(r4)
 c002190:	19000315 	stw	r4,12(r3)
 c002194:	00830074 	movhi	r2,3073
 c002198:	10a3e704 	addi	r2,r2,-28772
 c00219c:	11000017 	ldw	r4,0(r2)
 c0021a0:	30c00054 	ori	r3,r6,1
 c0021a4:	52000215 	stw	r8,8(r10)
 c0021a8:	40c00115 	stw	r3,4(r8)
 c0021ac:	313fa036 	bltu	r6,r4,c002030 <_free_r+0xb4>
 c0021b0:	00830074 	movhi	r2,3073
 c0021b4:	10aaec04 	addi	r2,r2,-21584
 c0021b8:	11400017 	ldw	r5,0(r2)
 c0021bc:	8809883a 	mov	r4,r17
 c0021c0:	c001e500 	call	c001e50 <_malloc_trim_r>
 c0021c4:	003f9a06 	br	c002030 <_free_r+0xb4>
 c0021c8:	00800104 	movi	r2,4
 c0021cc:	10c0072e 	bgeu	r2,r3,c0021ec <_free_r+0x270>
 c0021d0:	00800504 	movi	r2,20
 c0021d4:	10c01936 	bltu	r2,r3,c00223c <_free_r+0x2c0>
 c0021d8:	188016c4 	addi	r2,r3,91
 c0021dc:	100690fa 	slli	r3,r2,3
 c0021e0:	003fb306 	br	c0020b0 <_free_r+0x134>
 c0021e4:	01400044 	movi	r5,1
 c0021e8:	003f7e06 	br	c001fe4 <_free_r+0x68>
 c0021ec:	3804d1ba 	srli	r2,r7,6
 c0021f0:	10800e04 	addi	r2,r2,56
 c0021f4:	100690fa 	slli	r3,r2,3
 c0021f8:	003fad06 	br	c0020b0 <_free_r+0x134>
 c0021fc:	22000315 	stw	r8,12(r4)
 c002200:	22000215 	stw	r8,8(r4)
 c002204:	3a05883a 	add	r2,r7,r8
 c002208:	38c00054 	ori	r3,r7,1
 c00220c:	11c00015 	stw	r7,0(r2)
 c002210:	41000215 	stw	r4,8(r8)
 c002214:	40c00115 	stw	r3,4(r8)
 c002218:	41000315 	stw	r4,12(r8)
 c00221c:	003f8406 	br	c002030 <_free_r+0xb4>
 c002220:	1005d0ba 	srai	r2,r2,2
 c002224:	00c00044 	movi	r3,1
 c002228:	51000117 	ldw	r4,4(r10)
 c00222c:	1886983a 	sll	r3,r3,r2
 c002230:	20c8b03a 	or	r4,r4,r3
 c002234:	51000115 	stw	r4,4(r10)
 c002238:	003fa706 	br	c0020d8 <_free_r+0x15c>
 c00223c:	00801504 	movi	r2,84
 c002240:	10c00436 	bltu	r2,r3,c002254 <_free_r+0x2d8>
 c002244:	3804d33a 	srli	r2,r7,12
 c002248:	10801b84 	addi	r2,r2,110
 c00224c:	100690fa 	slli	r3,r2,3
 c002250:	003f9706 	br	c0020b0 <_free_r+0x134>
 c002254:	00805504 	movi	r2,340
 c002258:	10c00436 	bltu	r2,r3,c00226c <_free_r+0x2f0>
 c00225c:	3804d3fa 	srli	r2,r7,15
 c002260:	10801dc4 	addi	r2,r2,119
 c002264:	100690fa 	slli	r3,r2,3
 c002268:	003f9106 	br	c0020b0 <_free_r+0x134>
 c00226c:	00815504 	movi	r2,1364
 c002270:	10c0032e 	bgeu	r2,r3,c002280 <_free_r+0x304>
 c002274:	00801f84 	movi	r2,126
 c002278:	00c0fc04 	movi	r3,1008
 c00227c:	003f8c06 	br	c0020b0 <_free_r+0x134>
 c002280:	3804d4ba 	srli	r2,r7,18
 c002284:	10801f04 	addi	r2,r2,124
 c002288:	100690fa 	slli	r3,r2,3
 c00228c:	003f8806 	br	c0020b0 <_free_r+0x134>

0c002290 <_fwalk_reent>:
 c002290:	defff704 	addi	sp,sp,-36
 c002294:	dcc00315 	stw	r19,12(sp)
 c002298:	24c0b804 	addi	r19,r4,736
 c00229c:	dd800615 	stw	r22,24(sp)
 c0022a0:	dd400515 	stw	r21,20(sp)
 c0022a4:	dfc00815 	stw	ra,32(sp)
 c0022a8:	ddc00715 	stw	r23,28(sp)
 c0022ac:	dd000415 	stw	r20,16(sp)
 c0022b0:	dc800215 	stw	r18,8(sp)
 c0022b4:	dc400115 	stw	r17,4(sp)
 c0022b8:	dc000015 	stw	r16,0(sp)
 c0022bc:	202b883a 	mov	r21,r4
 c0022c0:	282d883a 	mov	r22,r5
 c0022c4:	c001bb40 	call	c001bb4 <__sfp_lock_acquire>
 c0022c8:	98002126 	beq	r19,zero,c002350 <_fwalk_reent+0xc0>
 c0022cc:	002f883a 	mov	r23,zero
 c0022d0:	9c800117 	ldw	r18,4(r19)
 c0022d4:	9c000217 	ldw	r16,8(r19)
 c0022d8:	90bfffc4 	addi	r2,r18,-1
 c0022dc:	10000d16 	blt	r2,zero,c002314 <_fwalk_reent+0x84>
 c0022e0:	0023883a 	mov	r17,zero
 c0022e4:	053fffc4 	movi	r20,-1
 c0022e8:	8080030f 	ldh	r2,12(r16)
 c0022ec:	8c400044 	addi	r17,r17,1
 c0022f0:	10000626 	beq	r2,zero,c00230c <_fwalk_reent+0x7c>
 c0022f4:	8080038f 	ldh	r2,14(r16)
 c0022f8:	800b883a 	mov	r5,r16
 c0022fc:	a809883a 	mov	r4,r21
 c002300:	15000226 	beq	r2,r20,c00230c <_fwalk_reent+0x7c>
 c002304:	b03ee83a 	callr	r22
 c002308:	b8aeb03a 	or	r23,r23,r2
 c00230c:	84001704 	addi	r16,r16,92
 c002310:	947ff51e 	bne	r18,r17,c0022e8 <_fwalk_reent+0x58>
 c002314:	9cc00017 	ldw	r19,0(r19)
 c002318:	983fed1e 	bne	r19,zero,c0022d0 <_fwalk_reent+0x40>
 c00231c:	c001bb80 	call	c001bb8 <__sfp_lock_release>
 c002320:	b805883a 	mov	r2,r23
 c002324:	dfc00817 	ldw	ra,32(sp)
 c002328:	ddc00717 	ldw	r23,28(sp)
 c00232c:	dd800617 	ldw	r22,24(sp)
 c002330:	dd400517 	ldw	r21,20(sp)
 c002334:	dd000417 	ldw	r20,16(sp)
 c002338:	dcc00317 	ldw	r19,12(sp)
 c00233c:	dc800217 	ldw	r18,8(sp)
 c002340:	dc400117 	ldw	r17,4(sp)
 c002344:	dc000017 	ldw	r16,0(sp)
 c002348:	dec00904 	addi	sp,sp,36
 c00234c:	f800283a 	ret
 c002350:	002f883a 	mov	r23,zero
 c002354:	003ff106 	br	c00231c <_fwalk_reent+0x8c>

0c002358 <_fwalk>:
 c002358:	defff804 	addi	sp,sp,-32
 c00235c:	dcc00315 	stw	r19,12(sp)
 c002360:	24c0b804 	addi	r19,r4,736
 c002364:	dd400515 	stw	r21,20(sp)
 c002368:	dfc00715 	stw	ra,28(sp)
 c00236c:	dd800615 	stw	r22,24(sp)
 c002370:	dd000415 	stw	r20,16(sp)
 c002374:	dc800215 	stw	r18,8(sp)
 c002378:	dc400115 	stw	r17,4(sp)
 c00237c:	dc000015 	stw	r16,0(sp)
 c002380:	282b883a 	mov	r21,r5
 c002384:	c001bb40 	call	c001bb4 <__sfp_lock_acquire>
 c002388:	98001f26 	beq	r19,zero,c002408 <_fwalk+0xb0>
 c00238c:	002d883a 	mov	r22,zero
 c002390:	9c800117 	ldw	r18,4(r19)
 c002394:	9c000217 	ldw	r16,8(r19)
 c002398:	90bfffc4 	addi	r2,r18,-1
 c00239c:	10000c16 	blt	r2,zero,c0023d0 <_fwalk+0x78>
 c0023a0:	0023883a 	mov	r17,zero
 c0023a4:	053fffc4 	movi	r20,-1
 c0023a8:	8080030f 	ldh	r2,12(r16)
 c0023ac:	8c400044 	addi	r17,r17,1
 c0023b0:	10000526 	beq	r2,zero,c0023c8 <_fwalk+0x70>
 c0023b4:	8080038f 	ldh	r2,14(r16)
 c0023b8:	8009883a 	mov	r4,r16
 c0023bc:	15000226 	beq	r2,r20,c0023c8 <_fwalk+0x70>
 c0023c0:	a83ee83a 	callr	r21
 c0023c4:	b0acb03a 	or	r22,r22,r2
 c0023c8:	84001704 	addi	r16,r16,92
 c0023cc:	947ff61e 	bne	r18,r17,c0023a8 <_fwalk+0x50>
 c0023d0:	9cc00017 	ldw	r19,0(r19)
 c0023d4:	983fee1e 	bne	r19,zero,c002390 <_fwalk+0x38>
 c0023d8:	c001bb80 	call	c001bb8 <__sfp_lock_release>
 c0023dc:	b005883a 	mov	r2,r22
 c0023e0:	dfc00717 	ldw	ra,28(sp)
 c0023e4:	dd800617 	ldw	r22,24(sp)
 c0023e8:	dd400517 	ldw	r21,20(sp)
 c0023ec:	dd000417 	ldw	r20,16(sp)
 c0023f0:	dcc00317 	ldw	r19,12(sp)
 c0023f4:	dc800217 	ldw	r18,8(sp)
 c0023f8:	dc400117 	ldw	r17,4(sp)
 c0023fc:	dc000017 	ldw	r16,0(sp)
 c002400:	dec00804 	addi	sp,sp,32
 c002404:	f800283a 	ret
 c002408:	002d883a 	mov	r22,zero
 c00240c:	003ff206 	br	c0023d8 <_fwalk+0x80>

0c002410 <__smakebuf_r>:
 c002410:	2880030b 	ldhu	r2,12(r5)
 c002414:	deffed04 	addi	sp,sp,-76
 c002418:	dc401015 	stw	r17,64(sp)
 c00241c:	1080008c 	andi	r2,r2,2
 c002420:	dc000f15 	stw	r16,60(sp)
 c002424:	dfc01215 	stw	ra,72(sp)
 c002428:	dc801115 	stw	r18,68(sp)
 c00242c:	2821883a 	mov	r16,r5
 c002430:	2023883a 	mov	r17,r4
 c002434:	10000b26 	beq	r2,zero,c002464 <__smakebuf_r+0x54>
 c002438:	28c010c4 	addi	r3,r5,67
 c00243c:	00800044 	movi	r2,1
 c002440:	28800515 	stw	r2,20(r5)
 c002444:	28c00415 	stw	r3,16(r5)
 c002448:	28c00015 	stw	r3,0(r5)
 c00244c:	dfc01217 	ldw	ra,72(sp)
 c002450:	dc801117 	ldw	r18,68(sp)
 c002454:	dc401017 	ldw	r17,64(sp)
 c002458:	dc000f17 	ldw	r16,60(sp)
 c00245c:	dec01304 	addi	sp,sp,76
 c002460:	f800283a 	ret
 c002464:	2940038f 	ldh	r5,14(r5)
 c002468:	28002116 	blt	r5,zero,c0024f0 <__smakebuf_r+0xe0>
 c00246c:	d80d883a 	mov	r6,sp
 c002470:	c0029940 	call	c002994 <_fstat_r>
 c002474:	10001e16 	blt	r2,zero,c0024f0 <__smakebuf_r+0xe0>
 c002478:	d8800117 	ldw	r2,4(sp)
 c00247c:	00e00014 	movui	r3,32768
 c002480:	113c000c 	andi	r4,r2,61440
 c002484:	20c03126 	beq	r4,r3,c00254c <__smakebuf_r+0x13c>
 c002488:	8080030b 	ldhu	r2,12(r16)
 c00248c:	00c80004 	movi	r3,8192
 c002490:	10820014 	ori	r2,r2,2048
 c002494:	8080030d 	sth	r2,12(r16)
 c002498:	20c01e26 	beq	r4,r3,c002514 <__smakebuf_r+0x104>
 c00249c:	04810004 	movi	r18,1024
 c0024a0:	8809883a 	mov	r4,r17
 c0024a4:	900b883a 	mov	r5,r18
 c0024a8:	c0007e80 	call	c0007e8 <_malloc_r>
 c0024ac:	1009883a 	mov	r4,r2
 c0024b0:	10003126 	beq	r2,zero,c002578 <__smakebuf_r+0x168>
 c0024b4:	80c0030b 	ldhu	r3,12(r16)
 c0024b8:	00830034 	movhi	r2,3072
 c0024bc:	10872a04 	addi	r2,r2,7336
 c0024c0:	88800f15 	stw	r2,60(r17)
 c0024c4:	18c02014 	ori	r3,r3,128
 c0024c8:	84800515 	stw	r18,20(r16)
 c0024cc:	80c0030d 	sth	r3,12(r16)
 c0024d0:	81000415 	stw	r4,16(r16)
 c0024d4:	81000015 	stw	r4,0(r16)
 c0024d8:	dfc01217 	ldw	ra,72(sp)
 c0024dc:	dc801117 	ldw	r18,68(sp)
 c0024e0:	dc401017 	ldw	r17,64(sp)
 c0024e4:	dc000f17 	ldw	r16,60(sp)
 c0024e8:	dec01304 	addi	sp,sp,76
 c0024ec:	f800283a 	ret
 c0024f0:	80c0030b 	ldhu	r3,12(r16)
 c0024f4:	1880200c 	andi	r2,r3,128
 c0024f8:	10000426 	beq	r2,zero,c00250c <__smakebuf_r+0xfc>
 c0024fc:	04801004 	movi	r18,64
 c002500:	18820014 	ori	r2,r3,2048
 c002504:	8080030d 	sth	r2,12(r16)
 c002508:	003fe506 	br	c0024a0 <__smakebuf_r+0x90>
 c00250c:	04810004 	movi	r18,1024
 c002510:	003ffb06 	br	c002500 <__smakebuf_r+0xf0>
 c002514:	8140038f 	ldh	r5,14(r16)
 c002518:	8809883a 	mov	r4,r17
 c00251c:	c002a080 	call	c002a08 <_isatty_r>
 c002520:	103fde26 	beq	r2,zero,c00249c <__smakebuf_r+0x8c>
 c002524:	8080030b 	ldhu	r2,12(r16)
 c002528:	80c010c4 	addi	r3,r16,67
 c00252c:	04810004 	movi	r18,1024
 c002530:	10800054 	ori	r2,r2,1
 c002534:	8080030d 	sth	r2,12(r16)
 c002538:	00800044 	movi	r2,1
 c00253c:	80c00415 	stw	r3,16(r16)
 c002540:	80800515 	stw	r2,20(r16)
 c002544:	80c00015 	stw	r3,0(r16)
 c002548:	003fd506 	br	c0024a0 <__smakebuf_r+0x90>
 c00254c:	80c00a17 	ldw	r3,40(r16)
 c002550:	00830034 	movhi	r2,3072
 c002554:	10899104 	addi	r2,r2,9796
 c002558:	18bfcb1e 	bne	r3,r2,c002488 <__smakebuf_r+0x78>
 c00255c:	8080030b 	ldhu	r2,12(r16)
 c002560:	00c10004 	movi	r3,1024
 c002564:	1825883a 	mov	r18,r3
 c002568:	10c4b03a 	or	r2,r2,r3
 c00256c:	8080030d 	sth	r2,12(r16)
 c002570:	80c01315 	stw	r3,76(r16)
 c002574:	003fca06 	br	c0024a0 <__smakebuf_r+0x90>
 c002578:	8100030b 	ldhu	r4,12(r16)
 c00257c:	2080800c 	andi	r2,r4,512
 c002580:	103fb21e 	bne	r2,zero,c00244c <__smakebuf_r+0x3c>
 c002584:	80c010c4 	addi	r3,r16,67
 c002588:	21000094 	ori	r4,r4,2
 c00258c:	00800044 	movi	r2,1
 c002590:	80800515 	stw	r2,20(r16)
 c002594:	8100030d 	sth	r4,12(r16)
 c002598:	80c00415 	stw	r3,16(r16)
 c00259c:	80c00015 	stw	r3,0(r16)
 c0025a0:	003faa06 	br	c00244c <__smakebuf_r+0x3c>

0c0025a4 <memset>:
 c0025a4:	008000c4 	movi	r2,3
 c0025a8:	29403fcc 	andi	r5,r5,255
 c0025ac:	2007883a 	mov	r3,r4
 c0025b0:	1180022e 	bgeu	r2,r6,c0025bc <memset+0x18>
 c0025b4:	2084703a 	and	r2,r4,r2
 c0025b8:	10000826 	beq	r2,zero,c0025dc <memset+0x38>
 c0025bc:	30000526 	beq	r6,zero,c0025d4 <memset+0x30>
 c0025c0:	2805883a 	mov	r2,r5
 c0025c4:	30cd883a 	add	r6,r6,r3
 c0025c8:	18800005 	stb	r2,0(r3)
 c0025cc:	18c00044 	addi	r3,r3,1
 c0025d0:	19bffd1e 	bne	r3,r6,c0025c8 <memset+0x24>
 c0025d4:	2005883a 	mov	r2,r4
 c0025d8:	f800283a 	ret
 c0025dc:	2804923a 	slli	r2,r5,8
 c0025e0:	020003c4 	movi	r8,15
 c0025e4:	200f883a 	mov	r7,r4
 c0025e8:	2884b03a 	or	r2,r5,r2
 c0025ec:	1006943a 	slli	r3,r2,16
 c0025f0:	10c6b03a 	or	r3,r2,r3
 c0025f4:	41800a2e 	bgeu	r8,r6,c002620 <memset+0x7c>
 c0025f8:	4005883a 	mov	r2,r8
 c0025fc:	31bffc04 	addi	r6,r6,-16
 c002600:	38c00015 	stw	r3,0(r7)
 c002604:	38c00115 	stw	r3,4(r7)
 c002608:	38c00215 	stw	r3,8(r7)
 c00260c:	38c00315 	stw	r3,12(r7)
 c002610:	39c00404 	addi	r7,r7,16
 c002614:	11bff936 	bltu	r2,r6,c0025fc <memset+0x58>
 c002618:	008000c4 	movi	r2,3
 c00261c:	1180052e 	bgeu	r2,r6,c002634 <memset+0x90>
 c002620:	31bfff04 	addi	r6,r6,-4
 c002624:	008000c4 	movi	r2,3
 c002628:	38c00015 	stw	r3,0(r7)
 c00262c:	39c00104 	addi	r7,r7,4
 c002630:	11bffb36 	bltu	r2,r6,c002620 <memset+0x7c>
 c002634:	3807883a 	mov	r3,r7
 c002638:	003fe006 	br	c0025bc <memset+0x18>

0c00263c <__sclose>:
 c00263c:	2940038f 	ldh	r5,14(r5)
 c002640:	c0028001 	jmpi	c002800 <_close_r>

0c002644 <__sseek>:
 c002644:	defffe04 	addi	sp,sp,-8
 c002648:	dc000015 	stw	r16,0(sp)
 c00264c:	2821883a 	mov	r16,r5
 c002650:	2940038f 	ldh	r5,14(r5)
 c002654:	dfc00115 	stw	ra,4(sp)
 c002658:	c002a780 	call	c002a78 <_lseek_r>
 c00265c:	1007883a 	mov	r3,r2
 c002660:	00bfffc4 	movi	r2,-1
 c002664:	18800926 	beq	r3,r2,c00268c <__sseek+0x48>
 c002668:	8080030b 	ldhu	r2,12(r16)
 c00266c:	80c01415 	stw	r3,80(r16)
 c002670:	10840014 	ori	r2,r2,4096
 c002674:	8080030d 	sth	r2,12(r16)
 c002678:	1805883a 	mov	r2,r3
 c00267c:	dfc00117 	ldw	ra,4(sp)
 c002680:	dc000017 	ldw	r16,0(sp)
 c002684:	dec00204 	addi	sp,sp,8
 c002688:	f800283a 	ret
 c00268c:	8080030b 	ldhu	r2,12(r16)
 c002690:	10bbffcc 	andi	r2,r2,61439
 c002694:	8080030d 	sth	r2,12(r16)
 c002698:	1805883a 	mov	r2,r3
 c00269c:	dfc00117 	ldw	ra,4(sp)
 c0026a0:	dc000017 	ldw	r16,0(sp)
 c0026a4:	dec00204 	addi	sp,sp,8
 c0026a8:	f800283a 	ret

0c0026ac <__swrite>:
 c0026ac:	2880030b 	ldhu	r2,12(r5)
 c0026b0:	defffb04 	addi	sp,sp,-20
 c0026b4:	dcc00315 	stw	r19,12(sp)
 c0026b8:	1080400c 	andi	r2,r2,256
 c0026bc:	dc800215 	stw	r18,8(sp)
 c0026c0:	dc400115 	stw	r17,4(sp)
 c0026c4:	dc000015 	stw	r16,0(sp)
 c0026c8:	3027883a 	mov	r19,r6
 c0026cc:	3825883a 	mov	r18,r7
 c0026d0:	dfc00415 	stw	ra,16(sp)
 c0026d4:	2821883a 	mov	r16,r5
 c0026d8:	000d883a 	mov	r6,zero
 c0026dc:	01c00084 	movi	r7,2
 c0026e0:	2023883a 	mov	r17,r4
 c0026e4:	10000226 	beq	r2,zero,c0026f0 <__swrite+0x44>
 c0026e8:	2940038f 	ldh	r5,14(r5)
 c0026ec:	c002a780 	call	c002a78 <_lseek_r>
 c0026f0:	8080030b 	ldhu	r2,12(r16)
 c0026f4:	8140038f 	ldh	r5,14(r16)
 c0026f8:	8809883a 	mov	r4,r17
 c0026fc:	10bbffcc 	andi	r2,r2,61439
 c002700:	980d883a 	mov	r6,r19
 c002704:	900f883a 	mov	r7,r18
 c002708:	8080030d 	sth	r2,12(r16)
 c00270c:	dfc00417 	ldw	ra,16(sp)
 c002710:	dcc00317 	ldw	r19,12(sp)
 c002714:	dc800217 	ldw	r18,8(sp)
 c002718:	dc400117 	ldw	r17,4(sp)
 c00271c:	dc000017 	ldw	r16,0(sp)
 c002720:	dec00504 	addi	sp,sp,20
 c002724:	c0027881 	jmpi	c002788 <_write_r>

0c002728 <__sread>:
 c002728:	defffe04 	addi	sp,sp,-8
 c00272c:	dc000015 	stw	r16,0(sp)
 c002730:	2821883a 	mov	r16,r5
 c002734:	2940038f 	ldh	r5,14(r5)
 c002738:	dfc00115 	stw	ra,4(sp)
 c00273c:	c002af00 	call	c002af0 <_read_r>
 c002740:	1007883a 	mov	r3,r2
 c002744:	10000816 	blt	r2,zero,c002768 <__sread+0x40>
 c002748:	80801417 	ldw	r2,80(r16)
 c00274c:	10c5883a 	add	r2,r2,r3
 c002750:	80801415 	stw	r2,80(r16)
 c002754:	1805883a 	mov	r2,r3
 c002758:	dfc00117 	ldw	ra,4(sp)
 c00275c:	dc000017 	ldw	r16,0(sp)
 c002760:	dec00204 	addi	sp,sp,8
 c002764:	f800283a 	ret
 c002768:	8080030b 	ldhu	r2,12(r16)
 c00276c:	10bbffcc 	andi	r2,r2,61439
 c002770:	8080030d 	sth	r2,12(r16)
 c002774:	1805883a 	mov	r2,r3
 c002778:	dfc00117 	ldw	ra,4(sp)
 c00277c:	dc000017 	ldw	r16,0(sp)
 c002780:	dec00204 	addi	sp,sp,8
 c002784:	f800283a 	ret

0c002788 <_write_r>:
 c002788:	defffd04 	addi	sp,sp,-12
 c00278c:	dc000015 	stw	r16,0(sp)
 c002790:	04030074 	movhi	r16,3073
 c002794:	842aef04 	addi	r16,r16,-21572
 c002798:	dc400115 	stw	r17,4(sp)
 c00279c:	80000015 	stw	zero,0(r16)
 c0027a0:	2023883a 	mov	r17,r4
 c0027a4:	2809883a 	mov	r4,r5
 c0027a8:	300b883a 	mov	r5,r6
 c0027ac:	380d883a 	mov	r6,r7
 c0027b0:	dfc00215 	stw	ra,8(sp)
 c0027b4:	c00352c0 	call	c00352c <write>
 c0027b8:	1007883a 	mov	r3,r2
 c0027bc:	00bfffc4 	movi	r2,-1
 c0027c0:	18800626 	beq	r3,r2,c0027dc <_write_r+0x54>
 c0027c4:	1805883a 	mov	r2,r3
 c0027c8:	dfc00217 	ldw	ra,8(sp)
 c0027cc:	dc400117 	ldw	r17,4(sp)
 c0027d0:	dc000017 	ldw	r16,0(sp)
 c0027d4:	dec00304 	addi	sp,sp,12
 c0027d8:	f800283a 	ret
 c0027dc:	80800017 	ldw	r2,0(r16)
 c0027e0:	103ff826 	beq	r2,zero,c0027c4 <_write_r+0x3c>
 c0027e4:	88800015 	stw	r2,0(r17)
 c0027e8:	1805883a 	mov	r2,r3
 c0027ec:	dfc00217 	ldw	ra,8(sp)
 c0027f0:	dc400117 	ldw	r17,4(sp)
 c0027f4:	dc000017 	ldw	r16,0(sp)
 c0027f8:	dec00304 	addi	sp,sp,12
 c0027fc:	f800283a 	ret

0c002800 <_close_r>:
 c002800:	defffd04 	addi	sp,sp,-12
 c002804:	dc000015 	stw	r16,0(sp)
 c002808:	04030074 	movhi	r16,3073
 c00280c:	842aef04 	addi	r16,r16,-21572
 c002810:	dc400115 	stw	r17,4(sp)
 c002814:	80000015 	stw	zero,0(r16)
 c002818:	2023883a 	mov	r17,r4
 c00281c:	2809883a 	mov	r4,r5
 c002820:	dfc00215 	stw	ra,8(sp)
 c002824:	c002ba00 	call	c002ba0 <close>
 c002828:	1007883a 	mov	r3,r2
 c00282c:	00bfffc4 	movi	r2,-1
 c002830:	18800626 	beq	r3,r2,c00284c <_close_r+0x4c>
 c002834:	1805883a 	mov	r2,r3
 c002838:	dfc00217 	ldw	ra,8(sp)
 c00283c:	dc400117 	ldw	r17,4(sp)
 c002840:	dc000017 	ldw	r16,0(sp)
 c002844:	dec00304 	addi	sp,sp,12
 c002848:	f800283a 	ret
 c00284c:	80800017 	ldw	r2,0(r16)
 c002850:	103ff826 	beq	r2,zero,c002834 <_close_r+0x34>
 c002854:	88800015 	stw	r2,0(r17)
 c002858:	1805883a 	mov	r2,r3
 c00285c:	dfc00217 	ldw	ra,8(sp)
 c002860:	dc400117 	ldw	r17,4(sp)
 c002864:	dc000017 	ldw	r16,0(sp)
 c002868:	dec00304 	addi	sp,sp,12
 c00286c:	f800283a 	ret

0c002870 <_fclose_r>:
 c002870:	defffc04 	addi	sp,sp,-16
 c002874:	dc400115 	stw	r17,4(sp)
 c002878:	dc000015 	stw	r16,0(sp)
 c00287c:	dfc00315 	stw	ra,12(sp)
 c002880:	dc800215 	stw	r18,8(sp)
 c002884:	2821883a 	mov	r16,r5
 c002888:	2023883a 	mov	r17,r4
 c00288c:	28002926 	beq	r5,zero,c002934 <_fclose_r+0xc4>
 c002890:	c001bb40 	call	c001bb4 <__sfp_lock_acquire>
 c002894:	88000226 	beq	r17,zero,c0028a0 <_fclose_r+0x30>
 c002898:	88800e17 	ldw	r2,56(r17)
 c00289c:	10002d26 	beq	r2,zero,c002954 <_fclose_r+0xe4>
 c0028a0:	8080030f 	ldh	r2,12(r16)
 c0028a4:	10002226 	beq	r2,zero,c002930 <_fclose_r+0xc0>
 c0028a8:	8809883a 	mov	r4,r17
 c0028ac:	800b883a 	mov	r5,r16
 c0028b0:	c00192c0 	call	c00192c <_fflush_r>
 c0028b4:	1025883a 	mov	r18,r2
 c0028b8:	80800b17 	ldw	r2,44(r16)
 c0028bc:	10000426 	beq	r2,zero,c0028d0 <_fclose_r+0x60>
 c0028c0:	81400717 	ldw	r5,28(r16)
 c0028c4:	8809883a 	mov	r4,r17
 c0028c8:	103ee83a 	callr	r2
 c0028cc:	10002a16 	blt	r2,zero,c002978 <_fclose_r+0x108>
 c0028d0:	8080030b 	ldhu	r2,12(r16)
 c0028d4:	1080200c 	andi	r2,r2,128
 c0028d8:	1000231e 	bne	r2,zero,c002968 <_fclose_r+0xf8>
 c0028dc:	81400c17 	ldw	r5,48(r16)
 c0028e0:	28000526 	beq	r5,zero,c0028f8 <_fclose_r+0x88>
 c0028e4:	80801004 	addi	r2,r16,64
 c0028e8:	28800226 	beq	r5,r2,c0028f4 <_fclose_r+0x84>
 c0028ec:	8809883a 	mov	r4,r17
 c0028f0:	c001f7c0 	call	c001f7c <_free_r>
 c0028f4:	80000c15 	stw	zero,48(r16)
 c0028f8:	81401117 	ldw	r5,68(r16)
 c0028fc:	28000326 	beq	r5,zero,c00290c <_fclose_r+0x9c>
 c002900:	8809883a 	mov	r4,r17
 c002904:	c001f7c0 	call	c001f7c <_free_r>
 c002908:	80001115 	stw	zero,68(r16)
 c00290c:	8000030d 	sth	zero,12(r16)
 c002910:	c001bb80 	call	c001bb8 <__sfp_lock_release>
 c002914:	9005883a 	mov	r2,r18
 c002918:	dfc00317 	ldw	ra,12(sp)
 c00291c:	dc800217 	ldw	r18,8(sp)
 c002920:	dc400117 	ldw	r17,4(sp)
 c002924:	dc000017 	ldw	r16,0(sp)
 c002928:	dec00404 	addi	sp,sp,16
 c00292c:	f800283a 	ret
 c002930:	c001bb80 	call	c001bb8 <__sfp_lock_release>
 c002934:	0025883a 	mov	r18,zero
 c002938:	9005883a 	mov	r2,r18
 c00293c:	dfc00317 	ldw	ra,12(sp)
 c002940:	dc800217 	ldw	r18,8(sp)
 c002944:	dc400117 	ldw	r17,4(sp)
 c002948:	dc000017 	ldw	r16,0(sp)
 c00294c:	dec00404 	addi	sp,sp,16
 c002950:	f800283a 	ret
 c002954:	8809883a 	mov	r4,r17
 c002958:	c001bc40 	call	c001bc4 <__sinit>
 c00295c:	8080030f 	ldh	r2,12(r16)
 c002960:	103fd11e 	bne	r2,zero,c0028a8 <_fclose_r+0x38>
 c002964:	003ff206 	br	c002930 <_fclose_r+0xc0>
 c002968:	81400417 	ldw	r5,16(r16)
 c00296c:	8809883a 	mov	r4,r17
 c002970:	c001f7c0 	call	c001f7c <_free_r>
 c002974:	003fd906 	br	c0028dc <_fclose_r+0x6c>
 c002978:	04bfffc4 	movi	r18,-1
 c00297c:	003fd406 	br	c0028d0 <_fclose_r+0x60>

0c002980 <fclose>:
 c002980:	00830074 	movhi	r2,3073
 c002984:	10a3e504 	addi	r2,r2,-28780
 c002988:	200b883a 	mov	r5,r4
 c00298c:	11000017 	ldw	r4,0(r2)
 c002990:	c0028701 	jmpi	c002870 <_fclose_r>

0c002994 <_fstat_r>:
 c002994:	defffd04 	addi	sp,sp,-12
 c002998:	dc000015 	stw	r16,0(sp)
 c00299c:	04030074 	movhi	r16,3073
 c0029a0:	842aef04 	addi	r16,r16,-21572
 c0029a4:	dc400115 	stw	r17,4(sp)
 c0029a8:	80000015 	stw	zero,0(r16)
 c0029ac:	2023883a 	mov	r17,r4
 c0029b0:	2809883a 	mov	r4,r5
 c0029b4:	300b883a 	mov	r5,r6
 c0029b8:	dfc00215 	stw	ra,8(sp)
 c0029bc:	c002d2c0 	call	c002d2c <fstat>
 c0029c0:	1007883a 	mov	r3,r2
 c0029c4:	00bfffc4 	movi	r2,-1
 c0029c8:	18800626 	beq	r3,r2,c0029e4 <_fstat_r+0x50>
 c0029cc:	1805883a 	mov	r2,r3
 c0029d0:	dfc00217 	ldw	ra,8(sp)
 c0029d4:	dc400117 	ldw	r17,4(sp)
 c0029d8:	dc000017 	ldw	r16,0(sp)
 c0029dc:	dec00304 	addi	sp,sp,12
 c0029e0:	f800283a 	ret
 c0029e4:	80800017 	ldw	r2,0(r16)
 c0029e8:	103ff826 	beq	r2,zero,c0029cc <_fstat_r+0x38>
 c0029ec:	88800015 	stw	r2,0(r17)
 c0029f0:	1805883a 	mov	r2,r3
 c0029f4:	dfc00217 	ldw	ra,8(sp)
 c0029f8:	dc400117 	ldw	r17,4(sp)
 c0029fc:	dc000017 	ldw	r16,0(sp)
 c002a00:	dec00304 	addi	sp,sp,12
 c002a04:	f800283a 	ret

0c002a08 <_isatty_r>:
 c002a08:	defffd04 	addi	sp,sp,-12
 c002a0c:	dc000015 	stw	r16,0(sp)
 c002a10:	04030074 	movhi	r16,3073
 c002a14:	842aef04 	addi	r16,r16,-21572
 c002a18:	dc400115 	stw	r17,4(sp)
 c002a1c:	80000015 	stw	zero,0(r16)
 c002a20:	2023883a 	mov	r17,r4
 c002a24:	2809883a 	mov	r4,r5
 c002a28:	dfc00215 	stw	ra,8(sp)
 c002a2c:	c002e640 	call	c002e64 <isatty>
 c002a30:	1007883a 	mov	r3,r2
 c002a34:	00bfffc4 	movi	r2,-1
 c002a38:	18800626 	beq	r3,r2,c002a54 <_isatty_r+0x4c>
 c002a3c:	1805883a 	mov	r2,r3
 c002a40:	dfc00217 	ldw	ra,8(sp)
 c002a44:	dc400117 	ldw	r17,4(sp)
 c002a48:	dc000017 	ldw	r16,0(sp)
 c002a4c:	dec00304 	addi	sp,sp,12
 c002a50:	f800283a 	ret
 c002a54:	80800017 	ldw	r2,0(r16)
 c002a58:	103ff826 	beq	r2,zero,c002a3c <_isatty_r+0x34>
 c002a5c:	88800015 	stw	r2,0(r17)
 c002a60:	1805883a 	mov	r2,r3
 c002a64:	dfc00217 	ldw	ra,8(sp)
 c002a68:	dc400117 	ldw	r17,4(sp)
 c002a6c:	dc000017 	ldw	r16,0(sp)
 c002a70:	dec00304 	addi	sp,sp,12
 c002a74:	f800283a 	ret

0c002a78 <_lseek_r>:
 c002a78:	defffd04 	addi	sp,sp,-12
 c002a7c:	dc000015 	stw	r16,0(sp)
 c002a80:	04030074 	movhi	r16,3073
 c002a84:	842aef04 	addi	r16,r16,-21572
 c002a88:	dc400115 	stw	r17,4(sp)
 c002a8c:	80000015 	stw	zero,0(r16)
 c002a90:	2023883a 	mov	r17,r4
 c002a94:	2809883a 	mov	r4,r5
 c002a98:	300b883a 	mov	r5,r6
 c002a9c:	380d883a 	mov	r6,r7
 c002aa0:	dfc00215 	stw	ra,8(sp)
 c002aa4:	c0030740 	call	c003074 <lseek>
 c002aa8:	1007883a 	mov	r3,r2
 c002aac:	00bfffc4 	movi	r2,-1
 c002ab0:	18800626 	beq	r3,r2,c002acc <_lseek_r+0x54>
 c002ab4:	1805883a 	mov	r2,r3
 c002ab8:	dfc00217 	ldw	ra,8(sp)
 c002abc:	dc400117 	ldw	r17,4(sp)
 c002ac0:	dc000017 	ldw	r16,0(sp)
 c002ac4:	dec00304 	addi	sp,sp,12
 c002ac8:	f800283a 	ret
 c002acc:	80800017 	ldw	r2,0(r16)
 c002ad0:	103ff826 	beq	r2,zero,c002ab4 <_lseek_r+0x3c>
 c002ad4:	88800015 	stw	r2,0(r17)
 c002ad8:	1805883a 	mov	r2,r3
 c002adc:	dfc00217 	ldw	ra,8(sp)
 c002ae0:	dc400117 	ldw	r17,4(sp)
 c002ae4:	dc000017 	ldw	r16,0(sp)
 c002ae8:	dec00304 	addi	sp,sp,12
 c002aec:	f800283a 	ret

0c002af0 <_read_r>:
 c002af0:	defffd04 	addi	sp,sp,-12
 c002af4:	dc000015 	stw	r16,0(sp)
 c002af8:	04030074 	movhi	r16,3073
 c002afc:	842aef04 	addi	r16,r16,-21572
 c002b00:	dc400115 	stw	r17,4(sp)
 c002b04:	80000015 	stw	zero,0(r16)
 c002b08:	2023883a 	mov	r17,r4
 c002b0c:	2809883a 	mov	r4,r5
 c002b10:	300b883a 	mov	r5,r6
 c002b14:	380d883a 	mov	r6,r7
 c002b18:	dfc00215 	stw	ra,8(sp)
 c002b1c:	c0032740 	call	c003274 <read>
 c002b20:	1007883a 	mov	r3,r2
 c002b24:	00bfffc4 	movi	r2,-1
 c002b28:	18800626 	beq	r3,r2,c002b44 <_read_r+0x54>
 c002b2c:	1805883a 	mov	r2,r3
 c002b30:	dfc00217 	ldw	ra,8(sp)
 c002b34:	dc400117 	ldw	r17,4(sp)
 c002b38:	dc000017 	ldw	r16,0(sp)
 c002b3c:	dec00304 	addi	sp,sp,12
 c002b40:	f800283a 	ret
 c002b44:	80800017 	ldw	r2,0(r16)
 c002b48:	103ff826 	beq	r2,zero,c002b2c <_read_r+0x3c>
 c002b4c:	88800015 	stw	r2,0(r17)
 c002b50:	1805883a 	mov	r2,r3
 c002b54:	dfc00217 	ldw	ra,8(sp)
 c002b58:	dc400117 	ldw	r17,4(sp)
 c002b5c:	dc000017 	ldw	r16,0(sp)
 c002b60:	dec00304 	addi	sp,sp,12
 c002b64:	f800283a 	ret

0c002b68 <__mulsi3>:
 c002b68:	20000a26 	beq	r4,zero,c002b94 <__mulsi3+0x2c>
 c002b6c:	0007883a 	mov	r3,zero
 c002b70:	2080004c 	andi	r2,r4,1
 c002b74:	1005003a 	cmpeq	r2,r2,zero
 c002b78:	2008d07a 	srli	r4,r4,1
 c002b7c:	1000011e 	bne	r2,zero,c002b84 <__mulsi3+0x1c>
 c002b80:	1947883a 	add	r3,r3,r5
 c002b84:	294b883a 	add	r5,r5,r5
 c002b88:	203ff91e 	bne	r4,zero,c002b70 <__mulsi3+0x8>
 c002b8c:	1805883a 	mov	r2,r3
 c002b90:	f800283a 	ret
 c002b94:	0007883a 	mov	r3,zero
 c002b98:	1805883a 	mov	r2,r3
 c002b9c:	f800283a 	ret

0c002ba0 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
 c002ba0:	defff804 	addi	sp,sp,-32
 c002ba4:	dfc00715 	stw	ra,28(sp)
 c002ba8:	df000615 	stw	fp,24(sp)
 c002bac:	df000604 	addi	fp,sp,24
 c002bb0:	e13ffc15 	stw	r4,-16(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
 c002bb4:	e0bffc17 	ldw	r2,-16(fp)
 c002bb8:	1004803a 	cmplt	r2,r2,zero
 c002bbc:	1000091e 	bne	r2,zero,c002be4 <close+0x44>
 c002bc0:	e13ffc17 	ldw	r4,-16(fp)
 c002bc4:	01400304 	movi	r5,12
 c002bc8:	c002b680 	call	c002b68 <__mulsi3>
 c002bcc:	1007883a 	mov	r3,r2
 c002bd0:	00830034 	movhi	r2,3072
 c002bd4:	109f0a04 	addi	r2,r2,31784
 c002bd8:	1887883a 	add	r3,r3,r2
 c002bdc:	e0ffff15 	stw	r3,-4(fp)
 c002be0:	00000106 	br	c002be8 <close+0x48>
 c002be4:	e03fff15 	stw	zero,-4(fp)
 c002be8:	e0bfff17 	ldw	r2,-4(fp)
 c002bec:	e0bffb15 	stw	r2,-20(fp)

  if (fd)
 c002bf0:	e0bffb17 	ldw	r2,-20(fp)
 c002bf4:	1005003a 	cmpeq	r2,r2,zero
 c002bf8:	10001d1e 	bne	r2,zero,c002c70 <close+0xd0>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
 c002bfc:	e0bffb17 	ldw	r2,-20(fp)
 c002c00:	10800017 	ldw	r2,0(r2)
 c002c04:	10800417 	ldw	r2,16(r2)
 c002c08:	1005003a 	cmpeq	r2,r2,zero
 c002c0c:	1000071e 	bne	r2,zero,c002c2c <close+0x8c>
 c002c10:	e0bffb17 	ldw	r2,-20(fp)
 c002c14:	10800017 	ldw	r2,0(r2)
 c002c18:	10800417 	ldw	r2,16(r2)
 c002c1c:	e13ffb17 	ldw	r4,-20(fp)
 c002c20:	103ee83a 	callr	r2
 c002c24:	e0bffe15 	stw	r2,-8(fp)
 c002c28:	00000106 	br	c002c30 <close+0x90>
 c002c2c:	e03ffe15 	stw	zero,-8(fp)
 c002c30:	e0bffe17 	ldw	r2,-8(fp)
 c002c34:	e0bffa15 	stw	r2,-24(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
 c002c38:	e13ffc17 	ldw	r4,-16(fp)
 c002c3c:	c0033f80 	call	c0033f8 <alt_release_fd>
    if (rval < 0)
 c002c40:	e0bffa17 	ldw	r2,-24(fp)
 c002c44:	1004403a 	cmpge	r2,r2,zero
 c002c48:	1000071e 	bne	r2,zero,c002c68 <close+0xc8>
    {
      ALT_ERRNO = -rval;
 c002c4c:	c002ca00 	call	c002ca0 <alt_get_errno>
 c002c50:	e0fffa17 	ldw	r3,-24(fp)
 c002c54:	00c7c83a 	sub	r3,zero,r3
 c002c58:	10c00015 	stw	r3,0(r2)
      return -1;
 c002c5c:	00bfffc4 	movi	r2,-1
 c002c60:	e0bffd15 	stw	r2,-12(fp)
 c002c64:	00000806 	br	c002c88 <close+0xe8>
    }
    return 0;
 c002c68:	e03ffd15 	stw	zero,-12(fp)
 c002c6c:	00000606 	br	c002c88 <close+0xe8>
  }
  else
  {
    ALT_ERRNO = EBADFD;
 c002c70:	c002ca00 	call	c002ca0 <alt_get_errno>
 c002c74:	1007883a 	mov	r3,r2
 c002c78:	00801444 	movi	r2,81
 c002c7c:	18800015 	stw	r2,0(r3)
    return -1;
 c002c80:	00bfffc4 	movi	r2,-1
 c002c84:	e0bffd15 	stw	r2,-12(fp)
 c002c88:	e0bffd17 	ldw	r2,-12(fp)
  }
}
 c002c8c:	e037883a 	mov	sp,fp
 c002c90:	dfc00117 	ldw	ra,4(sp)
 c002c94:	df000017 	ldw	fp,0(sp)
 c002c98:	dec00204 	addi	sp,sp,8
 c002c9c:	f800283a 	ret

0c002ca0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 c002ca0:	defffd04 	addi	sp,sp,-12
 c002ca4:	dfc00215 	stw	ra,8(sp)
 c002ca8:	df000115 	stw	fp,4(sp)
 c002cac:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
 c002cb0:	00830074 	movhi	r2,3073
 c002cb4:	10a3ee04 	addi	r2,r2,-28744
 c002cb8:	10800017 	ldw	r2,0(r2)
 c002cbc:	1005003a 	cmpeq	r2,r2,zero
 c002cc0:	1000061e 	bne	r2,zero,c002cdc <alt_get_errno+0x3c>
 c002cc4:	00830074 	movhi	r2,3073
 c002cc8:	10a3ee04 	addi	r2,r2,-28744
 c002ccc:	10800017 	ldw	r2,0(r2)
 c002cd0:	103ee83a 	callr	r2
 c002cd4:	e0bfff15 	stw	r2,-4(fp)
 c002cd8:	00000306 	br	c002ce8 <alt_get_errno+0x48>
 c002cdc:	00830074 	movhi	r2,3073
 c002ce0:	10aaef04 	addi	r2,r2,-21572
 c002ce4:	e0bfff15 	stw	r2,-4(fp)
 c002ce8:	e0bfff17 	ldw	r2,-4(fp)
}
 c002cec:	e037883a 	mov	sp,fp
 c002cf0:	dfc00117 	ldw	ra,4(sp)
 c002cf4:	df000017 	ldw	fp,0(sp)
 c002cf8:	dec00204 	addi	sp,sp,8
 c002cfc:	f800283a 	ret

0c002d00 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
 c002d00:	defffc04 	addi	sp,sp,-16
 c002d04:	df000315 	stw	fp,12(sp)
 c002d08:	df000304 	addi	fp,sp,12
 c002d0c:	e13ffd15 	stw	r4,-12(fp)
 c002d10:	e17ffe15 	stw	r5,-8(fp)
 c002d14:	e1bfff15 	stw	r6,-4(fp)
  return len;
 c002d18:	e0bfff17 	ldw	r2,-4(fp)
}
 c002d1c:	e037883a 	mov	sp,fp
 c002d20:	df000017 	ldw	fp,0(sp)
 c002d24:	dec00104 	addi	sp,sp,4
 c002d28:	f800283a 	ret

0c002d2c <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
 c002d2c:	defff904 	addi	sp,sp,-28
 c002d30:	dfc00615 	stw	ra,24(sp)
 c002d34:	df000515 	stw	fp,20(sp)
 c002d38:	df000504 	addi	fp,sp,20
 c002d3c:	e13ffc15 	stw	r4,-16(fp)
 c002d40:	e17ffd15 	stw	r5,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 c002d44:	e0bffc17 	ldw	r2,-16(fp)
 c002d48:	1004803a 	cmplt	r2,r2,zero
 c002d4c:	1000091e 	bne	r2,zero,c002d74 <fstat+0x48>
 c002d50:	e13ffc17 	ldw	r4,-16(fp)
 c002d54:	01400304 	movi	r5,12
 c002d58:	c002b680 	call	c002b68 <__mulsi3>
 c002d5c:	1007883a 	mov	r3,r2
 c002d60:	00830034 	movhi	r2,3072
 c002d64:	109f0a04 	addi	r2,r2,31784
 c002d68:	1887883a 	add	r3,r3,r2
 c002d6c:	e0ffff15 	stw	r3,-4(fp)
 c002d70:	00000106 	br	c002d78 <fstat+0x4c>
 c002d74:	e03fff15 	stw	zero,-4(fp)
 c002d78:	e0bfff17 	ldw	r2,-4(fp)
 c002d7c:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
 c002d80:	e0bffb17 	ldw	r2,-20(fp)
 c002d84:	1005003a 	cmpeq	r2,r2,zero
 c002d88:	1000121e 	bne	r2,zero,c002dd4 <fstat+0xa8>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
 c002d8c:	e0bffb17 	ldw	r2,-20(fp)
 c002d90:	10800017 	ldw	r2,0(r2)
 c002d94:	10800817 	ldw	r2,32(r2)
 c002d98:	1005003a 	cmpeq	r2,r2,zero
 c002d9c:	1000081e 	bne	r2,zero,c002dc0 <fstat+0x94>
    {
      return fd->dev->fstat(fd, st);
 c002da0:	e0bffb17 	ldw	r2,-20(fp)
 c002da4:	10800017 	ldw	r2,0(r2)
 c002da8:	10800817 	ldw	r2,32(r2)
 c002dac:	e13ffb17 	ldw	r4,-20(fp)
 c002db0:	e17ffd17 	ldw	r5,-12(fp)
 c002db4:	103ee83a 	callr	r2
 c002db8:	e0bffe15 	stw	r2,-8(fp)
 c002dbc:	00000b06 	br	c002dec <fstat+0xc0>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
 c002dc0:	e0fffd17 	ldw	r3,-12(fp)
 c002dc4:	00880004 	movi	r2,8192
 c002dc8:	18800115 	stw	r2,4(r3)
      return 0;
 c002dcc:	e03ffe15 	stw	zero,-8(fp)
 c002dd0:	00000606 	br	c002dec <fstat+0xc0>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
 c002dd4:	c002e040 	call	c002e04 <alt_get_errno>
 c002dd8:	1007883a 	mov	r3,r2
 c002ddc:	00801444 	movi	r2,81
 c002de0:	18800015 	stw	r2,0(r3)
    return -1;
 c002de4:	00bfffc4 	movi	r2,-1
 c002de8:	e0bffe15 	stw	r2,-8(fp)
 c002dec:	e0bffe17 	ldw	r2,-8(fp)
  }
}
 c002df0:	e037883a 	mov	sp,fp
 c002df4:	dfc00117 	ldw	ra,4(sp)
 c002df8:	df000017 	ldw	fp,0(sp)
 c002dfc:	dec00204 	addi	sp,sp,8
 c002e00:	f800283a 	ret

0c002e04 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 c002e04:	defffd04 	addi	sp,sp,-12
 c002e08:	dfc00215 	stw	ra,8(sp)
 c002e0c:	df000115 	stw	fp,4(sp)
 c002e10:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
 c002e14:	00830074 	movhi	r2,3073
 c002e18:	10a3ee04 	addi	r2,r2,-28744
 c002e1c:	10800017 	ldw	r2,0(r2)
 c002e20:	1005003a 	cmpeq	r2,r2,zero
 c002e24:	1000061e 	bne	r2,zero,c002e40 <alt_get_errno+0x3c>
 c002e28:	00830074 	movhi	r2,3073
 c002e2c:	10a3ee04 	addi	r2,r2,-28744
 c002e30:	10800017 	ldw	r2,0(r2)
 c002e34:	103ee83a 	callr	r2
 c002e38:	e0bfff15 	stw	r2,-4(fp)
 c002e3c:	00000306 	br	c002e4c <alt_get_errno+0x48>
 c002e40:	00830074 	movhi	r2,3073
 c002e44:	10aaef04 	addi	r2,r2,-21572
 c002e48:	e0bfff15 	stw	r2,-4(fp)
 c002e4c:	e0bfff17 	ldw	r2,-4(fp)
}
 c002e50:	e037883a 	mov	sp,fp
 c002e54:	dfc00117 	ldw	ra,4(sp)
 c002e58:	df000017 	ldw	fp,0(sp)
 c002e5c:	dec00204 	addi	sp,sp,8
 c002e60:	f800283a 	ret

0c002e64 <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
 c002e64:	deffeb04 	addi	sp,sp,-84
 c002e68:	dfc01415 	stw	ra,80(sp)
 c002e6c:	df001315 	stw	fp,76(sp)
 c002e70:	df001304 	addi	fp,sp,76
 c002e74:	e13ffd15 	stw	r4,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 c002e78:	e0bffd17 	ldw	r2,-12(fp)
 c002e7c:	1004803a 	cmplt	r2,r2,zero
 c002e80:	1000091e 	bne	r2,zero,c002ea8 <isatty+0x44>
 c002e84:	e13ffd17 	ldw	r4,-12(fp)
 c002e88:	01400304 	movi	r5,12
 c002e8c:	c002b680 	call	c002b68 <__mulsi3>
 c002e90:	1007883a 	mov	r3,r2
 c002e94:	00830034 	movhi	r2,3072
 c002e98:	109f0a04 	addi	r2,r2,31784
 c002e9c:	1887883a 	add	r3,r3,r2
 c002ea0:	e0ffff15 	stw	r3,-4(fp)
 c002ea4:	00000106 	br	c002eac <isatty+0x48>
 c002ea8:	e03fff15 	stw	zero,-4(fp)
 c002eac:	e0bfff17 	ldw	r2,-4(fp)
 c002eb0:	e0bfed15 	stw	r2,-76(fp)
  
  if (fd)
 c002eb4:	e0bfed17 	ldw	r2,-76(fp)
 c002eb8:	1005003a 	cmpeq	r2,r2,zero
 c002ebc:	10000f1e 	bne	r2,zero,c002efc <isatty+0x98>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
 c002ec0:	e0bfed17 	ldw	r2,-76(fp)
 c002ec4:	10800017 	ldw	r2,0(r2)
 c002ec8:	10800817 	ldw	r2,32(r2)
 c002ecc:	1004c03a 	cmpne	r2,r2,zero
 c002ed0:	1000031e 	bne	r2,zero,c002ee0 <isatty+0x7c>
    {
      return 1;
 c002ed4:	00800044 	movi	r2,1
 c002ed8:	e0bffe15 	stw	r2,-8(fp)
 c002edc:	00000c06 	br	c002f10 <isatty+0xac>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
 c002ee0:	e17fee04 	addi	r5,fp,-72
 c002ee4:	e13ffd17 	ldw	r4,-12(fp)
 c002ee8:	c002d2c0 	call	c002d2c <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
 c002eec:	e0bfef17 	ldw	r2,-68(fp)
 c002ef0:	10880020 	cmpeqi	r2,r2,8192
 c002ef4:	e0bffe15 	stw	r2,-8(fp)
 c002ef8:	00000506 	br	c002f10 <isatty+0xac>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
 c002efc:	c002f280 	call	c002f28 <alt_get_errno>
 c002f00:	1007883a 	mov	r3,r2
 c002f04:	00801444 	movi	r2,81
 c002f08:	18800015 	stw	r2,0(r3)
    return 0;
 c002f0c:	e03ffe15 	stw	zero,-8(fp)
 c002f10:	e0bffe17 	ldw	r2,-8(fp)
  }
}
 c002f14:	e037883a 	mov	sp,fp
 c002f18:	dfc00117 	ldw	ra,4(sp)
 c002f1c:	df000017 	ldw	fp,0(sp)
 c002f20:	dec00204 	addi	sp,sp,8
 c002f24:	f800283a 	ret

0c002f28 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 c002f28:	defffd04 	addi	sp,sp,-12
 c002f2c:	dfc00215 	stw	ra,8(sp)
 c002f30:	df000115 	stw	fp,4(sp)
 c002f34:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
 c002f38:	00830074 	movhi	r2,3073
 c002f3c:	10a3ee04 	addi	r2,r2,-28744
 c002f40:	10800017 	ldw	r2,0(r2)
 c002f44:	1005003a 	cmpeq	r2,r2,zero
 c002f48:	1000061e 	bne	r2,zero,c002f64 <alt_get_errno+0x3c>
 c002f4c:	00830074 	movhi	r2,3073
 c002f50:	10a3ee04 	addi	r2,r2,-28744
 c002f54:	10800017 	ldw	r2,0(r2)
 c002f58:	103ee83a 	callr	r2
 c002f5c:	e0bfff15 	stw	r2,-4(fp)
 c002f60:	00000306 	br	c002f70 <alt_get_errno+0x48>
 c002f64:	00830074 	movhi	r2,3073
 c002f68:	10aaef04 	addi	r2,r2,-21572
 c002f6c:	e0bfff15 	stw	r2,-4(fp)
 c002f70:	e0bfff17 	ldw	r2,-4(fp)
}
 c002f74:	e037883a 	mov	sp,fp
 c002f78:	dfc00117 	ldw	ra,4(sp)
 c002f7c:	df000017 	ldw	fp,0(sp)
 c002f80:	dec00204 	addi	sp,sp,8
 c002f84:	f800283a 	ret

0c002f88 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
 c002f88:	defffe04 	addi	sp,sp,-8
 c002f8c:	dfc00115 	stw	ra,4(sp)
 c002f90:	df000015 	stw	fp,0(sp)
 c002f94:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
 c002f98:	01030074 	movhi	r4,3073
 c002f9c:	2123f504 	addi	r4,r4,-28716
 c002fa0:	01430034 	movhi	r5,3072
 c002fa4:	295cfe04 	addi	r5,r5,29688
 c002fa8:	01830074 	movhi	r6,3073
 c002fac:	31a3f504 	addi	r6,r6,-28716
 c002fb0:	c0030080 	call	c003008 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
 c002fb4:	01030034 	movhi	r4,3072
 c002fb8:	21000804 	addi	r4,r4,32
 c002fbc:	01430034 	movhi	r5,3072
 c002fc0:	29400804 	addi	r5,r5,32
 c002fc4:	01830034 	movhi	r6,3072
 c002fc8:	31806d04 	addi	r6,r6,436
 c002fcc:	c0030080 	call	c003008 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
 c002fd0:	01030034 	movhi	r4,3072
 c002fd4:	211cdf04 	addi	r4,r4,29564
 c002fd8:	01430034 	movhi	r5,3072
 c002fdc:	295cdf04 	addi	r5,r5,29564
 c002fe0:	01830034 	movhi	r6,3072
 c002fe4:	319cfe04 	addi	r6,r6,29688
 c002fe8:	c0030080 	call	c003008 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
 c002fec:	c005f0c0 	call	c005f0c <alt_dcache_flush_all>
  alt_icache_flush_all();
 c002ff0:	c0061d40 	call	c0061d4 <alt_icache_flush_all>
}
 c002ff4:	e037883a 	mov	sp,fp
 c002ff8:	dfc00117 	ldw	ra,4(sp)
 c002ffc:	df000017 	ldw	fp,0(sp)
 c003000:	dec00204 	addi	sp,sp,8
 c003004:	f800283a 	ret

0c003008 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
 c003008:	defffc04 	addi	sp,sp,-16
 c00300c:	df000315 	stw	fp,12(sp)
 c003010:	df000304 	addi	fp,sp,12
 c003014:	e13ffd15 	stw	r4,-12(fp)
 c003018:	e17ffe15 	stw	r5,-8(fp)
 c00301c:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
 c003020:	e0fffe17 	ldw	r3,-8(fp)
 c003024:	e0bffd17 	ldw	r2,-12(fp)
 c003028:	18800e26 	beq	r3,r2,c003064 <alt_load_section+0x5c>
  {
    while( to != end )
 c00302c:	00000a06 	br	c003058 <alt_load_section+0x50>
    {
      *to++ = *from++;
 c003030:	e0bffd17 	ldw	r2,-12(fp)
 c003034:	10c00017 	ldw	r3,0(r2)
 c003038:	e0bffe17 	ldw	r2,-8(fp)
 c00303c:	10c00015 	stw	r3,0(r2)
 c003040:	e0bffe17 	ldw	r2,-8(fp)
 c003044:	10800104 	addi	r2,r2,4
 c003048:	e0bffe15 	stw	r2,-8(fp)
 c00304c:	e0bffd17 	ldw	r2,-12(fp)
 c003050:	10800104 	addi	r2,r2,4
 c003054:	e0bffd15 	stw	r2,-12(fp)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
 c003058:	e0fffe17 	ldw	r3,-8(fp)
 c00305c:	e0bfff17 	ldw	r2,-4(fp)
 c003060:	18bff31e 	bne	r3,r2,c003030 <alt_load_section+0x28>
    {
      *to++ = *from++;
    }
  }
}
 c003064:	e037883a 	mov	sp,fp
 c003068:	df000017 	ldw	fp,0(sp)
 c00306c:	dec00104 	addi	sp,sp,4
 c003070:	f800283a 	ret

0c003074 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
 c003074:	defff804 	addi	sp,sp,-32
 c003078:	dfc00715 	stw	ra,28(sp)
 c00307c:	df000615 	stw	fp,24(sp)
 c003080:	df000604 	addi	fp,sp,24
 c003084:	e13ffc15 	stw	r4,-16(fp)
 c003088:	e17ffd15 	stw	r5,-12(fp)
 c00308c:	e1bffe15 	stw	r6,-8(fp)
  alt_fd* fd;
  off_t   rc = 0; 
 c003090:	e03ffa15 	stw	zero,-24(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 c003094:	e0bffc17 	ldw	r2,-16(fp)
 c003098:	1004803a 	cmplt	r2,r2,zero
 c00309c:	1000091e 	bne	r2,zero,c0030c4 <lseek+0x50>
 c0030a0:	e13ffc17 	ldw	r4,-16(fp)
 c0030a4:	01400304 	movi	r5,12
 c0030a8:	c002b680 	call	c002b68 <__mulsi3>
 c0030ac:	1007883a 	mov	r3,r2
 c0030b0:	00830034 	movhi	r2,3072
 c0030b4:	109f0a04 	addi	r2,r2,31784
 c0030b8:	1887883a 	add	r3,r3,r2
 c0030bc:	e0ffff15 	stw	r3,-4(fp)
 c0030c0:	00000106 	br	c0030c8 <lseek+0x54>
 c0030c4:	e03fff15 	stw	zero,-4(fp)
 c0030c8:	e0bfff17 	ldw	r2,-4(fp)
 c0030cc:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd) 
 c0030d0:	e0bffb17 	ldw	r2,-20(fp)
 c0030d4:	1005003a 	cmpeq	r2,r2,zero
 c0030d8:	1000111e 	bne	r2,zero,c003120 <lseek+0xac>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
 c0030dc:	e0bffb17 	ldw	r2,-20(fp)
 c0030e0:	10800017 	ldw	r2,0(r2)
 c0030e4:	10800717 	ldw	r2,28(r2)
 c0030e8:	1005003a 	cmpeq	r2,r2,zero
 c0030ec:	1000091e 	bne	r2,zero,c003114 <lseek+0xa0>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
 c0030f0:	e0bffb17 	ldw	r2,-20(fp)
 c0030f4:	10800017 	ldw	r2,0(r2)
 c0030f8:	10800717 	ldw	r2,28(r2)
 c0030fc:	e13ffb17 	ldw	r4,-20(fp)
 c003100:	e17ffd17 	ldw	r5,-12(fp)
 c003104:	e1bffe17 	ldw	r6,-8(fp)
 c003108:	103ee83a 	callr	r2
 c00310c:	e0bffa15 	stw	r2,-24(fp)
 c003110:	00000506 	br	c003128 <lseek+0xb4>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
 c003114:	00bfde84 	movi	r2,-134
 c003118:	e0bffa15 	stw	r2,-24(fp)
 c00311c:	00000206 	br	c003128 <lseek+0xb4>
    }
  }
  else  
  {
    rc = -EBADFD;
 c003120:	00bfebc4 	movi	r2,-81
 c003124:	e0bffa15 	stw	r2,-24(fp)
  }

  if (rc < 0)
 c003128:	e0bffa17 	ldw	r2,-24(fp)
 c00312c:	1004403a 	cmpge	r2,r2,zero
 c003130:	1000071e 	bne	r2,zero,c003150 <lseek+0xdc>
  {
    ALT_ERRNO = -rc;
 c003134:	c0031680 	call	c003168 <alt_get_errno>
 c003138:	1007883a 	mov	r3,r2
 c00313c:	e0bffa17 	ldw	r2,-24(fp)
 c003140:	0085c83a 	sub	r2,zero,r2
 c003144:	18800015 	stw	r2,0(r3)
    rc = -1;
 c003148:	00bfffc4 	movi	r2,-1
 c00314c:	e0bffa15 	stw	r2,-24(fp)
  }

  return rc;
 c003150:	e0bffa17 	ldw	r2,-24(fp)
}
 c003154:	e037883a 	mov	sp,fp
 c003158:	dfc00117 	ldw	ra,4(sp)
 c00315c:	df000017 	ldw	fp,0(sp)
 c003160:	dec00204 	addi	sp,sp,8
 c003164:	f800283a 	ret

0c003168 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 c003168:	defffd04 	addi	sp,sp,-12
 c00316c:	dfc00215 	stw	ra,8(sp)
 c003170:	df000115 	stw	fp,4(sp)
 c003174:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
 c003178:	00830074 	movhi	r2,3073
 c00317c:	10a3ee04 	addi	r2,r2,-28744
 c003180:	10800017 	ldw	r2,0(r2)
 c003184:	1005003a 	cmpeq	r2,r2,zero
 c003188:	1000061e 	bne	r2,zero,c0031a4 <alt_get_errno+0x3c>
 c00318c:	00830074 	movhi	r2,3073
 c003190:	10a3ee04 	addi	r2,r2,-28744
 c003194:	10800017 	ldw	r2,0(r2)
 c003198:	103ee83a 	callr	r2
 c00319c:	e0bfff15 	stw	r2,-4(fp)
 c0031a0:	00000306 	br	c0031b0 <alt_get_errno+0x48>
 c0031a4:	00830074 	movhi	r2,3073
 c0031a8:	10aaef04 	addi	r2,r2,-21572
 c0031ac:	e0bfff15 	stw	r2,-4(fp)
 c0031b0:	e0bfff17 	ldw	r2,-4(fp)
}
 c0031b4:	e037883a 	mov	sp,fp
 c0031b8:	dfc00117 	ldw	ra,4(sp)
 c0031bc:	df000017 	ldw	fp,0(sp)
 c0031c0:	dec00204 	addi	sp,sp,8
 c0031c4:	f800283a 	ret

0c0031c8 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
 c0031c8:	defffd04 	addi	sp,sp,-12
 c0031cc:	dfc00215 	stw	ra,8(sp)
 c0031d0:	df000115 	stw	fp,4(sp)
 c0031d4:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
 c0031d8:	0009883a 	mov	r4,zero
 c0031dc:	c0036b00 	call	c0036b0 <alt_irq_init>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
 c0031e0:	c0036e40 	call	c0036e4 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
 c0031e4:	01030034 	movhi	r4,3072
 c0031e8:	211ce904 	addi	r4,r4,29604
 c0031ec:	01430034 	movhi	r5,3072
 c0031f0:	295ce904 	addi	r5,r5,29604
 c0031f4:	01830034 	movhi	r6,3072
 c0031f8:	319ce904 	addi	r6,r6,29604
 c0031fc:	c0065940 	call	c006594 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
 c003200:	c00603c0 	call	c00603c <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
 c003204:	01030034 	movhi	r4,3072
 c003208:	21182804 	addi	r4,r4,24736
 c00320c:	c006f700 	call	c006f70 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
 c003210:	d1270b17 	ldw	r4,-25556(gp)
 c003214:	d1670c17 	ldw	r5,-25552(gp)
 c003218:	d1a70d17 	ldw	r6,-25548(gp)
 c00321c:	c0001f00 	call	c0001f0 <main>
 c003220:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
 c003224:	01000044 	movi	r4,1
 c003228:	c002ba00 	call	c002ba0 <close>
  exit (result);
 c00322c:	e13fff17 	ldw	r4,-4(fp)
 c003230:	c006f840 	call	c006f84 <exit>

0c003234 <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
 c003234:	defffe04 	addi	sp,sp,-8
 c003238:	df000115 	stw	fp,4(sp)
 c00323c:	df000104 	addi	fp,sp,4
 c003240:	e13fff15 	stw	r4,-4(fp)
}
 c003244:	e037883a 	mov	sp,fp
 c003248:	df000017 	ldw	fp,0(sp)
 c00324c:	dec00104 	addi	sp,sp,4
 c003250:	f800283a 	ret

0c003254 <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
 c003254:	defffe04 	addi	sp,sp,-8
 c003258:	df000115 	stw	fp,4(sp)
 c00325c:	df000104 	addi	fp,sp,4
 c003260:	e13fff15 	stw	r4,-4(fp)
}
 c003264:	e037883a 	mov	sp,fp
 c003268:	df000017 	ldw	fp,0(sp)
 c00326c:	dec00104 	addi	sp,sp,4
 c003270:	f800283a 	ret

0c003274 <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
 c003274:	defff704 	addi	sp,sp,-36
 c003278:	dfc00815 	stw	ra,32(sp)
 c00327c:	df000715 	stw	fp,28(sp)
 c003280:	df000704 	addi	fp,sp,28
 c003284:	e13ffb15 	stw	r4,-20(fp)
 c003288:	e17ffc15 	stw	r5,-16(fp)
 c00328c:	e1bffd15 	stw	r6,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 c003290:	e0bffb17 	ldw	r2,-20(fp)
 c003294:	1004803a 	cmplt	r2,r2,zero
 c003298:	1000091e 	bne	r2,zero,c0032c0 <read+0x4c>
 c00329c:	e13ffb17 	ldw	r4,-20(fp)
 c0032a0:	01400304 	movi	r5,12
 c0032a4:	c002b680 	call	c002b68 <__mulsi3>
 c0032a8:	1007883a 	mov	r3,r2
 c0032ac:	00830034 	movhi	r2,3072
 c0032b0:	109f0a04 	addi	r2,r2,31784
 c0032b4:	1887883a 	add	r3,r3,r2
 c0032b8:	e0ffff15 	stw	r3,-4(fp)
 c0032bc:	00000106 	br	c0032c4 <read+0x50>
 c0032c0:	e03fff15 	stw	zero,-4(fp)
 c0032c4:	e0bfff17 	ldw	r2,-4(fp)
 c0032c8:	e0bffa15 	stw	r2,-24(fp)
  
  if (fd)
 c0032cc:	e0bffa17 	ldw	r2,-24(fp)
 c0032d0:	1005003a 	cmpeq	r2,r2,zero
 c0032d4:	1000241e 	bne	r2,zero,c003368 <read+0xf4>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
 c0032d8:	e0bffa17 	ldw	r2,-24(fp)
 c0032dc:	10800217 	ldw	r2,8(r2)
 c0032e0:	108000cc 	andi	r2,r2,3
 c0032e4:	10800060 	cmpeqi	r2,r2,1
 c0032e8:	10001a1e 	bne	r2,zero,c003354 <read+0xe0>
 c0032ec:	e0bffa17 	ldw	r2,-24(fp)
 c0032f0:	10800017 	ldw	r2,0(r2)
 c0032f4:	10800517 	ldw	r2,20(r2)
 c0032f8:	1005003a 	cmpeq	r2,r2,zero
 c0032fc:	1000151e 	bne	r2,zero,c003354 <read+0xe0>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
 c003300:	e0bffa17 	ldw	r2,-24(fp)
 c003304:	10800017 	ldw	r2,0(r2)
 c003308:	10800517 	ldw	r2,20(r2)
 c00330c:	e17ffc17 	ldw	r5,-16(fp)
 c003310:	e1bffd17 	ldw	r6,-12(fp)
 c003314:	e13ffa17 	ldw	r4,-24(fp)
 c003318:	103ee83a 	callr	r2
 c00331c:	e0bff915 	stw	r2,-28(fp)
 c003320:	e0bff917 	ldw	r2,-28(fp)
 c003324:	1004403a 	cmpge	r2,r2,zero
 c003328:	1000071e 	bne	r2,zero,c003348 <read+0xd4>
        {
          ALT_ERRNO = -rval;
 c00332c:	c0033980 	call	c003398 <alt_get_errno>
 c003330:	e0fff917 	ldw	r3,-28(fp)
 c003334:	00c7c83a 	sub	r3,zero,r3
 c003338:	10c00015 	stw	r3,0(r2)
          return -1;
 c00333c:	00bfffc4 	movi	r2,-1
 c003340:	e0bffe15 	stw	r2,-8(fp)
 c003344:	00000e06 	br	c003380 <read+0x10c>
        }
        return rval;
 c003348:	e0bff917 	ldw	r2,-28(fp)
 c00334c:	e0bffe15 	stw	r2,-8(fp)
 c003350:	00000b06 	br	c003380 <read+0x10c>
      }
      else
      {
        ALT_ERRNO = EACCES;
 c003354:	c0033980 	call	c003398 <alt_get_errno>
 c003358:	1007883a 	mov	r3,r2
 c00335c:	00800344 	movi	r2,13
 c003360:	18800015 	stw	r2,0(r3)
 c003364:	00000406 	br	c003378 <read+0x104>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
 c003368:	c0033980 	call	c003398 <alt_get_errno>
 c00336c:	1007883a 	mov	r3,r2
 c003370:	00801444 	movi	r2,81
 c003374:	18800015 	stw	r2,0(r3)
  }
  return -1;
 c003378:	00bfffc4 	movi	r2,-1
 c00337c:	e0bffe15 	stw	r2,-8(fp)
 c003380:	e0bffe17 	ldw	r2,-8(fp)
}
 c003384:	e037883a 	mov	sp,fp
 c003388:	dfc00117 	ldw	ra,4(sp)
 c00338c:	df000017 	ldw	fp,0(sp)
 c003390:	dec00204 	addi	sp,sp,8
 c003394:	f800283a 	ret

0c003398 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 c003398:	defffd04 	addi	sp,sp,-12
 c00339c:	dfc00215 	stw	ra,8(sp)
 c0033a0:	df000115 	stw	fp,4(sp)
 c0033a4:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
 c0033a8:	00830074 	movhi	r2,3073
 c0033ac:	10a3ee04 	addi	r2,r2,-28744
 c0033b0:	10800017 	ldw	r2,0(r2)
 c0033b4:	1005003a 	cmpeq	r2,r2,zero
 c0033b8:	1000061e 	bne	r2,zero,c0033d4 <alt_get_errno+0x3c>
 c0033bc:	00830074 	movhi	r2,3073
 c0033c0:	10a3ee04 	addi	r2,r2,-28744
 c0033c4:	10800017 	ldw	r2,0(r2)
 c0033c8:	103ee83a 	callr	r2
 c0033cc:	e0bfff15 	stw	r2,-4(fp)
 c0033d0:	00000306 	br	c0033e0 <alt_get_errno+0x48>
 c0033d4:	00830074 	movhi	r2,3073
 c0033d8:	10aaef04 	addi	r2,r2,-21572
 c0033dc:	e0bfff15 	stw	r2,-4(fp)
 c0033e0:	e0bfff17 	ldw	r2,-4(fp)
}
 c0033e4:	e037883a 	mov	sp,fp
 c0033e8:	dfc00117 	ldw	ra,4(sp)
 c0033ec:	df000017 	ldw	fp,0(sp)
 c0033f0:	dec00204 	addi	sp,sp,8
 c0033f4:	f800283a 	ret

0c0033f8 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
 c0033f8:	defffc04 	addi	sp,sp,-16
 c0033fc:	dfc00315 	stw	ra,12(sp)
 c003400:	df000215 	stw	fp,8(sp)
 c003404:	dc000115 	stw	r16,4(sp)
 c003408:	df000104 	addi	fp,sp,4
 c00340c:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
 c003410:	e0bfff17 	ldw	r2,-4(fp)
 c003414:	108000d0 	cmplti	r2,r2,3
 c003418:	10000f1e 	bne	r2,zero,c003458 <alt_release_fd+0x60>
  {
    alt_fd_list[fd].fd_flags = 0;
 c00341c:	e13fff17 	ldw	r4,-4(fp)
 c003420:	04030034 	movhi	r16,3072
 c003424:	841f0a04 	addi	r16,r16,31784
 c003428:	01400304 	movi	r5,12
 c00342c:	c002b680 	call	c002b68 <__mulsi3>
 c003430:	1405883a 	add	r2,r2,r16
 c003434:	10800204 	addi	r2,r2,8
 c003438:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
 c00343c:	e13fff17 	ldw	r4,-4(fp)
 c003440:	04030034 	movhi	r16,3072
 c003444:	841f0a04 	addi	r16,r16,31784
 c003448:	01400304 	movi	r5,12
 c00344c:	c002b680 	call	c002b68 <__mulsi3>
 c003450:	1405883a 	add	r2,r2,r16
 c003454:	10000015 	stw	zero,0(r2)
  }
}
 c003458:	e037883a 	mov	sp,fp
 c00345c:	dfc00217 	ldw	ra,8(sp)
 c003460:	df000117 	ldw	fp,4(sp)
 c003464:	dc000017 	ldw	r16,0(sp)
 c003468:	dec00304 	addi	sp,sp,12
 c00346c:	f800283a 	ret

0c003470 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
 c003470:	defff804 	addi	sp,sp,-32
 c003474:	df000715 	stw	fp,28(sp)
 c003478:	df000704 	addi	fp,sp,28
 c00347c:	e13ffe15 	stw	r4,-8(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 c003480:	0005303a 	rdctl	r2,status
 c003484:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 c003488:	e0fffb17 	ldw	r3,-20(fp)
 c00348c:	00bfff84 	movi	r2,-2
 c003490:	1884703a 	and	r2,r3,r2
 c003494:	1001703a 	wrctl	status,r2
  
  return context;
 c003498:	e0bffb17 	ldw	r2,-20(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
 c00349c:	e0bffd15 	stw	r2,-12(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
 c0034a0:	d0a00a17 	ldw	r2,-32728(gp)
 c0034a4:	10c000c4 	addi	r3,r2,3
 c0034a8:	00bfff04 	movi	r2,-4
 c0034ac:	1884703a 	and	r2,r3,r2
 c0034b0:	d0a00a15 	stw	r2,-32728(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
 c0034b4:	d0e00a17 	ldw	r3,-32728(gp)
 c0034b8:	e0bffe17 	ldw	r2,-8(fp)
 c0034bc:	1887883a 	add	r3,r3,r2
 c0034c0:	00840034 	movhi	r2,4096
 c0034c4:	10800004 	addi	r2,r2,0
 c0034c8:	10c0072e 	bgeu	r2,r3,c0034e8 <sbrk+0x78>
 c0034cc:	e0bffd17 	ldw	r2,-12(fp)
 c0034d0:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 c0034d4:	e0bffa17 	ldw	r2,-24(fp)
 c0034d8:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
 c0034dc:	00bfffc4 	movi	r2,-1
 c0034e0:	e0bfff15 	stw	r2,-4(fp)
 c0034e4:	00000c06 	br	c003518 <sbrk+0xa8>
  }
#endif

  prev_heap_end = heap_end; 
 c0034e8:	d0a00a17 	ldw	r2,-32728(gp)
 c0034ec:	e0bffc15 	stw	r2,-16(fp)
  heap_end += incr; 
 c0034f0:	d0e00a17 	ldw	r3,-32728(gp)
 c0034f4:	e0bffe17 	ldw	r2,-8(fp)
 c0034f8:	1885883a 	add	r2,r3,r2
 c0034fc:	d0a00a15 	stw	r2,-32728(gp)
 c003500:	e0bffd17 	ldw	r2,-12(fp)
 c003504:	e0bff915 	stw	r2,-28(fp)
 c003508:	e0bff917 	ldw	r2,-28(fp)
 c00350c:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
 c003510:	e0bffc17 	ldw	r2,-16(fp)
 c003514:	e0bfff15 	stw	r2,-4(fp)
 c003518:	e0bfff17 	ldw	r2,-4(fp)
} 
 c00351c:	e037883a 	mov	sp,fp
 c003520:	df000017 	ldw	fp,0(sp)
 c003524:	dec00104 	addi	sp,sp,4
 c003528:	f800283a 	ret

0c00352c <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
 c00352c:	defff704 	addi	sp,sp,-36
 c003530:	dfc00815 	stw	ra,32(sp)
 c003534:	df000715 	stw	fp,28(sp)
 c003538:	df000704 	addi	fp,sp,28
 c00353c:	e13ffb15 	stw	r4,-20(fp)
 c003540:	e17ffc15 	stw	r5,-16(fp)
 c003544:	e1bffd15 	stw	r6,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 c003548:	e0bffb17 	ldw	r2,-20(fp)
 c00354c:	1004803a 	cmplt	r2,r2,zero
 c003550:	1000091e 	bne	r2,zero,c003578 <write+0x4c>
 c003554:	e13ffb17 	ldw	r4,-20(fp)
 c003558:	01400304 	movi	r5,12
 c00355c:	c002b680 	call	c002b68 <__mulsi3>
 c003560:	1007883a 	mov	r3,r2
 c003564:	00830034 	movhi	r2,3072
 c003568:	109f0a04 	addi	r2,r2,31784
 c00356c:	1887883a 	add	r3,r3,r2
 c003570:	e0ffff15 	stw	r3,-4(fp)
 c003574:	00000106 	br	c00357c <write+0x50>
 c003578:	e03fff15 	stw	zero,-4(fp)
 c00357c:	e0bfff17 	ldw	r2,-4(fp)
 c003580:	e0bffa15 	stw	r2,-24(fp)
  
  if (fd)
 c003584:	e0bffa17 	ldw	r2,-24(fp)
 c003588:	1005003a 	cmpeq	r2,r2,zero
 c00358c:	1000241e 	bne	r2,zero,c003620 <write+0xf4>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
 c003590:	e0bffa17 	ldw	r2,-24(fp)
 c003594:	10800217 	ldw	r2,8(r2)
 c003598:	108000cc 	andi	r2,r2,3
 c00359c:	1005003a 	cmpeq	r2,r2,zero
 c0035a0:	10001a1e 	bne	r2,zero,c00360c <write+0xe0>
 c0035a4:	e0bffa17 	ldw	r2,-24(fp)
 c0035a8:	10800017 	ldw	r2,0(r2)
 c0035ac:	10800617 	ldw	r2,24(r2)
 c0035b0:	1005003a 	cmpeq	r2,r2,zero
 c0035b4:	1000151e 	bne	r2,zero,c00360c <write+0xe0>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
 c0035b8:	e0bffa17 	ldw	r2,-24(fp)
 c0035bc:	10800017 	ldw	r2,0(r2)
 c0035c0:	10800617 	ldw	r2,24(r2)
 c0035c4:	e17ffc17 	ldw	r5,-16(fp)
 c0035c8:	e1bffd17 	ldw	r6,-12(fp)
 c0035cc:	e13ffa17 	ldw	r4,-24(fp)
 c0035d0:	103ee83a 	callr	r2
 c0035d4:	e0bff915 	stw	r2,-28(fp)
 c0035d8:	e0bff917 	ldw	r2,-28(fp)
 c0035dc:	1004403a 	cmpge	r2,r2,zero
 c0035e0:	1000071e 	bne	r2,zero,c003600 <write+0xd4>
      {
        ALT_ERRNO = -rval;
 c0035e4:	c0036500 	call	c003650 <alt_get_errno>
 c0035e8:	e0fff917 	ldw	r3,-28(fp)
 c0035ec:	00c7c83a 	sub	r3,zero,r3
 c0035f0:	10c00015 	stw	r3,0(r2)
        return -1;
 c0035f4:	00bfffc4 	movi	r2,-1
 c0035f8:	e0bffe15 	stw	r2,-8(fp)
 c0035fc:	00000e06 	br	c003638 <write+0x10c>
      }
      return rval;
 c003600:	e0bff917 	ldw	r2,-28(fp)
 c003604:	e0bffe15 	stw	r2,-8(fp)
 c003608:	00000b06 	br	c003638 <write+0x10c>
    }
    else
    {
      ALT_ERRNO = EACCES;
 c00360c:	c0036500 	call	c003650 <alt_get_errno>
 c003610:	1007883a 	mov	r3,r2
 c003614:	00800344 	movi	r2,13
 c003618:	18800015 	stw	r2,0(r3)
 c00361c:	00000406 	br	c003630 <write+0x104>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
 c003620:	c0036500 	call	c003650 <alt_get_errno>
 c003624:	1007883a 	mov	r3,r2
 c003628:	00801444 	movi	r2,81
 c00362c:	18800015 	stw	r2,0(r3)
  }
  return -1;
 c003630:	00bfffc4 	movi	r2,-1
 c003634:	e0bffe15 	stw	r2,-8(fp)
 c003638:	e0bffe17 	ldw	r2,-8(fp)
}
 c00363c:	e037883a 	mov	sp,fp
 c003640:	dfc00117 	ldw	ra,4(sp)
 c003644:	df000017 	ldw	fp,0(sp)
 c003648:	dec00204 	addi	sp,sp,8
 c00364c:	f800283a 	ret

0c003650 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 c003650:	defffd04 	addi	sp,sp,-12
 c003654:	dfc00215 	stw	ra,8(sp)
 c003658:	df000115 	stw	fp,4(sp)
 c00365c:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
 c003660:	00830074 	movhi	r2,3073
 c003664:	10a3ee04 	addi	r2,r2,-28744
 c003668:	10800017 	ldw	r2,0(r2)
 c00366c:	1005003a 	cmpeq	r2,r2,zero
 c003670:	1000061e 	bne	r2,zero,c00368c <alt_get_errno+0x3c>
 c003674:	00830074 	movhi	r2,3073
 c003678:	10a3ee04 	addi	r2,r2,-28744
 c00367c:	10800017 	ldw	r2,0(r2)
 c003680:	103ee83a 	callr	r2
 c003684:	e0bfff15 	stw	r2,-4(fp)
 c003688:	00000306 	br	c003698 <alt_get_errno+0x48>
 c00368c:	00830074 	movhi	r2,3073
 c003690:	10aaef04 	addi	r2,r2,-21572
 c003694:	e0bfff15 	stw	r2,-4(fp)
 c003698:	e0bfff17 	ldw	r2,-4(fp)
}
 c00369c:	e037883a 	mov	sp,fp
 c0036a0:	dfc00117 	ldw	ra,4(sp)
 c0036a4:	df000017 	ldw	fp,0(sp)
 c0036a8:	dec00204 	addi	sp,sp,8
 c0036ac:	f800283a 	ret

0c0036b0 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
 c0036b0:	defffd04 	addi	sp,sp,-12
 c0036b4:	dfc00215 	stw	ra,8(sp)
 c0036b8:	df000115 	stw	fp,4(sp)
 c0036bc:	df000104 	addi	fp,sp,4
 c0036c0:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_QSYS_IRQ_INIT ( NIOS2, nios2);
 c0036c4:	c006a940 	call	c006a94 <altera_nios2_qsys_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts ()
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
 c0036c8:	00800044 	movi	r2,1
 c0036cc:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
 c0036d0:	e037883a 	mov	sp,fp
 c0036d4:	dfc00117 	ldw	ra,4(sp)
 c0036d8:	df000017 	ldw	fp,0(sp)
 c0036dc:	dec00204 	addi	sp,sp,8
 c0036e0:	f800283a 	ret

0c0036e4 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
 c0036e4:	defffe04 	addi	sp,sp,-8
 c0036e8:	dfc00115 	stw	ra,4(sp)
 c0036ec:	df000015 	stw	fp,0(sp)
 c0036f0:	d839883a 	mov	fp,sp
    ALTERA_AVALON_TIMER_INIT ( SYSTIMER, systimer);
 c0036f4:	01040034 	movhi	r4,4096
 c0036f8:	21001004 	addi	r4,r4,64
 c0036fc:	000b883a 	mov	r5,zero
 c003700:	01800044 	movi	r6,1
 c003704:	01c01904 	movi	r7,100
 c003708:	c004ca40 	call	c004ca4 <alt_avalon_timer_sc_init>
    ALTERA_AVALON_EPCS_FLASH_CONTROLLER_INIT ( EPCS_FLASH_CONTROLLER_0, epcs_flash_controller_0);
 c00370c:	01030034 	movhi	r4,3072
 c003710:	211f6a04 	addi	r4,r4,32168
 c003714:	c0037a40 	call	c0037a4 <alt_epcs_flash_init>
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART_0, jtag_uart_0);
 c003718:	01030034 	movhi	r4,3072
 c00371c:	211fa604 	addi	r4,r4,32408
 c003720:	000b883a 	mov	r5,zero
 c003724:	000d883a 	mov	r6,zero
 c003728:	c0042d00 	call	c0042d0 <altera_avalon_jtag_uart_init>
 c00372c:	01030034 	movhi	r4,3072
 c003730:	211f9c04 	addi	r4,r4,32368
 c003734:	c00376c0 	call	c00376c <alt_dev_reg>
    ALTERA_AVALON_SPI_INIT ( SPI_0, spi_0);
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID, sysid);
    ALTERA_AVALON_UART_INIT ( UART_0, uart_0);
 c003738:	01030074 	movhi	r4,3073
 c00373c:	2123be04 	addi	r4,r4,-28936
 c003740:	000b883a 	mov	r5,zero
 c003744:	018000c4 	movi	r6,3
 c003748:	c004e2c0 	call	c004e2c <altera_avalon_uart_init>
 c00374c:	01030074 	movhi	r4,3073
 c003750:	2123b404 	addi	r4,r4,-28976
 c003754:	c00376c0 	call	c00376c <alt_dev_reg>
}
 c003758:	e037883a 	mov	sp,fp
 c00375c:	dfc00117 	ldw	ra,4(sp)
 c003760:	df000017 	ldw	fp,0(sp)
 c003764:	dec00204 	addi	sp,sp,8
 c003768:	f800283a 	ret

0c00376c <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
 c00376c:	defffd04 	addi	sp,sp,-12
 c003770:	dfc00215 	stw	ra,8(sp)
 c003774:	df000115 	stw	fp,4(sp)
 c003778:	df000104 	addi	fp,sp,4
 c00377c:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
 c003780:	e13fff17 	ldw	r4,-4(fp)
 c003784:	01430074 	movhi	r5,3073
 c003788:	2963eb04 	addi	r5,r5,-28756
 c00378c:	c005f280 	call	c005f28 <alt_dev_llist_insert>
}
 c003790:	e037883a 	mov	sp,fp
 c003794:	dfc00117 	ldw	ra,4(sp)
 c003798:	df000017 	ldw	fp,0(sp)
 c00379c:	dec00204 	addi	sp,sp,8
 c0037a0:	f800283a 	ret

0c0037a4 <alt_epcs_flash_init>:
/*
 * alt_epcs_flash_init
 *
 */
int alt_epcs_flash_init(alt_flash_epcs_dev* flash)
{
 c0037a4:	defffc04 	addi	sp,sp,-16
 c0037a8:	dfc00315 	stw	ra,12(sp)
 c0037ac:	df000215 	stw	fp,8(sp)
 c0037b0:	df000204 	addi	fp,sp,8
 c0037b4:	e13fff15 	stw	r4,-4(fp)
  int ret_code = 0;
 c0037b8:	e03ffe15 	stw	zero,-8(fp)

  /* Set up function pointers and/or data structures as needed. */
  ret_code = alt_epcs_flash_query(flash);
 c0037bc:	e13fff17 	ldw	r4,-4(fp)
 c0037c0:	c0038300 	call	c003830 <alt_epcs_flash_query>
 c0037c4:	e0bffe15 	stw	r2,-8(fp)
  */

  /*
  *  Register this device as a valid flash device type
  */
  if (!ret_code)
 c0037c8:	e0bffe17 	ldw	r2,-8(fp)
 c0037cc:	1004c03a 	cmpne	r2,r2,zero
 c0037d0:	1000031e 	bne	r2,zero,c0037e0 <alt_epcs_flash_init+0x3c>
    ret_code = alt_flash_device_register(&(flash->dev));
 c0037d4:	e13fff17 	ldw	r4,-4(fp)
 c0037d8:	c0037f80 	call	c0037f8 <alt_flash_device_register>
 c0037dc:	e0bffe15 	stw	r2,-8(fp)

  return ret_code;
 c0037e0:	e0bffe17 	ldw	r2,-8(fp)
}
 c0037e4:	e037883a 	mov	sp,fp
 c0037e8:	dfc00117 	ldw	ra,4(sp)
 c0037ec:	df000017 	ldw	fp,0(sp)
 c0037f0:	dec00204 	addi	sp,sp,8
 c0037f4:	f800283a 	ret

0c0037f8 <alt_flash_device_register>:

typedef struct alt_flash_dev alt_flash_dev; 
typedef alt_flash_dev alt_flash_fd;

static ALT_INLINE int alt_flash_device_register( alt_flash_fd* fd)
{
 c0037f8:	defffd04 	addi	sp,sp,-12
 c0037fc:	dfc00215 	stw	ra,8(sp)
 c003800:	df000115 	stw	fp,4(sp)
 c003804:	df000104 	addi	fp,sp,4
 c003808:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_flash_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) fd, &alt_flash_dev_list);
 c00380c:	e13fff17 	ldw	r4,-4(fp)
 c003810:	01430074 	movhi	r5,3073
 c003814:	2963f004 	addi	r5,r5,-28736
 c003818:	c005f280 	call	c005f28 <alt_dev_llist_insert>
}
 c00381c:	e037883a 	mov	sp,fp
 c003820:	dfc00117 	ldw	ra,4(sp)
 c003824:	df000017 	ldw	fp,0(sp)
 c003828:	dec00204 	addi	sp,sp,8
 c00382c:	f800283a 	ret

0c003830 <alt_epcs_flash_query>:


static int alt_epcs_flash_query(alt_flash_epcs_dev* flash)
{
 c003830:	defffc04 	addi	sp,sp,-16
 c003834:	dfc00315 	stw	ra,12(sp)
 c003838:	df000215 	stw	fp,8(sp)
 c00383c:	df000204 	addi	fp,sp,8
 c003840:	e13fff15 	stw	r4,-4(fp)
  int ret_code = 0;
 c003844:	e03ffe15 	stw	zero,-8(fp)
   * reset the device, or whatever, to ensure that
   * it's in a known working state.
  */
  
  /* Disable 4-bytes address mode. */
  flash->four_bytes_mode = 0;
 c003848:	e0bfff17 	ldw	r2,-4(fp)
 c00384c:	10003115 	stw	zero,196(r2)
  
  /* Send the RES command sequence */
  flash->silicon_id =
 c003850:	e0bfff17 	ldw	r2,-4(fp)
 c003854:	11002d17 	ldw	r4,180(r2)
 c003858:	c005c1c0 	call	c005c1c <epcs_read_electronic_signature>
 c00385c:	10c03fcc 	andi	r3,r2,255
 c003860:	e0bfff17 	ldw	r2,-4(fp)
 c003864:	10c02f15 	stw	r3,188(r2)
    epcs_read_electronic_signature(flash->register_base);

  /* Fill in all device-specific parameters. */
  if (flash->silicon_id == 0x16) /* EPCS64 */
 c003868:	e0bfff17 	ldw	r2,-4(fp)
 c00386c:	10802f17 	ldw	r2,188(r2)
 c003870:	10800598 	cmpnei	r2,r2,22
 c003874:	10000a1e 	bne	r2,zero,c0038a0 <alt_epcs_flash_query+0x70>
  {
    flash->dev.region_info[0].region_size = 64 * 1024 * 1024 / 8;
 c003878:	e0ffff17 	ldw	r3,-4(fp)
 c00387c:	00802034 	movhi	r2,128
 c003880:	18800e15 	stw	r2,56(r3)
    flash->dev.region_info[0].number_of_blocks = 128;
 c003884:	e0ffff17 	ldw	r3,-4(fp)
 c003888:	00802004 	movi	r2,128
 c00388c:	18800f15 	stw	r2,60(r3)
    flash->dev.region_info[0].block_size = 65536;
 c003890:	e0ffff17 	ldw	r3,-4(fp)
 c003894:	00800074 	movhi	r2,1
 c003898:	18801015 	stw	r2,64(r3)
 c00389c:	00007306 	br	c003a6c <alt_epcs_flash_query+0x23c>
  }
  else if (flash->silicon_id == 0x14) /* EPCS16 */
 c0038a0:	e0bfff17 	ldw	r2,-4(fp)
 c0038a4:	10802f17 	ldw	r2,188(r2)
 c0038a8:	10800518 	cmpnei	r2,r2,20
 c0038ac:	10000a1e 	bne	r2,zero,c0038d8 <alt_epcs_flash_query+0xa8>
  {
    flash->dev.region_info[0].region_size = 16 * 1024 * 1024 / 8;
 c0038b0:	e0ffff17 	ldw	r3,-4(fp)
 c0038b4:	00800834 	movhi	r2,32
 c0038b8:	18800e15 	stw	r2,56(r3)
    flash->dev.region_info[0].number_of_blocks = 32;
 c0038bc:	e0ffff17 	ldw	r3,-4(fp)
 c0038c0:	00800804 	movi	r2,32
 c0038c4:	18800f15 	stw	r2,60(r3)
    flash->dev.region_info[0].block_size = 65536;
 c0038c8:	e0ffff17 	ldw	r3,-4(fp)
 c0038cc:	00800074 	movhi	r2,1
 c0038d0:	18801015 	stw	r2,64(r3)
 c0038d4:	00006506 	br	c003a6c <alt_epcs_flash_query+0x23c>
  }
  else if (flash->silicon_id == 0x13) /* EPCS8 */
 c0038d8:	e0bfff17 	ldw	r2,-4(fp)
 c0038dc:	10802f17 	ldw	r2,188(r2)
 c0038e0:	108004d8 	cmpnei	r2,r2,19
 c0038e4:	10000a1e 	bne	r2,zero,c003910 <alt_epcs_flash_query+0xe0>
  {
    flash->dev.region_info[0].region_size = 8 * 1024 * 1024 / 8;
 c0038e8:	e0ffff17 	ldw	r3,-4(fp)
 c0038ec:	00800434 	movhi	r2,16
 c0038f0:	18800e15 	stw	r2,56(r3)
    flash->dev.region_info[0].number_of_blocks = 16;
 c0038f4:	e0ffff17 	ldw	r3,-4(fp)
 c0038f8:	00800404 	movi	r2,16
 c0038fc:	18800f15 	stw	r2,60(r3)
    flash->dev.region_info[0].block_size = 65536;
 c003900:	e0ffff17 	ldw	r3,-4(fp)
 c003904:	00800074 	movhi	r2,1
 c003908:	18801015 	stw	r2,64(r3)
 c00390c:	00005706 	br	c003a6c <alt_epcs_flash_query+0x23c>
  }
  else if (flash->silicon_id == 0x12) /* EPCS4 */
 c003910:	e0bfff17 	ldw	r2,-4(fp)
 c003914:	10802f17 	ldw	r2,188(r2)
 c003918:	10800498 	cmpnei	r2,r2,18
 c00391c:	10000a1e 	bne	r2,zero,c003948 <alt_epcs_flash_query+0x118>
  {
    flash->dev.region_info[0].region_size = 4 * 1024 * 1024 / 8;
 c003920:	e0ffff17 	ldw	r3,-4(fp)
 c003924:	00800234 	movhi	r2,8
 c003928:	18800e15 	stw	r2,56(r3)
    flash->dev.region_info[0].number_of_blocks = 8;
 c00392c:	e0ffff17 	ldw	r3,-4(fp)
 c003930:	00800204 	movi	r2,8
 c003934:	18800f15 	stw	r2,60(r3)
    flash->dev.region_info[0].block_size = 65536;
 c003938:	e0ffff17 	ldw	r3,-4(fp)
 c00393c:	00800074 	movhi	r2,1
 c003940:	18801015 	stw	r2,64(r3)
 c003944:	00004906 	br	c003a6c <alt_epcs_flash_query+0x23c>
  }
  else if (flash->silicon_id == 0x10) /* EPCS1 */
 c003948:	e0bfff17 	ldw	r2,-4(fp)
 c00394c:	10802f17 	ldw	r2,188(r2)
 c003950:	10800418 	cmpnei	r2,r2,16
 c003954:	10000a1e 	bne	r2,zero,c003980 <alt_epcs_flash_query+0x150>
  {
    flash->dev.region_info[0].region_size = 1 * 1024 * 1024 / 8;
 c003958:	e0ffff17 	ldw	r3,-4(fp)
 c00395c:	008000b4 	movhi	r2,2
 c003960:	18800e15 	stw	r2,56(r3)
    flash->dev.region_info[0].number_of_blocks = 4;
 c003964:	e0ffff17 	ldw	r3,-4(fp)
 c003968:	00800104 	movi	r2,4
 c00396c:	18800f15 	stw	r2,60(r3)
    flash->dev.region_info[0].block_size = 32768;
 c003970:	e0ffff17 	ldw	r3,-4(fp)
 c003974:	00a00014 	movui	r2,32768
 c003978:	18801015 	stw	r2,64(r3)
 c00397c:	00003b06 	br	c003a6c <alt_epcs_flash_query+0x23c>
  {
    /* 
     * Read electronic signature doesn't work for the EPCS128; try 
     * the "Read Device ID" command" before giving up.
     */
    flash->silicon_id = epcs_read_device_id(flash->register_base);
 c003980:	e0bfff17 	ldw	r2,-4(fp)
 c003984:	11002d17 	ldw	r4,180(r2)
 c003988:	c005c880 	call	c005c88 <epcs_read_device_id>
 c00398c:	1007883a 	mov	r3,r2
 c003990:	e0bfff17 	ldw	r2,-4(fp)
 c003994:	10c02f15 	stw	r3,188(r2)
    /*
     * Last byte is the density ID. Note the difference between
     * EPCS128 and EPCQ128 -- arranged differently, though the 
     * least significant byte of each is '0x18'.
     */
    if((flash->silicon_id & 0xFFFFFF) == 0x20BA18) /* EPCQ128 */
 c003998:	e0bfff17 	ldw	r2,-4(fp)
 c00399c:	10c02f17 	ldw	r3,188(r2)
 c0039a0:	00804034 	movhi	r2,256
 c0039a4:	10bfffc4 	addi	r2,r2,-1
 c0039a8:	1886703a 	and	r3,r3,r2
 c0039ac:	00800874 	movhi	r2,33
 c0039b0:	10ae8604 	addi	r2,r2,-17896
 c0039b4:	18800a1e 	bne	r3,r2,c0039e0 <alt_epcs_flash_query+0x1b0>
    {
      flash->dev.region_info[0].region_size = 128 * 1024 * 1024 / 8;
 c0039b8:	e0ffff17 	ldw	r3,-4(fp)
 c0039bc:	00804034 	movhi	r2,256
 c0039c0:	18800e15 	stw	r2,56(r3)
      flash->dev.region_info[0].number_of_blocks = 256; /* number of sectors */
 c0039c4:	e0ffff17 	ldw	r3,-4(fp)
 c0039c8:	00804004 	movi	r2,256
 c0039cc:	18800f15 	stw	r2,60(r3)
      flash->dev.region_info[0].block_size = 65536;  /* sector size */
 c0039d0:	e0ffff17 	ldw	r3,-4(fp)
 c0039d4:	00800074 	movhi	r2,1
 c0039d8:	18801015 	stw	r2,64(r3)
 c0039dc:	00002306 	br	c003a6c <alt_epcs_flash_query+0x23c>
    }
    else if((flash->silicon_id & 0xFF) == 0x18) /* EPCS128 */
 c0039e0:	e0bfff17 	ldw	r2,-4(fp)
 c0039e4:	10802f17 	ldw	r2,188(r2)
 c0039e8:	10803fcc 	andi	r2,r2,255
 c0039ec:	10800618 	cmpnei	r2,r2,24
 c0039f0:	10000a1e 	bne	r2,zero,c003a1c <alt_epcs_flash_query+0x1ec>
    {
      flash->dev.region_info[0].region_size = 128 * 1024 * 1024 / 8;
 c0039f4:	e0ffff17 	ldw	r3,-4(fp)
 c0039f8:	00804034 	movhi	r2,256
 c0039fc:	18800e15 	stw	r2,56(r3)
      flash->dev.region_info[0].number_of_blocks = 64;
 c003a00:	e0ffff17 	ldw	r3,-4(fp)
 c003a04:	00801004 	movi	r2,64
 c003a08:	18800f15 	stw	r2,60(r3)
      flash->dev.region_info[0].block_size = 262144;
 c003a0c:	e0ffff17 	ldw	r3,-4(fp)
 c003a10:	00800134 	movhi	r2,4
 c003a14:	18801015 	stw	r2,64(r3)
 c003a18:	00001406 	br	c003a6c <alt_epcs_flash_query+0x23c>
    }
    else if((flash->silicon_id & 0xFF ) == 0x19) /* EPCQ256 */
 c003a1c:	e0bfff17 	ldw	r2,-4(fp)
 c003a20:	10802f17 	ldw	r2,188(r2)
 c003a24:	10803fcc 	andi	r2,r2,255
 c003a28:	10800658 	cmpnei	r2,r2,25
 c003a2c:	10000d1e 	bne	r2,zero,c003a64 <alt_epcs_flash_query+0x234>
    {
      flash->dev.region_info[0].region_size = 256 * 1024 * 1024 / 8;
 c003a30:	e0ffff17 	ldw	r3,-4(fp)
 c003a34:	00808034 	movhi	r2,512
 c003a38:	18800e15 	stw	r2,56(r3)
      flash->dev.region_info[0].number_of_blocks = 512; /* number of sectors */
 c003a3c:	e0ffff17 	ldw	r3,-4(fp)
 c003a40:	00808004 	movi	r2,512
 c003a44:	18800f15 	stw	r2,60(r3)
      flash->dev.region_info[0].block_size = 65536;  /* sector size */
 c003a48:	e0ffff17 	ldw	r3,-4(fp)
 c003a4c:	00800074 	movhi	r2,1
 c003a50:	18801015 	stw	r2,64(r3)
       * must first be programmed into the device, though. To complicate things, 
       * other Altera IP expects the chip to be in 3 byte address mode when they 
       * start using it. To be nice, we'll place the device into 4-byte address mode
       * when we need to, and take it back out when we're done.
       */
      flash->four_bytes_mode = 1;
 c003a54:	e0ffff17 	ldw	r3,-4(fp)
 c003a58:	00800044 	movi	r2,1
 c003a5c:	18803115 	stw	r2,196(r3)
 c003a60:	00000206 	br	c003a6c <alt_epcs_flash_query+0x23c>
    }
    else 
    {
      ret_code = -ENODEV; /* No known device found! */
 c003a64:	00bffb44 	movi	r2,-19
 c003a68:	e0bffe15 	stw	r2,-8(fp)
    }
  }
  
  flash->size_in_bytes = flash->dev.region_info[0].region_size;
 c003a6c:	e0bfff17 	ldw	r2,-4(fp)
 c003a70:	10800e17 	ldw	r2,56(r2)
 c003a74:	1007883a 	mov	r3,r2
 c003a78:	e0bfff17 	ldw	r2,-4(fp)
 c003a7c:	10c02e15 	stw	r3,184(r2)
  flash->dev.number_of_regions = 1;
 c003a80:	e0ffff17 	ldw	r3,-4(fp)
 c003a84:	00800044 	movi	r2,1
 c003a88:	18800c15 	stw	r2,48(r3)
  flash->dev.region_info[0].offset = 0;
 c003a8c:	e0bfff17 	ldw	r2,-4(fp)
 c003a90:	10000d15 	stw	zero,52(r2)
  flash->page_size = 256;
 c003a94:	e0ffff17 	ldw	r3,-4(fp)
 c003a98:	00804004 	movi	r2,256
 c003a9c:	18803015 	stw	r2,192(r3)

  /* Consider clearing all BP bits here. */
  return ret_code;
 c003aa0:	e0bffe17 	ldw	r2,-8(fp)
}
 c003aa4:	e037883a 	mov	sp,fp
 c003aa8:	dfc00117 	ldw	ra,4(sp)
 c003aac:	df000017 	ldw	fp,0(sp)
 c003ab0:	dec00204 	addi	sp,sp,8
 c003ab4:	f800283a 	ret

0c003ab8 <alt_epcs_flash_memcmp>:
  alt_flash_dev* flash_info,
  const void* src_buffer,
  int offset,
  size_t n
)
{
 c003ab8:	deffeb04 	addi	sp,sp,-84
 c003abc:	dfc01415 	stw	ra,80(sp)
 c003ac0:	df001315 	stw	fp,76(sp)
 c003ac4:	df001304 	addi	fp,sp,76
 c003ac8:	e13ff915 	stw	r4,-28(fp)
 c003acc:	e17ffa15 	stw	r5,-24(fp)
 c003ad0:	e1bffb15 	stw	r6,-20(fp)
 c003ad4:	e1fffc15 	stw	r7,-16(fp)
  /*
   * Compare chunks of memory at a time, for better serial-flash
   * read efficiency.
   */
  alt_u8 chunk_buffer[32];
  const int chunk_size = sizeof(chunk_buffer) / sizeof(*chunk_buffer);
 c003ad8:	00800804 	movi	r2,32
 c003adc:	e0bff015 	stw	r2,-64(fp)
  int current_offset = 0;
 c003ae0:	e03fef15 	stw	zero,-68(fp)

  while (n > 0)
 c003ae4:	00002c06 	br	c003b98 <alt_epcs_flash_memcmp+0xe0>
  {
    int this_chunk_size = n > chunk_size ? chunk_size : n;
 c003ae8:	e0bff017 	ldw	r2,-64(fp)
 c003aec:	e0bfff15 	stw	r2,-4(fp)
 c003af0:	e0fffc17 	ldw	r3,-16(fp)
 c003af4:	e0fffe15 	stw	r3,-8(fp)
 c003af8:	e0bfff17 	ldw	r2,-4(fp)
 c003afc:	e0fffe17 	ldw	r3,-8(fp)
 c003b00:	10c0022e 	bgeu	r2,r3,c003b0c <alt_epcs_flash_memcmp+0x54>
 c003b04:	e0bfff17 	ldw	r2,-4(fp)
 c003b08:	e0bffe15 	stw	r2,-8(fp)
 c003b0c:	e0fffe17 	ldw	r3,-8(fp)
 c003b10:	e0ffee15 	stw	r3,-72(fp)
    int this_chunk_cmp;

    if (
      alt_epcs_flash_read(
 c003b14:	e0fffb17 	ldw	r3,-20(fp)
 c003b18:	e0bfef17 	ldw	r2,-68(fp)
 c003b1c:	188b883a 	add	r5,r3,r2
 c003b20:	e1bff104 	addi	r6,fp,-60
 c003b24:	e13ff917 	ldw	r4,-28(fp)
 c003b28:	e1ffee17 	ldw	r7,-72(fp)
 c003b2c:	c0040f00 	call	c0040f0 <alt_epcs_flash_read>
  while (n > 0)
  {
    int this_chunk_size = n > chunk_size ? chunk_size : n;
    int this_chunk_cmp;

    if (
 c003b30:	1004403a 	cmpge	r2,r2,zero
 c003b34:	1000031e 	bne	r2,zero,c003b44 <alt_epcs_flash_memcmp+0x8c>
    {
      /*
      * If the read fails, I'm not sure what the appropriate action is.
      * Compare success seems wrong, so make it compare fail.
      */
      return -1;
 c003b38:	00bfffc4 	movi	r2,-1
 c003b3c:	e0bffd15 	stw	r2,-12(fp)
 c003b40:	00001906 	br	c003ba8 <alt_epcs_flash_memcmp+0xf0>
    }

    /* Compare this chunk against the source memory buffer. */
    this_chunk_cmp = memcmp(&((unsigned char*)(src_buffer))[current_offset], chunk_buffer, this_chunk_size);
 c003b44:	e0fffa17 	ldw	r3,-24(fp)
 c003b48:	e0bfef17 	ldw	r2,-68(fp)
 c003b4c:	1889883a 	add	r4,r3,r2
 c003b50:	e1bfee17 	ldw	r6,-72(fp)
 c003b54:	e17ff104 	addi	r5,fp,-60
 c003b58:	c006fbc0 	call	c006fbc <memcmp>
 c003b5c:	e0bfed15 	stw	r2,-76(fp)
    if (this_chunk_cmp)
 c003b60:	e0bfed17 	ldw	r2,-76(fp)
 c003b64:	1005003a 	cmpeq	r2,r2,zero
 c003b68:	1000031e 	bne	r2,zero,c003b78 <alt_epcs_flash_memcmp+0xc0>
    {
      return this_chunk_cmp;
 c003b6c:	e0ffed17 	ldw	r3,-76(fp)
 c003b70:	e0fffd15 	stw	r3,-12(fp)
 c003b74:	00000c06 	br	c003ba8 <alt_epcs_flash_memcmp+0xf0>
    }

    n -= this_chunk_size;
 c003b78:	e0ffee17 	ldw	r3,-72(fp)
 c003b7c:	e0bffc17 	ldw	r2,-16(fp)
 c003b80:	10c5c83a 	sub	r2,r2,r3
 c003b84:	e0bffc15 	stw	r2,-16(fp)
    current_offset += this_chunk_size;
 c003b88:	e0ffef17 	ldw	r3,-68(fp)
 c003b8c:	e0bfee17 	ldw	r2,-72(fp)
 c003b90:	1885883a 	add	r2,r3,r2
 c003b94:	e0bfef15 	stw	r2,-68(fp)
   */
  alt_u8 chunk_buffer[32];
  const int chunk_size = sizeof(chunk_buffer) / sizeof(*chunk_buffer);
  int current_offset = 0;

  while (n > 0)
 c003b98:	e0bffc17 	ldw	r2,-16(fp)
 c003b9c:	1004c03a 	cmpne	r2,r2,zero
 c003ba0:	103fd11e 	bne	r2,zero,c003ae8 <alt_epcs_flash_memcmp+0x30>
  }

  /*
   * If execution made it to this point, compare is successful.
   */
  return 0;
 c003ba4:	e03ffd15 	stw	zero,-12(fp)
 c003ba8:	e0bffd17 	ldw	r2,-12(fp)
}
 c003bac:	e037883a 	mov	sp,fp
 c003bb0:	dfc00117 	ldw	ra,4(sp)
 c003bb4:	df000017 	ldw	fp,0(sp)
 c003bb8:	dec00204 	addi	sp,sp,8
 c003bbc:	f800283a 	ret

0c003bc0 <alt_epcs_flash_write>:
 * large buffer to tie up in our programming library, when not all users will
 * want that functionality.
 */
int alt_epcs_flash_write(alt_flash_dev* flash_info, int offset,
                          const void* src_addr, int length)
{
 c003bc0:	defff204 	addi	sp,sp,-56
 c003bc4:	dfc00d15 	stw	ra,52(sp)
 c003bc8:	df000c15 	stw	fp,48(sp)
 c003bcc:	df000c04 	addi	fp,sp,48
 c003bd0:	e13ffa15 	stw	r4,-24(fp)
 c003bd4:	e17ffb15 	stw	r5,-20(fp)
 c003bd8:	e1bffc15 	stw	r6,-16(fp)
 c003bdc:	e1fffd15 	stw	r7,-12(fp)
  int         ret_code = 0;
 c003be0:	e03ff915 	stw	zero,-28(fp)
  int         current_offset;

  /*
   * First and foremost which sectors are affected?
   */
  for(i = 0; i < flash_info->number_of_regions; i++)
 c003be4:	e03ff815 	stw	zero,-32(fp)
 c003be8:	00008b06 	br	c003e18 <alt_epcs_flash_write+0x258>
  {
    /* Is it in this erase block region?*/
    if((offset >= flash_info->region_info[i].offset) &&
 c003bec:	e0bff817 	ldw	r2,-32(fp)
 c003bf0:	e0fffa17 	ldw	r3,-24(fp)
 c003bf4:	1004913a 	slli	r2,r2,4
 c003bf8:	10c5883a 	add	r2,r2,r3
 c003bfc:	10800d04 	addi	r2,r2,52
 c003c00:	10c00017 	ldw	r3,0(r2)
 c003c04:	e0bffb17 	ldw	r2,-20(fp)
 c003c08:	10c08016 	blt	r2,r3,c003e0c <alt_epcs_flash_write+0x24c>
 c003c0c:	e0bff817 	ldw	r2,-32(fp)
 c003c10:	e0fffa17 	ldw	r3,-24(fp)
 c003c14:	1004913a 	slli	r2,r2,4
 c003c18:	10c5883a 	add	r2,r2,r3
 c003c1c:	10800d04 	addi	r2,r2,52
 c003c20:	11000017 	ldw	r4,0(r2)
 c003c24:	e0bff817 	ldw	r2,-32(fp)
 c003c28:	e0fffa17 	ldw	r3,-24(fp)
 c003c2c:	1004913a 	slli	r2,r2,4
 c003c30:	10c5883a 	add	r2,r2,r3
 c003c34:	10800e04 	addi	r2,r2,56
 c003c38:	10800017 	ldw	r2,0(r2)
 c003c3c:	2087883a 	add	r3,r4,r2
 c003c40:	e0bffb17 	ldw	r2,-20(fp)
 c003c44:	10c0710e 	bge	r2,r3,c003e0c <alt_epcs_flash_write+0x24c>
      (offset < (flash_info->region_info[i].offset +
      flash_info->region_info[i].region_size)))
    {
      current_offset = flash_info->region_info[i].offset;
 c003c48:	e0bff817 	ldw	r2,-32(fp)
 c003c4c:	e0fffa17 	ldw	r3,-24(fp)
 c003c50:	1004913a 	slli	r2,r2,4
 c003c54:	10c5883a 	add	r2,r2,r3
 c003c58:	10800d04 	addi	r2,r2,52
 c003c5c:	10800017 	ldw	r2,0(r2)
 c003c60:	e0bff515 	stw	r2,-44(fp)

      for(j=0;j<flash_info->region_info[i].number_of_blocks;j++)
 c003c64:	e03ff715 	stw	zero,-36(fp)
 c003c68:	00006006 	br	c003dec <alt_epcs_flash_write+0x22c>
      {
        if ((offset >= current_offset ) &&
 c003c6c:	e0fffb17 	ldw	r3,-20(fp)
 c003c70:	e0bff517 	ldw	r2,-44(fp)
 c003c74:	18805116 	blt	r3,r2,c003dbc <alt_epcs_flash_write+0x1fc>
 c003c78:	e0bff817 	ldw	r2,-32(fp)
 c003c7c:	e0fffa17 	ldw	r3,-24(fp)
 c003c80:	1004913a 	slli	r2,r2,4
 c003c84:	10c5883a 	add	r2,r2,r3
 c003c88:	10801004 	addi	r2,r2,64
 c003c8c:	10c00017 	ldw	r3,0(r2)
 c003c90:	e0bff517 	ldw	r2,-44(fp)
 c003c94:	1887883a 	add	r3,r3,r2
 c003c98:	e0bffb17 	ldw	r2,-20(fp)
 c003c9c:	10c0470e 	bge	r2,r3,c003dbc <alt_epcs_flash_write+0x1fc>
        {
          /*
           * Check if the contents of the block are different
           * from the data we wish to put there
           */
          data_to_write = ( current_offset + flash_info->region_info[i].block_size
 c003ca0:	e0bff817 	ldw	r2,-32(fp)
 c003ca4:	e0fffa17 	ldw	r3,-24(fp)
 c003ca8:	1004913a 	slli	r2,r2,4
 c003cac:	10c5883a 	add	r2,r2,r3
 c003cb0:	10801004 	addi	r2,r2,64
 c003cb4:	10c00017 	ldw	r3,0(r2)
 c003cb8:	e0bff517 	ldw	r2,-44(fp)
 c003cbc:	1887883a 	add	r3,r3,r2
 c003cc0:	e0bffb17 	ldw	r2,-20(fp)
 c003cc4:	1885c83a 	sub	r2,r3,r2
 c003cc8:	e0bff615 	stw	r2,-40(fp)
                            - offset);
          data_to_write = MIN(data_to_write, length);
 c003ccc:	e0bff617 	ldw	r2,-40(fp)
 c003cd0:	e0bfff15 	stw	r2,-4(fp)
 c003cd4:	e0fffd17 	ldw	r3,-12(fp)
 c003cd8:	e0fffe15 	stw	r3,-8(fp)
 c003cdc:	e0bfff17 	ldw	r2,-4(fp)
 c003ce0:	e0fffe17 	ldw	r3,-8(fp)
 c003ce4:	10c0020e 	bge	r2,r3,c003cf0 <alt_epcs_flash_write+0x130>
 c003ce8:	e0bfff17 	ldw	r2,-4(fp)
 c003cec:	e0bffe15 	stw	r2,-8(fp)
 c003cf0:	e0fffe17 	ldw	r3,-8(fp)
 c003cf4:	e0fff615 	stw	r3,-40(fp)

          if(alt_epcs_flash_memcmp(flash_info, src_addr, offset, data_to_write))
 c003cf8:	e1fff617 	ldw	r7,-40(fp)
 c003cfc:	e13ffa17 	ldw	r4,-24(fp)
 c003d00:	e17ffc17 	ldw	r5,-16(fp)
 c003d04:	e1bffb17 	ldw	r6,-20(fp)
 c003d08:	c003ab80 	call	c003ab8 <alt_epcs_flash_memcmp>
 c003d0c:	1005003a 	cmpeq	r2,r2,zero
 c003d10:	1000131e 	bne	r2,zero,c003d60 <alt_epcs_flash_write+0x1a0>
          {
            ret_code = (*flash_info->erase_block)(flash_info, current_offset);
 c003d14:	e0bffa17 	ldw	r2,-24(fp)
 c003d18:	10800817 	ldw	r2,32(r2)
 c003d1c:	e13ffa17 	ldw	r4,-24(fp)
 c003d20:	e17ff517 	ldw	r5,-44(fp)
 c003d24:	103ee83a 	callr	r2
 c003d28:	e0bff915 	stw	r2,-28(fp)

            if (!ret_code)
 c003d2c:	e0bff917 	ldw	r2,-28(fp)
 c003d30:	1004c03a 	cmpne	r2,r2,zero
 c003d34:	10000a1e 	bne	r2,zero,c003d60 <alt_epcs_flash_write+0x1a0>
            {
              ret_code = (*flash_info->write_block)(
 c003d38:	e0bffa17 	ldw	r2,-24(fp)
 c003d3c:	10c00917 	ldw	r3,36(r2)
 c003d40:	e0bff617 	ldw	r2,-40(fp)
 c003d44:	d8800015 	stw	r2,0(sp)
 c003d48:	e13ffa17 	ldw	r4,-24(fp)
 c003d4c:	e17ff517 	ldw	r5,-44(fp)
 c003d50:	e1bffb17 	ldw	r6,-20(fp)
 c003d54:	e1fffc17 	ldw	r7,-16(fp)
 c003d58:	183ee83a 	callr	r3
 c003d5c:	e0bff915 	stw	r2,-28(fp)
                                                  data_to_write);
            }
          }

          /* Was this the last block? */
          if ((length == data_to_write) || ret_code)
 c003d60:	e0fffd17 	ldw	r3,-12(fp)
 c003d64:	e0bff617 	ldw	r2,-40(fp)
 c003d68:	18802f26 	beq	r3,r2,c003e28 <alt_epcs_flash_write+0x268>
 c003d6c:	e0bff917 	ldw	r2,-28(fp)
 c003d70:	1004c03a 	cmpne	r2,r2,zero
 c003d74:	10002c1e 	bne	r2,zero,c003e28 <alt_epcs_flash_write+0x268>
          {
            goto finished;
          }

          length -= data_to_write;
 c003d78:	e0fffd17 	ldw	r3,-12(fp)
 c003d7c:	e0bff617 	ldw	r2,-40(fp)
 c003d80:	1885c83a 	sub	r2,r3,r2
 c003d84:	e0bffd15 	stw	r2,-12(fp)
          offset = current_offset + flash_info->region_info[i].block_size;
 c003d88:	e0bff817 	ldw	r2,-32(fp)
 c003d8c:	e0fffa17 	ldw	r3,-24(fp)
 c003d90:	1004913a 	slli	r2,r2,4
 c003d94:	10c5883a 	add	r2,r2,r3
 c003d98:	10801004 	addi	r2,r2,64
 c003d9c:	10c00017 	ldw	r3,0(r2)
 c003da0:	e0bff517 	ldw	r2,-44(fp)
 c003da4:	1885883a 	add	r2,r3,r2
 c003da8:	e0bffb15 	stw	r2,-20(fp)
          src_addr = (alt_u8*)src_addr + data_to_write;
 c003dac:	e0fffc17 	ldw	r3,-16(fp)
 c003db0:	e0bff617 	ldw	r2,-40(fp)
 c003db4:	1885883a 	add	r2,r3,r2
 c003db8:	e0bffc15 	stw	r2,-16(fp)
        }
        current_offset += flash_info->region_info[i].block_size;
 c003dbc:	e0bff817 	ldw	r2,-32(fp)
 c003dc0:	e0fffa17 	ldw	r3,-24(fp)
 c003dc4:	1004913a 	slli	r2,r2,4
 c003dc8:	10c5883a 	add	r2,r2,r3
 c003dcc:	10801004 	addi	r2,r2,64
 c003dd0:	10c00017 	ldw	r3,0(r2)
 c003dd4:	e0bff517 	ldw	r2,-44(fp)
 c003dd8:	10c5883a 	add	r2,r2,r3
 c003ddc:	e0bff515 	stw	r2,-44(fp)
      (offset < (flash_info->region_info[i].offset +
      flash_info->region_info[i].region_size)))
    {
      current_offset = flash_info->region_info[i].offset;

      for(j=0;j<flash_info->region_info[i].number_of_blocks;j++)
 c003de0:	e0bff717 	ldw	r2,-36(fp)
 c003de4:	10800044 	addi	r2,r2,1
 c003de8:	e0bff715 	stw	r2,-36(fp)
 c003dec:	e0bff817 	ldw	r2,-32(fp)
 c003df0:	e0fffa17 	ldw	r3,-24(fp)
 c003df4:	1004913a 	slli	r2,r2,4
 c003df8:	10c5883a 	add	r2,r2,r3
 c003dfc:	10800f04 	addi	r2,r2,60
 c003e00:	10c00017 	ldw	r3,0(r2)
 c003e04:	e0bff717 	ldw	r2,-36(fp)
 c003e08:	10ff9816 	blt	r2,r3,c003c6c <alt_epcs_flash_write+0xac>
  int         current_offset;

  /*
   * First and foremost which sectors are affected?
   */
  for(i = 0; i < flash_info->number_of_regions; i++)
 c003e0c:	e0bff817 	ldw	r2,-32(fp)
 c003e10:	10800044 	addi	r2,r2,1
 c003e14:	e0bff815 	stw	r2,-32(fp)
 c003e18:	e0bffa17 	ldw	r2,-24(fp)
 c003e1c:	10c00c17 	ldw	r3,48(r2)
 c003e20:	e0bff817 	ldw	r2,-32(fp)
 c003e24:	10ff7116 	blt	r2,r3,c003bec <alt_epcs_flash_write+0x2c>
      }
    }
  }

finished:
  return ret_code;
 c003e28:	e0bff917 	ldw	r2,-28(fp)
}
 c003e2c:	e037883a 	mov	sp,fp
 c003e30:	dfc00117 	ldw	ra,4(sp)
 c003e34:	df000017 	ldw	fp,0(sp)
 c003e38:	dec00204 	addi	sp,sp,8
 c003e3c:	f800283a 	ret

0c003e40 <alt_epcs_flash_get_info>:
 *
 *  Pass the table of erase blocks to the user
 */
int alt_epcs_flash_get_info(alt_flash_fd* fd, flash_region** info,
                            int* number_of_regions)
{
 c003e40:	defffa04 	addi	sp,sp,-24
 c003e44:	df000515 	stw	fp,20(sp)
 c003e48:	df000504 	addi	fp,sp,20
 c003e4c:	e13ffd15 	stw	r4,-12(fp)
 c003e50:	e17ffe15 	stw	r5,-8(fp)
 c003e54:	e1bfff15 	stw	r6,-4(fp)
  int ret_code = 0;
 c003e58:	e03ffc15 	stw	zero,-16(fp)

  alt_flash_dev* flash = (alt_flash_dev*)fd;
 c003e5c:	e0bffd17 	ldw	r2,-12(fp)
 c003e60:	e0bffb15 	stw	r2,-20(fp)

  *number_of_regions = flash->number_of_regions;
 c003e64:	e0bffb17 	ldw	r2,-20(fp)
 c003e68:	10c00c17 	ldw	r3,48(r2)
 c003e6c:	e0bfff17 	ldw	r2,-4(fp)
 c003e70:	10c00015 	stw	r3,0(r2)

  if (!flash->number_of_regions)
 c003e74:	e0bffb17 	ldw	r2,-20(fp)
 c003e78:	10800c17 	ldw	r2,48(r2)
 c003e7c:	1004c03a 	cmpne	r2,r2,zero
 c003e80:	1000031e 	bne	r2,zero,c003e90 <alt_epcs_flash_get_info+0x50>
  {
    ret_code = -EIO;
 c003e84:	00bffec4 	movi	r2,-5
 c003e88:	e0bffc15 	stw	r2,-16(fp)
 c003e8c:	00000b06 	br	c003ebc <alt_epcs_flash_get_info+0x7c>
  }
  else if (flash->number_of_regions > ALT_MAX_NUMBER_OF_FLASH_REGIONS)
 c003e90:	e0bffb17 	ldw	r2,-20(fp)
 c003e94:	10800c17 	ldw	r2,48(r2)
 c003e98:	10800250 	cmplti	r2,r2,9
 c003e9c:	1000031e 	bne	r2,zero,c003eac <alt_epcs_flash_get_info+0x6c>
  {
    ret_code = -ENOMEM;
 c003ea0:	00bffd04 	movi	r2,-12
 c003ea4:	e0bffc15 	stw	r2,-16(fp)
 c003ea8:	00000406 	br	c003ebc <alt_epcs_flash_get_info+0x7c>
  }
  else
  {
    *info = &flash->region_info[0];
 c003eac:	e0bffb17 	ldw	r2,-20(fp)
 c003eb0:	10c00d04 	addi	r3,r2,52
 c003eb4:	e0bffe17 	ldw	r2,-8(fp)
 c003eb8:	10c00015 	stw	r3,0(r2)
  }

  return ret_code;
 c003ebc:	e0bffc17 	ldw	r2,-16(fp)
}
 c003ec0:	e037883a 	mov	sp,fp
 c003ec4:	df000017 	ldw	fp,0(sp)
 c003ec8:	dec00104 	addi	sp,sp,4
 c003ecc:	f800283a 	ret

0c003ed0 <alt_epcs_flash_erase_block>:
 *
 * Erase the selected erase block ("sector erase", from the POV
 * of the EPCS data sheet).
 */
int alt_epcs_flash_erase_block(alt_flash_dev* flash_info, int block_offset)
{
 c003ed0:	defffa04 	addi	sp,sp,-24
 c003ed4:	dfc00515 	stw	ra,20(sp)
 c003ed8:	df000415 	stw	fp,16(sp)
 c003edc:	df000404 	addi	fp,sp,16
 c003ee0:	e13ffe15 	stw	r4,-8(fp)
 c003ee4:	e17fff15 	stw	r5,-4(fp)
  int ret_code = 0;
 c003ee8:	e03ffd15 	stw	zero,-12(fp)
  alt_flash_epcs_dev *f = (alt_flash_epcs_dev*)flash_info;
 c003eec:	e0bffe17 	ldw	r2,-8(fp)
 c003ef0:	e0bffc15 	stw	r2,-16(fp)

  ret_code = alt_epcs_test_address(flash_info, block_offset);
 c003ef4:	e13ffe17 	ldw	r4,-8(fp)
 c003ef8:	e17fff17 	ldw	r5,-4(fp)
 c003efc:	c003f400 	call	c003f40 <alt_epcs_test_address>
 c003f00:	e0bffd15 	stw	r2,-12(fp)

  if (ret_code >= 0)
 c003f04:	e0bffd17 	ldw	r2,-12(fp)
 c003f08:	1004803a 	cmplt	r2,r2,zero
 c003f0c:	1000061e 	bne	r2,zero,c003f28 <alt_epcs_flash_erase_block+0x58>
  {
    /* Send the Sector Erase command, whose 3 address bytes are anywhere
     * within the chosen sector.
     */
    epcs_sector_erase(f->register_base, block_offset, f->four_bytes_mode);
 c003f10:	e0bffc17 	ldw	r2,-16(fp)
 c003f14:	11002d17 	ldw	r4,180(r2)
 c003f18:	e17fff17 	ldw	r5,-4(fp)
 c003f1c:	e0bffc17 	ldw	r2,-16(fp)
 c003f20:	11803117 	ldw	r6,196(r2)
 c003f24:	c0057440 	call	c005744 <epcs_sector_erase>
  }
  return ret_code;
 c003f28:	e0bffd17 	ldw	r2,-12(fp)
}
 c003f2c:	e037883a 	mov	sp,fp
 c003f30:	dfc00117 	ldw	ra,4(sp)
 c003f34:	df000017 	ldw	fp,0(sp)
 c003f38:	dec00204 	addi	sp,sp,8
 c003f3c:	f800283a 	ret

0c003f40 <alt_epcs_test_address>:
}


/* This might be a candidate for optimization.  Precompute the last-address? */
static ALT_INLINE int alt_epcs_test_address(alt_flash_dev* flash_info, int offset)
{
 c003f40:	defff904 	addi	sp,sp,-28
 c003f44:	df000615 	stw	fp,24(sp)
 c003f48:	df000604 	addi	fp,sp,24
 c003f4c:	e13ffe15 	stw	r4,-8(fp)
 c003f50:	e17fff15 	stw	r5,-4(fp)
  int ret_code = 0;
 c003f54:	e03ffd15 	stw	zero,-12(fp)
  /* Error checking:
   * if the block offset is outside of the memory, return -EIO.
   */
  alt_flash_epcs_dev *f = (alt_flash_epcs_dev*)flash_info;
 c003f58:	e0bffe17 	ldw	r2,-8(fp)
 c003f5c:	e0bffc15 	stw	r2,-16(fp)

  const alt_u32 last_region_index = f->dev.number_of_regions - 1;
 c003f60:	e0bffc17 	ldw	r2,-16(fp)
 c003f64:	10800c17 	ldw	r2,48(r2)
 c003f68:	10bfffc4 	addi	r2,r2,-1
 c003f6c:	e0bffb15 	stw	r2,-20(fp)
  alt_u32 last_device_address =
    -1 +
    f->dev.region_info[last_region_index].offset +
    f->dev.region_info[last_region_index].region_size;
 c003f70:	e0bffb17 	ldw	r2,-20(fp)
 c003f74:	e0fffc17 	ldw	r3,-16(fp)
 c003f78:	1004913a 	slli	r2,r2,4
 c003f7c:	10c5883a 	add	r2,r2,r3
 c003f80:	10800d04 	addi	r2,r2,52
 c003f84:	11000017 	ldw	r4,0(r2)
 c003f88:	e0bffb17 	ldw	r2,-20(fp)
 c003f8c:	e0fffc17 	ldw	r3,-16(fp)
 c003f90:	1004913a 	slli	r2,r2,4
 c003f94:	10c5883a 	add	r2,r2,r3
 c003f98:	10800e04 	addi	r2,r2,56
 c003f9c:	10800017 	ldw	r2,0(r2)
 c003fa0:	2085883a 	add	r2,r4,r2
 c003fa4:	10bfffc4 	addi	r2,r2,-1
 c003fa8:	e0bffa15 	stw	r2,-24(fp)

  if (offset > last_device_address)
 c003fac:	e0ffff17 	ldw	r3,-4(fp)
 c003fb0:	e0bffa17 	ldw	r2,-24(fp)
 c003fb4:	10c0022e 	bgeu	r2,r3,c003fc0 <alt_epcs_test_address+0x80>
  {
    /* Someone tried to erase a block outside of this device's range. */
    ret_code = -EIO;
 c003fb8:	00bffec4 	movi	r2,-5
 c003fbc:	e0bffd15 	stw	r2,-12(fp)
  }
  return ret_code;
 c003fc0:	e0bffd17 	ldw	r2,-12(fp)
}
 c003fc4:	e037883a 	mov	sp,fp
 c003fc8:	df000017 	ldw	fp,0(sp)
 c003fcc:	dec00104 	addi	sp,sp,4
 c003fd0:	f800283a 	ret

0c003fd4 <alt_epcs_flash_write_block>:
 * function type compatibility.
 */
int alt_epcs_flash_write_block(alt_flash_dev* flash_info, int block_offset,
                                      int data_offset, const void* data,
                                      int length)
{
 c003fd4:	defff204 	addi	sp,sp,-56
 c003fd8:	dfc00d15 	stw	ra,52(sp)
 c003fdc:	df000c15 	stw	fp,48(sp)
 c003fe0:	df000c04 	addi	fp,sp,48
 c003fe4:	e13ffa15 	stw	r4,-24(fp)
 c003fe8:	e17ffb15 	stw	r5,-20(fp)
 c003fec:	e1bffc15 	stw	r6,-16(fp)
 c003ff0:	e1fffd15 	stw	r7,-12(fp)
  int ret_code;
  alt_flash_epcs_dev *f = (alt_flash_epcs_dev*)flash_info;
 c003ff4:	e0bffa17 	ldw	r2,-24(fp)
 c003ff8:	e0bff815 	stw	r2,-32(fp)

  int buffer_offset = 0;
 c003ffc:	e03ff715 	stw	zero,-36(fp)
  int length_of_current_write;
  ret_code = alt_epcs_test_address(flash_info, data_offset);
 c004000:	e13ffa17 	ldw	r4,-24(fp)
 c004004:	e17ffc17 	ldw	r5,-16(fp)
 c004008:	c003f400 	call	c003f40 <alt_epcs_test_address>
 c00400c:	e0bff915 	stw	r2,-28(fp)

  if (ret_code >= 0)
 c004010:	e0bff917 	ldw	r2,-28(fp)
 c004014:	1004803a 	cmplt	r2,r2,zero
 c004018:	10002f1e 	bne	r2,zero,c0040d8 <alt_epcs_flash_write_block+0x104>
  {

    /* "Block" writes must be broken up into the page writes that
     * the device understands.  Partial page writes are allowed.
     */
    while (length)
 c00401c:	00002b06 	br	c0040cc <alt_epcs_flash_write_block+0xf8>
    {
      int next_page_start = (data_offset + f->page_size) & ~(f->page_size - 1);
 c004020:	e0bff817 	ldw	r2,-32(fp)
 c004024:	10c03017 	ldw	r3,192(r2)
 c004028:	e0bffc17 	ldw	r2,-16(fp)
 c00402c:	1887883a 	add	r3,r3,r2
 c004030:	e0bff817 	ldw	r2,-32(fp)
 c004034:	10803017 	ldw	r2,192(r2)
 c004038:	0085c83a 	sub	r2,zero,r2
 c00403c:	1884703a 	and	r2,r3,r2
 c004040:	e0bff515 	stw	r2,-44(fp)
      length_of_current_write = MIN(length, next_page_start - data_offset);
 c004044:	e0fff517 	ldw	r3,-44(fp)
 c004048:	e0bffc17 	ldw	r2,-16(fp)
 c00404c:	1885c83a 	sub	r2,r3,r2
 c004050:	e0c00217 	ldw	r3,8(fp)
 c004054:	e0ffff15 	stw	r3,-4(fp)
 c004058:	e0bffe15 	stw	r2,-8(fp)
 c00405c:	e0bfff17 	ldw	r2,-4(fp)
 c004060:	e0fffe17 	ldw	r3,-8(fp)
 c004064:	10c0020e 	bge	r2,r3,c004070 <alt_epcs_flash_write_block+0x9c>
 c004068:	e0bfff17 	ldw	r2,-4(fp)
 c00406c:	e0bffe15 	stw	r2,-8(fp)
 c004070:	e0fffe17 	ldw	r3,-8(fp)
 c004074:	e0fff615 	stw	r3,-40(fp)

      epcs_write_buffer(f->register_base, data_offset, &((const alt_u8*)data)[buffer_offset], length_of_current_write,
 c004078:	e0bff817 	ldw	r2,-32(fp)
 c00407c:	11002d17 	ldw	r4,180(r2)
 c004080:	e0fffd17 	ldw	r3,-12(fp)
 c004084:	e0bff717 	ldw	r2,-36(fp)
 c004088:	188d883a 	add	r6,r3,r2
 c00408c:	e0bff817 	ldw	r2,-32(fp)
 c004090:	10803117 	ldw	r2,196(r2)
 c004094:	d8800015 	stw	r2,0(sp)
 c004098:	e17ffc17 	ldw	r5,-16(fp)
 c00409c:	e1fff617 	ldw	r7,-40(fp)
 c0040a0:	c005aac0 	call	c005aac <epcs_write_buffer>
          f->four_bytes_mode);

      length -= length_of_current_write;
 c0040a4:	e0c00217 	ldw	r3,8(fp)
 c0040a8:	e0bff617 	ldw	r2,-40(fp)
 c0040ac:	1885c83a 	sub	r2,r3,r2
 c0040b0:	e0800215 	stw	r2,8(fp)
      buffer_offset += length_of_current_write;
 c0040b4:	e0fff717 	ldw	r3,-36(fp)
 c0040b8:	e0bff617 	ldw	r2,-40(fp)
 c0040bc:	1885883a 	add	r2,r3,r2
 c0040c0:	e0bff715 	stw	r2,-36(fp)
      data_offset = next_page_start;
 c0040c4:	e0bff517 	ldw	r2,-44(fp)
 c0040c8:	e0bffc15 	stw	r2,-16(fp)
  {

    /* "Block" writes must be broken up into the page writes that
     * the device understands.  Partial page writes are allowed.
     */
    while (length)
 c0040cc:	e0800217 	ldw	r2,8(fp)
 c0040d0:	1004c03a 	cmpne	r2,r2,zero
 c0040d4:	103fd21e 	bne	r2,zero,c004020 <alt_epcs_flash_write_block+0x4c>
      length -= length_of_current_write;
      buffer_offset += length_of_current_write;
      data_offset = next_page_start;
    }
  }
  return ret_code;
 c0040d8:	e0bff917 	ldw	r2,-28(fp)
}
 c0040dc:	e037883a 	mov	sp,fp
 c0040e0:	dfc00117 	ldw	ra,4(sp)
 c0040e4:	df000017 	ldw	fp,0(sp)
 c0040e8:	dec00204 	addi	sp,sp,8
 c0040ec:	f800283a 	ret

0c0040f0 <alt_epcs_flash_read>:
 *  to the beginning.  Reads that start beyond the end of the memory are
 *  flagged as errors with EIO (is there a better error code?).
 */
int alt_epcs_flash_read(alt_flash_dev* flash_info, int offset,
                        void* dest_addr, int length)
{
 c0040f0:	defff704 	addi	sp,sp,-36
 c0040f4:	dfc00815 	stw	ra,32(sp)
 c0040f8:	df000715 	stw	fp,28(sp)
 c0040fc:	df000704 	addi	fp,sp,28
 c004100:	e13ffc15 	stw	r4,-16(fp)
 c004104:	e17ffd15 	stw	r5,-12(fp)
 c004108:	e1bffe15 	stw	r6,-8(fp)
 c00410c:	e1ffff15 	stw	r7,-4(fp)
  int ret_code = 0;
 c004110:	e03ffb15 	stw	zero,-20(fp)

  alt_flash_epcs_dev *f = (alt_flash_epcs_dev*)flash_info;
 c004114:	e0bffc17 	ldw	r2,-16(fp)
 c004118:	e0bffa15 	stw	r2,-24(fp)

  ret_code = alt_epcs_test_address(flash_info, offset);
 c00411c:	e13ffc17 	ldw	r4,-16(fp)
 c004120:	e17ffd17 	ldw	r5,-12(fp)
 c004124:	c003f400 	call	c003f40 <alt_epcs_test_address>
 c004128:	e0bffb15 	stw	r2,-20(fp)

  if (ret_code >= 0)
 c00412c:	e0bffb17 	ldw	r2,-20(fp)
 c004130:	1004803a 	cmplt	r2,r2,zero
 c004134:	10000e1e 	bne	r2,zero,c004170 <alt_epcs_flash_read+0x80>
  {
    ret_code = epcs_read_buffer(f->register_base, offset, dest_addr, length,
 c004138:	e0bffa17 	ldw	r2,-24(fp)
 c00413c:	11002d17 	ldw	r4,180(r2)
 c004140:	e1bffe17 	ldw	r6,-8(fp)
 c004144:	e0bffa17 	ldw	r2,-24(fp)
 c004148:	10803117 	ldw	r2,196(r2)
 c00414c:	d8800015 	stw	r2,0(sp)
 c004150:	e17ffd17 	ldw	r5,-12(fp)
 c004154:	e1ffff17 	ldw	r7,-4(fp)
 c004158:	c0058ac0 	call	c0058ac <epcs_read_buffer>
 c00415c:	e0bffb15 	stw	r2,-20(fp)
                                f->four_bytes_mode);

    /* epcs_read_buffer returns the number of buffers read, but
     * alt_epcs_flash_read returns 0 on success, <0 on failure.
     */
    if (ret_code == length)
 c004160:	e0fffb17 	ldw	r3,-20(fp)
 c004164:	e0bfff17 	ldw	r2,-4(fp)
 c004168:	1880011e 	bne	r3,r2,c004170 <alt_epcs_flash_read+0x80>
    {
      ret_code = 0;
 c00416c:	e03ffb15 	stw	zero,-20(fp)
    }
  }
  return ret_code;
 c004170:	e0bffb17 	ldw	r2,-20(fp)
}
 c004174:	e037883a 	mov	sp,fp
 c004178:	dfc00117 	ldw	ra,4(sp)
 c00417c:	df000017 	ldw	fp,0(sp)
 c004180:	dec00204 	addi	sp,sp,8
 c004184:	f800283a 	ret

0c004188 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
 c004188:	defffa04 	addi	sp,sp,-24
 c00418c:	dfc00515 	stw	ra,20(sp)
 c004190:	df000415 	stw	fp,16(sp)
 c004194:	df000404 	addi	fp,sp,16
 c004198:	e13ffd15 	stw	r4,-12(fp)
 c00419c:	e17ffe15 	stw	r5,-8(fp)
 c0041a0:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 c0041a4:	e0bffd17 	ldw	r2,-12(fp)
 c0041a8:	10800017 	ldw	r2,0(r2)
 c0041ac:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
 c0041b0:	e0bffc17 	ldw	r2,-16(fp)
 c0041b4:	11000a04 	addi	r4,r2,40
 c0041b8:	e0bffd17 	ldw	r2,-12(fp)
 c0041bc:	11c00217 	ldw	r7,8(r2)
 c0041c0:	e17ffe17 	ldw	r5,-8(fp)
 c0041c4:	e1bfff17 	ldw	r6,-4(fp)
 c0041c8:	c0047d00 	call	c0047d0 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
 c0041cc:	e037883a 	mov	sp,fp
 c0041d0:	dfc00117 	ldw	ra,4(sp)
 c0041d4:	df000017 	ldw	fp,0(sp)
 c0041d8:	dec00204 	addi	sp,sp,8
 c0041dc:	f800283a 	ret

0c0041e0 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
 c0041e0:	defffa04 	addi	sp,sp,-24
 c0041e4:	dfc00515 	stw	ra,20(sp)
 c0041e8:	df000415 	stw	fp,16(sp)
 c0041ec:	df000404 	addi	fp,sp,16
 c0041f0:	e13ffd15 	stw	r4,-12(fp)
 c0041f4:	e17ffe15 	stw	r5,-8(fp)
 c0041f8:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 c0041fc:	e0bffd17 	ldw	r2,-12(fp)
 c004200:	10800017 	ldw	r2,0(r2)
 c004204:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
 c004208:	e0bffc17 	ldw	r2,-16(fp)
 c00420c:	11000a04 	addi	r4,r2,40
 c004210:	e0bffd17 	ldw	r2,-12(fp)
 c004214:	11c00217 	ldw	r7,8(r2)
 c004218:	e17ffe17 	ldw	r5,-8(fp)
 c00421c:	e1bfff17 	ldw	r6,-4(fp)
 c004220:	c0049f40 	call	c0049f4 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
 c004224:	e037883a 	mov	sp,fp
 c004228:	dfc00117 	ldw	ra,4(sp)
 c00422c:	df000017 	ldw	fp,0(sp)
 c004230:	dec00204 	addi	sp,sp,8
 c004234:	f800283a 	ret

0c004238 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
 c004238:	defffc04 	addi	sp,sp,-16
 c00423c:	dfc00315 	stw	ra,12(sp)
 c004240:	df000215 	stw	fp,8(sp)
 c004244:	df000204 	addi	fp,sp,8
 c004248:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 c00424c:	e0bfff17 	ldw	r2,-4(fp)
 c004250:	10800017 	ldw	r2,0(r2)
 c004254:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
 c004258:	e0bffe17 	ldw	r2,-8(fp)
 c00425c:	11000a04 	addi	r4,r2,40
 c004260:	e0bfff17 	ldw	r2,-4(fp)
 c004264:	11400217 	ldw	r5,8(r2)
 c004268:	c0046680 	call	c004668 <altera_avalon_jtag_uart_close>
}
 c00426c:	e037883a 	mov	sp,fp
 c004270:	dfc00117 	ldw	ra,4(sp)
 c004274:	df000017 	ldw	fp,0(sp)
 c004278:	dec00204 	addi	sp,sp,8
 c00427c:	f800283a 	ret

0c004280 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
 c004280:	defffa04 	addi	sp,sp,-24
 c004284:	dfc00515 	stw	ra,20(sp)
 c004288:	df000415 	stw	fp,16(sp)
 c00428c:	df000404 	addi	fp,sp,16
 c004290:	e13ffd15 	stw	r4,-12(fp)
 c004294:	e17ffe15 	stw	r5,-8(fp)
 c004298:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
 c00429c:	e0bffd17 	ldw	r2,-12(fp)
 c0042a0:	10800017 	ldw	r2,0(r2)
 c0042a4:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
 c0042a8:	e0bffc17 	ldw	r2,-16(fp)
 c0042ac:	11000a04 	addi	r4,r2,40
 c0042b0:	e17ffe17 	ldw	r5,-8(fp)
 c0042b4:	e1bfff17 	ldw	r6,-4(fp)
 c0042b8:	c0046dc0 	call	c0046dc <altera_avalon_jtag_uart_ioctl>
}
 c0042bc:	e037883a 	mov	sp,fp
 c0042c0:	dfc00117 	ldw	ra,4(sp)
 c0042c4:	df000017 	ldw	fp,0(sp)
 c0042c8:	dec00204 	addi	sp,sp,8
 c0042cc:	f800283a 	ret

0c0042d0 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
 c0042d0:	defffa04 	addi	sp,sp,-24
 c0042d4:	dfc00515 	stw	ra,20(sp)
 c0042d8:	df000415 	stw	fp,16(sp)
 c0042dc:	df000404 	addi	fp,sp,16
 c0042e0:	e13ffd15 	stw	r4,-12(fp)
 c0042e4:	e17ffe15 	stw	r5,-8(fp)
 c0042e8:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 c0042ec:	e0fffd17 	ldw	r3,-12(fp)
 c0042f0:	00800044 	movi	r2,1
 c0042f4:	18800815 	stw	r2,32(r3)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
 c0042f8:	e0bffd17 	ldw	r2,-12(fp)
 c0042fc:	10800017 	ldw	r2,0(r2)
 c004300:	11000104 	addi	r4,r2,4
 c004304:	e0bffd17 	ldw	r2,-12(fp)
 c004308:	10800817 	ldw	r2,32(r2)
 c00430c:	1007883a 	mov	r3,r2
 c004310:	2005883a 	mov	r2,r4
 c004314:	10c00035 	stwio	r3,0(r2)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
 c004318:	e13ffe17 	ldw	r4,-8(fp)
 c00431c:	e17fff17 	ldw	r5,-4(fp)
 c004320:	d8000015 	stw	zero,0(sp)
 c004324:	01830034 	movhi	r6,3072
 c004328:	3190e404 	addi	r6,r6,17296
 c00432c:	e1fffd17 	ldw	r7,-12(fp)
 c004330:	c0061f00 	call	c0061f0 <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
 c004334:	e0bffd17 	ldw	r2,-12(fp)
 c004338:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
 c00433c:	e0bffd17 	ldw	r2,-12(fp)
 c004340:	11000204 	addi	r4,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
 c004344:	00830074 	movhi	r2,3073
 c004348:	10aaf404 	addi	r2,r2,-21552
 c00434c:	10800017 	ldw	r2,0(r2)
 c004350:	100b883a 	mov	r5,r2
 c004354:	01830034 	movhi	r6,3072
 c004358:	31916e04 	addi	r6,r6,17848
 c00435c:	e1fffd17 	ldw	r7,-12(fp)
 c004360:	c005db80 	call	c005db8 <alt_alarm_start>
 c004364:	1004403a 	cmpge	r2,r2,zero
 c004368:	1000041e 	bne	r2,zero,c00437c <altera_avalon_jtag_uart_init+0xac>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
 c00436c:	e0fffd17 	ldw	r3,-12(fp)
 c004370:	00a00034 	movhi	r2,32768
 c004374:	10bfffc4 	addi	r2,r2,-1
 c004378:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
 c00437c:	e037883a 	mov	sp,fp
 c004380:	dfc00117 	ldw	ra,4(sp)
 c004384:	df000017 	ldw	fp,0(sp)
 c004388:	dec00204 	addi	sp,sp,8
 c00438c:	f800283a 	ret

0c004390 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
 c004390:	defff804 	addi	sp,sp,-32
 c004394:	df000715 	stw	fp,28(sp)
 c004398:	df000704 	addi	fp,sp,28
 c00439c:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
 c0043a0:	e0bfff17 	ldw	r2,-4(fp)
 c0043a4:	e0bffe15 	stw	r2,-8(fp)
  unsigned int base = sp->base;
 c0043a8:	e0bffe17 	ldw	r2,-8(fp)
 c0043ac:	10800017 	ldw	r2,0(r2)
 c0043b0:	e0bffd15 	stw	r2,-12(fp)
 c0043b4:	00000006 	br	c0043b8 <altera_avalon_jtag_uart_irq+0x28>
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 c0043b8:	e0bffd17 	ldw	r2,-12(fp)
 c0043bc:	10800104 	addi	r2,r2,4
 c0043c0:	10800037 	ldwio	r2,0(r2)
 c0043c4:	e0bffc15 	stw	r2,-16(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
 c0043c8:	e0bffc17 	ldw	r2,-16(fp)
 c0043cc:	1080c00c 	andi	r2,r2,768
 c0043d0:	1005003a 	cmpeq	r2,r2,zero
 c0043d4:	1000741e 	bne	r2,zero,c0045a8 <altera_avalon_jtag_uart_irq+0x218>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
 c0043d8:	e0bffc17 	ldw	r2,-16(fp)
 c0043dc:	1080400c 	andi	r2,r2,256
 c0043e0:	1005003a 	cmpeq	r2,r2,zero
 c0043e4:	1000351e 	bne	r2,zero,c0044bc <altera_avalon_jtag_uart_irq+0x12c>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
 c0043e8:	00800074 	movhi	r2,1
 c0043ec:	e0bffb15 	stw	r2,-20(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 c0043f0:	e0bffe17 	ldw	r2,-8(fp)
 c0043f4:	10800a17 	ldw	r2,40(r2)
 c0043f8:	10800044 	addi	r2,r2,1
 c0043fc:	1081ffcc 	andi	r2,r2,2047
 c004400:	e0bffa15 	stw	r2,-24(fp)
        if (next == sp->rx_out)
 c004404:	e0bffe17 	ldw	r2,-8(fp)
 c004408:	10c00b17 	ldw	r3,44(r2)
 c00440c:	e0bffa17 	ldw	r2,-24(fp)
 c004410:	18801626 	beq	r3,r2,c00446c <altera_avalon_jtag_uart_irq+0xdc>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
 c004414:	e0bffd17 	ldw	r2,-12(fp)
 c004418:	10800037 	ldwio	r2,0(r2)
 c00441c:	e0bffb15 	stw	r2,-20(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
 c004420:	e0bffb17 	ldw	r2,-20(fp)
 c004424:	10a0000c 	andi	r2,r2,32768
 c004428:	1005003a 	cmpeq	r2,r2,zero
 c00442c:	10000f1e 	bne	r2,zero,c00446c <altera_avalon_jtag_uart_irq+0xdc>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
 c004430:	e0bffe17 	ldw	r2,-8(fp)
 c004434:	10c00a17 	ldw	r3,40(r2)
 c004438:	e0bffb17 	ldw	r2,-20(fp)
 c00443c:	1009883a 	mov	r4,r2
 c004440:	e0bffe17 	ldw	r2,-8(fp)
 c004444:	1885883a 	add	r2,r3,r2
 c004448:	10800e04 	addi	r2,r2,56
 c00444c:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 c004450:	e0bffe17 	ldw	r2,-8(fp)
 c004454:	10800a17 	ldw	r2,40(r2)
 c004458:	10800044 	addi	r2,r2,1
 c00445c:	10c1ffcc 	andi	r3,r2,2047
 c004460:	e0bffe17 	ldw	r2,-8(fp)
 c004464:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
 c004468:	003fe106 	br	c0043f0 <altera_avalon_jtag_uart_irq+0x60>

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
 c00446c:	e0bffb17 	ldw	r2,-20(fp)
 c004470:	10bfffec 	andhi	r2,r2,65535
 c004474:	1005003a 	cmpeq	r2,r2,zero
 c004478:	1000101e 	bne	r2,zero,c0044bc <altera_avalon_jtag_uart_irq+0x12c>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 c00447c:	e0bffe17 	ldw	r2,-8(fp)
 c004480:	10c00817 	ldw	r3,32(r2)
 c004484:	00bfff84 	movi	r2,-2
 c004488:	1886703a 	and	r3,r3,r2
 c00448c:	e0bffe17 	ldw	r2,-8(fp)
 c004490:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
 c004494:	e0bffd17 	ldw	r2,-12(fp)
 c004498:	11000104 	addi	r4,r2,4
 c00449c:	e0bffe17 	ldw	r2,-8(fp)
 c0044a0:	10800817 	ldw	r2,32(r2)
 c0044a4:	1007883a 	mov	r3,r2
 c0044a8:	2005883a 	mov	r2,r4
 c0044ac:	10c00035 	stwio	r3,0(r2)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 c0044b0:	e0bffd17 	ldw	r2,-12(fp)
 c0044b4:	10800104 	addi	r2,r2,4
 c0044b8:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
 c0044bc:	e0bffc17 	ldw	r2,-16(fp)
 c0044c0:	1080800c 	andi	r2,r2,512
 c0044c4:	1005003a 	cmpeq	r2,r2,zero
 c0044c8:	103fbb1e 	bne	r2,zero,c0043b8 <altera_avalon_jtag_uart_irq+0x28>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
 c0044cc:	e0bffc17 	ldw	r2,-16(fp)
 c0044d0:	10bfffec 	andhi	r2,r2,65535
 c0044d4:	1004d43a 	srli	r2,r2,16
 c0044d8:	e0bff915 	stw	r2,-28(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
 c0044dc:	00001506 	br	c004534 <altera_avalon_jtag_uart_irq+0x1a4>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
 c0044e0:	e13ffd17 	ldw	r4,-12(fp)
 c0044e4:	e0bffe17 	ldw	r2,-8(fp)
 c0044e8:	10c00d17 	ldw	r3,52(r2)
 c0044ec:	e0bffe17 	ldw	r2,-8(fp)
 c0044f0:	1885883a 	add	r2,r3,r2
 c0044f4:	10820e04 	addi	r2,r2,2104
 c0044f8:	10800003 	ldbu	r2,0(r2)
 c0044fc:	10c03fcc 	andi	r3,r2,255
 c004500:	18c0201c 	xori	r3,r3,128
 c004504:	18ffe004 	addi	r3,r3,-128
 c004508:	2005883a 	mov	r2,r4
 c00450c:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 c004510:	e0bffe17 	ldw	r2,-8(fp)
 c004514:	10800d17 	ldw	r2,52(r2)
 c004518:	10800044 	addi	r2,r2,1
 c00451c:	10c1ffcc 	andi	r3,r2,2047
 c004520:	e0bffe17 	ldw	r2,-8(fp)
 c004524:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
 c004528:	e0bff917 	ldw	r2,-28(fp)
 c00452c:	10bfffc4 	addi	r2,r2,-1
 c004530:	e0bff915 	stw	r2,-28(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
 c004534:	e0bff917 	ldw	r2,-28(fp)
 c004538:	1005003a 	cmpeq	r2,r2,zero
 c00453c:	1000051e 	bne	r2,zero,c004554 <altera_avalon_jtag_uart_irq+0x1c4>
 c004540:	e0bffe17 	ldw	r2,-8(fp)
 c004544:	10c00d17 	ldw	r3,52(r2)
 c004548:	e0bffe17 	ldw	r2,-8(fp)
 c00454c:	10800c17 	ldw	r2,48(r2)
 c004550:	18bfe31e 	bne	r3,r2,c0044e0 <altera_avalon_jtag_uart_irq+0x150>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
 c004554:	e0bff917 	ldw	r2,-28(fp)
 c004558:	1005003a 	cmpeq	r2,r2,zero
 c00455c:	103f961e 	bne	r2,zero,c0043b8 <altera_avalon_jtag_uart_irq+0x28>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
 c004560:	e0bffe17 	ldw	r2,-8(fp)
 c004564:	10c00817 	ldw	r3,32(r2)
 c004568:	00bfff44 	movi	r2,-3
 c00456c:	1886703a 	and	r3,r3,r2
 c004570:	e0bffe17 	ldw	r2,-8(fp)
 c004574:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 c004578:	e0bffe17 	ldw	r2,-8(fp)
 c00457c:	10800017 	ldw	r2,0(r2)
 c004580:	11000104 	addi	r4,r2,4
 c004584:	e0bffe17 	ldw	r2,-8(fp)
 c004588:	10800817 	ldw	r2,32(r2)
 c00458c:	1007883a 	mov	r3,r2
 c004590:	2005883a 	mov	r2,r4
 c004594:	10c00035 	stwio	r3,0(r2)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 c004598:	e0bffd17 	ldw	r2,-12(fp)
 c00459c:	10800104 	addi	r2,r2,4
 c0045a0:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
 c0045a4:	003f8406 	br	c0043b8 <altera_avalon_jtag_uart_irq+0x28>
}
 c0045a8:	e037883a 	mov	sp,fp
 c0045ac:	df000017 	ldw	fp,0(sp)
 c0045b0:	dec00104 	addi	sp,sp,4
 c0045b4:	f800283a 	ret

0c0045b8 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
 c0045b8:	defffc04 	addi	sp,sp,-16
 c0045bc:	df000315 	stw	fp,12(sp)
 c0045c0:	df000304 	addi	fp,sp,12
 c0045c4:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
 c0045c8:	e0bfff17 	ldw	r2,-4(fp)
 c0045cc:	e0bffe15 	stw	r2,-8(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
 c0045d0:	e0bffe17 	ldw	r2,-8(fp)
 c0045d4:	10800017 	ldw	r2,0(r2)
 c0045d8:	10800104 	addi	r2,r2,4
 c0045dc:	10800037 	ldwio	r2,0(r2)
 c0045e0:	e0bffd15 	stw	r2,-12(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
 c0045e4:	e0bffd17 	ldw	r2,-12(fp)
 c0045e8:	1081000c 	andi	r2,r2,1024
 c0045ec:	1005003a 	cmpeq	r2,r2,zero
 c0045f0:	10000c1e 	bne	r2,zero,c004624 <altera_avalon_jtag_uart_timeout+0x6c>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
 c0045f4:	e0bffe17 	ldw	r2,-8(fp)
 c0045f8:	10800017 	ldw	r2,0(r2)
 c0045fc:	11000104 	addi	r4,r2,4
 c004600:	e0bffe17 	ldw	r2,-8(fp)
 c004604:	10800817 	ldw	r2,32(r2)
 c004608:	10810014 	ori	r2,r2,1024
 c00460c:	1007883a 	mov	r3,r2
 c004610:	2005883a 	mov	r2,r4
 c004614:	10c00035 	stwio	r3,0(r2)
    sp->host_inactive = 0;
 c004618:	e0bffe17 	ldw	r2,-8(fp)
 c00461c:	10000915 	stw	zero,36(r2)
 c004620:	00000a06 	br	c00464c <altera_avalon_jtag_uart_timeout+0x94>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
 c004624:	e0bffe17 	ldw	r2,-8(fp)
 c004628:	10c00917 	ldw	r3,36(r2)
 c00462c:	00a00034 	movhi	r2,32768
 c004630:	10bfff04 	addi	r2,r2,-4
 c004634:	10c00536 	bltu	r2,r3,c00464c <altera_avalon_jtag_uart_timeout+0x94>
    sp->host_inactive++;
 c004638:	e0bffe17 	ldw	r2,-8(fp)
 c00463c:	10800917 	ldw	r2,36(r2)
 c004640:	10c00044 	addi	r3,r2,1
 c004644:	e0bffe17 	ldw	r2,-8(fp)
 c004648:	10c00915 	stw	r3,36(r2)
 c00464c:	00830074 	movhi	r2,3073
 c004650:	10aaf404 	addi	r2,r2,-21552
 c004654:	10800017 	ldw	r2,0(r2)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
 c004658:	e037883a 	mov	sp,fp
 c00465c:	df000017 	ldw	fp,0(sp)
 c004660:	dec00104 	addi	sp,sp,4
 c004664:	f800283a 	ret

0c004668 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
 c004668:	defffc04 	addi	sp,sp,-16
 c00466c:	df000315 	stw	fp,12(sp)
 c004670:	df000304 	addi	fp,sp,12
 c004674:	e13ffd15 	stw	r4,-12(fp)
 c004678:	e17ffe15 	stw	r5,-8(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
 c00467c:	00000706 	br	c00469c <altera_avalon_jtag_uart_close+0x34>
    if (flags & O_NONBLOCK) {
 c004680:	e0bffe17 	ldw	r2,-8(fp)
 c004684:	1090000c 	andi	r2,r2,16384
 c004688:	1005003a 	cmpeq	r2,r2,zero
 c00468c:	1000031e 	bne	r2,zero,c00469c <altera_avalon_jtag_uart_close+0x34>
      return -EWOULDBLOCK; 
 c004690:	00bffd44 	movi	r2,-11
 c004694:	e0bfff15 	stw	r2,-4(fp)
 c004698:	00000b06 	br	c0046c8 <altera_avalon_jtag_uart_close+0x60>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
 c00469c:	e0bffd17 	ldw	r2,-12(fp)
 c0046a0:	10c00d17 	ldw	r3,52(r2)
 c0046a4:	e0bffd17 	ldw	r2,-12(fp)
 c0046a8:	10800c17 	ldw	r2,48(r2)
 c0046ac:	18800526 	beq	r3,r2,c0046c4 <altera_avalon_jtag_uart_close+0x5c>
 c0046b0:	e0bffd17 	ldw	r2,-12(fp)
 c0046b4:	10c00917 	ldw	r3,36(r2)
 c0046b8:	e0bffd17 	ldw	r2,-12(fp)
 c0046bc:	10800117 	ldw	r2,4(r2)
 c0046c0:	18bfef36 	bltu	r3,r2,c004680 <altera_avalon_jtag_uart_close+0x18>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
 c0046c4:	e03fff15 	stw	zero,-4(fp)
 c0046c8:	e0bfff17 	ldw	r2,-4(fp)
}
 c0046cc:	e037883a 	mov	sp,fp
 c0046d0:	df000017 	ldw	fp,0(sp)
 c0046d4:	dec00104 	addi	sp,sp,4
 c0046d8:	f800283a 	ret

0c0046dc <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
 c0046dc:	defff804 	addi	sp,sp,-32
 c0046e0:	df000715 	stw	fp,28(sp)
 c0046e4:	df000704 	addi	fp,sp,28
 c0046e8:	e13ffb15 	stw	r4,-20(fp)
 c0046ec:	e17ffc15 	stw	r5,-16(fp)
 c0046f0:	e1bffd15 	stw	r6,-12(fp)
  int rc = -ENOTTY;
 c0046f4:	00bff9c4 	movi	r2,-25
 c0046f8:	e0bffa15 	stw	r2,-24(fp)

  switch (req)
 c0046fc:	e0bffc17 	ldw	r2,-16(fp)
 c004700:	e0bfff15 	stw	r2,-4(fp)
 c004704:	e0ffff17 	ldw	r3,-4(fp)
 c004708:	189a8060 	cmpeqi	r2,r3,27137
 c00470c:	1000041e 	bne	r2,zero,c004720 <altera_avalon_jtag_uart_ioctl+0x44>
 c004710:	e0ffff17 	ldw	r3,-4(fp)
 c004714:	189a80a0 	cmpeqi	r2,r3,27138
 c004718:	10001b1e 	bne	r2,zero,c004788 <altera_avalon_jtag_uart_ioctl+0xac>
 c00471c:	00002706 	br	c0047bc <altera_avalon_jtag_uart_ioctl+0xe0>
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
 c004720:	e0bffb17 	ldw	r2,-20(fp)
 c004724:	10c00117 	ldw	r3,4(r2)
 c004728:	00a00034 	movhi	r2,32768
 c00472c:	10bfffc4 	addi	r2,r2,-1
 c004730:	18802226 	beq	r3,r2,c0047bc <altera_avalon_jtag_uart_ioctl+0xe0>
    {
      int timeout = *((int *)arg);
 c004734:	e0bffd17 	ldw	r2,-12(fp)
 c004738:	10800017 	ldw	r2,0(r2)
 c00473c:	e0bff915 	stw	r2,-28(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
 c004740:	e0bff917 	ldw	r2,-28(fp)
 c004744:	10800090 	cmplti	r2,r2,2
 c004748:	1000071e 	bne	r2,zero,c004768 <altera_avalon_jtag_uart_ioctl+0x8c>
 c00474c:	e0fff917 	ldw	r3,-28(fp)
 c004750:	00a00034 	movhi	r2,32768
 c004754:	10bfffc4 	addi	r2,r2,-1
 c004758:	18800326 	beq	r3,r2,c004768 <altera_avalon_jtag_uart_ioctl+0x8c>
 c00475c:	e0bff917 	ldw	r2,-28(fp)
 c004760:	e0bffe15 	stw	r2,-8(fp)
 c004764:	00000306 	br	c004774 <altera_avalon_jtag_uart_ioctl+0x98>
 c004768:	00e00034 	movhi	r3,32768
 c00476c:	18ffff84 	addi	r3,r3,-2
 c004770:	e0fffe15 	stw	r3,-8(fp)
 c004774:	e0bffb17 	ldw	r2,-20(fp)
 c004778:	e0fffe17 	ldw	r3,-8(fp)
 c00477c:	10c00115 	stw	r3,4(r2)
      rc = 0;
 c004780:	e03ffa15 	stw	zero,-24(fp)
    }
    break;
 c004784:	00000d06 	br	c0047bc <altera_avalon_jtag_uart_ioctl+0xe0>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
 c004788:	e0bffb17 	ldw	r2,-20(fp)
 c00478c:	10c00117 	ldw	r3,4(r2)
 c004790:	00a00034 	movhi	r2,32768
 c004794:	10bfffc4 	addi	r2,r2,-1
 c004798:	18800826 	beq	r3,r2,c0047bc <altera_avalon_jtag_uart_ioctl+0xe0>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
 c00479c:	e13ffd17 	ldw	r4,-12(fp)
 c0047a0:	e0bffb17 	ldw	r2,-20(fp)
 c0047a4:	10c00917 	ldw	r3,36(r2)
 c0047a8:	e0bffb17 	ldw	r2,-20(fp)
 c0047ac:	10800117 	ldw	r2,4(r2)
 c0047b0:	1885803a 	cmpltu	r2,r3,r2
 c0047b4:	20800015 	stw	r2,0(r4)
      rc = 0;
 c0047b8:	e03ffa15 	stw	zero,-24(fp)

  default:
    break;
  }

  return rc;
 c0047bc:	e0bffa17 	ldw	r2,-24(fp)
}
 c0047c0:	e037883a 	mov	sp,fp
 c0047c4:	df000017 	ldw	fp,0(sp)
 c0047c8:	dec00104 	addi	sp,sp,4
 c0047cc:	f800283a 	ret

0c0047d0 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
 c0047d0:	defff204 	addi	sp,sp,-56
 c0047d4:	dfc00d15 	stw	ra,52(sp)
 c0047d8:	df000c15 	stw	fp,48(sp)
 c0047dc:	df000c04 	addi	fp,sp,48
 c0047e0:	e13ffb15 	stw	r4,-20(fp)
 c0047e4:	e17ffc15 	stw	r5,-16(fp)
 c0047e8:	e1bffd15 	stw	r6,-12(fp)
 c0047ec:	e1fffe15 	stw	r7,-8(fp)
  char * ptr = buffer;
 c0047f0:	e0bffc17 	ldw	r2,-16(fp)
 c0047f4:	e0bffa15 	stw	r2,-24(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
 c0047f8:	00004806 	br	c00491c <altera_avalon_jtag_uart_read+0x14c>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
 c0047fc:	e0bffb17 	ldw	r2,-20(fp)
 c004800:	10800a17 	ldw	r2,40(r2)
 c004804:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
 c004808:	e0bffb17 	ldw	r2,-20(fp)
 c00480c:	10800b17 	ldw	r2,44(r2)
 c004810:	e0bff615 	stw	r2,-40(fp)

      if (in >= out)
 c004814:	e0fff717 	ldw	r3,-36(fp)
 c004818:	e0bff617 	ldw	r2,-40(fp)
 c00481c:	18800536 	bltu	r3,r2,c004834 <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
 c004820:	e0bff717 	ldw	r2,-36(fp)
 c004824:	e0fff617 	ldw	r3,-40(fp)
 c004828:	10c5c83a 	sub	r2,r2,r3
 c00482c:	e0bff815 	stw	r2,-32(fp)
 c004830:	00000406 	br	c004844 <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
 c004834:	00820004 	movi	r2,2048
 c004838:	e0fff617 	ldw	r3,-40(fp)
 c00483c:	10c5c83a 	sub	r2,r2,r3
 c004840:	e0bff815 	stw	r2,-32(fp)

      if (n == 0)
 c004844:	e0bff817 	ldw	r2,-32(fp)
 c004848:	1005003a 	cmpeq	r2,r2,zero
 c00484c:	10001f1e 	bne	r2,zero,c0048cc <altera_avalon_jtag_uart_read+0xfc>
        break; /* No more data available */

      if (n > space)
 c004850:	e0fffd17 	ldw	r3,-12(fp)
 c004854:	e0bff817 	ldw	r2,-32(fp)
 c004858:	1880022e 	bgeu	r3,r2,c004864 <altera_avalon_jtag_uart_read+0x94>
        n = space;
 c00485c:	e0bffd17 	ldw	r2,-12(fp)
 c004860:	e0bff815 	stw	r2,-32(fp)

      memcpy(ptr, sp->rx_buf + out, n);
 c004864:	e0bffb17 	ldw	r2,-20(fp)
 c004868:	10c00e04 	addi	r3,r2,56
 c00486c:	e0bff617 	ldw	r2,-40(fp)
 c004870:	1887883a 	add	r3,r3,r2
 c004874:	e0bffa17 	ldw	r2,-24(fp)
 c004878:	1009883a 	mov	r4,r2
 c00487c:	180b883a 	mov	r5,r3
 c004880:	e1bff817 	ldw	r6,-32(fp)
 c004884:	c00100c0 	call	c00100c <memcpy>
      ptr   += n;
 c004888:	e0fff817 	ldw	r3,-32(fp)
 c00488c:	e0bffa17 	ldw	r2,-24(fp)
 c004890:	10c5883a 	add	r2,r2,r3
 c004894:	e0bffa15 	stw	r2,-24(fp)
      space -= n;
 c004898:	e0fffd17 	ldw	r3,-12(fp)
 c00489c:	e0bff817 	ldw	r2,-32(fp)
 c0048a0:	1885c83a 	sub	r2,r3,r2
 c0048a4:	e0bffd15 	stw	r2,-12(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 c0048a8:	e0fff617 	ldw	r3,-40(fp)
 c0048ac:	e0bff817 	ldw	r2,-32(fp)
 c0048b0:	1885883a 	add	r2,r3,r2
 c0048b4:	10c1ffcc 	andi	r3,r2,2047
 c0048b8:	e0bffb17 	ldw	r2,-20(fp)
 c0048bc:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
 c0048c0:	e0bffd17 	ldw	r2,-12(fp)
 c0048c4:	10800048 	cmpgei	r2,r2,1
 c0048c8:	103fcc1e 	bne	r2,zero,c0047fc <altera_avalon_jtag_uart_read+0x2c>

    /* If we read any data then return it */
    if (ptr != buffer)
 c0048cc:	e0fffa17 	ldw	r3,-24(fp)
 c0048d0:	e0bffc17 	ldw	r2,-16(fp)
 c0048d4:	1880141e 	bne	r3,r2,c004928 <altera_avalon_jtag_uart_read+0x158>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
 c0048d8:	e0bffe17 	ldw	r2,-8(fp)
 c0048dc:	1090000c 	andi	r2,r2,16384
 c0048e0:	1004c03a 	cmpne	r2,r2,zero
 c0048e4:	1000101e 	bne	r2,zero,c004928 <altera_avalon_jtag_uart_read+0x158>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
 c0048e8:	e0bffb17 	ldw	r2,-20(fp)
 c0048ec:	10c00a17 	ldw	r3,40(r2)
 c0048f0:	e0bff717 	ldw	r2,-36(fp)
 c0048f4:	1880051e 	bne	r3,r2,c00490c <altera_avalon_jtag_uart_read+0x13c>
 c0048f8:	e0bffb17 	ldw	r2,-20(fp)
 c0048fc:	10c00917 	ldw	r3,36(r2)
 c004900:	e0bffb17 	ldw	r2,-20(fp)
 c004904:	10800117 	ldw	r2,4(r2)
 c004908:	18bff736 	bltu	r3,r2,c0048e8 <altera_avalon_jtag_uart_read+0x118>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
 c00490c:	e0bffb17 	ldw	r2,-20(fp)
 c004910:	10c00a17 	ldw	r3,40(r2)
 c004914:	e0bff717 	ldw	r2,-36(fp)
 c004918:	18800326 	beq	r3,r2,c004928 <altera_avalon_jtag_uart_read+0x158>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
 c00491c:	e0bffd17 	ldw	r2,-12(fp)
 c004920:	10800048 	cmpgei	r2,r2,1
 c004924:	103fb51e 	bne	r2,zero,c0047fc <altera_avalon_jtag_uart_read+0x2c>
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
 c004928:	e0fffa17 	ldw	r3,-24(fp)
 c00492c:	e0bffc17 	ldw	r2,-16(fp)
 c004930:	18801926 	beq	r3,r2,c004998 <altera_avalon_jtag_uart_read+0x1c8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 c004934:	0005303a 	rdctl	r2,status
 c004938:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 c00493c:	e0fff517 	ldw	r3,-44(fp)
 c004940:	00bfff84 	movi	r2,-2
 c004944:	1884703a 	and	r2,r3,r2
 c004948:	1001703a 	wrctl	status,r2
  
  return context;
 c00494c:	e0bff517 	ldw	r2,-44(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
 c004950:	e0bff915 	stw	r2,-28(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 c004954:	e0bffb17 	ldw	r2,-20(fp)
 c004958:	10800817 	ldw	r2,32(r2)
 c00495c:	10c00054 	ori	r3,r2,1
 c004960:	e0bffb17 	ldw	r2,-20(fp)
 c004964:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 c004968:	e0bffb17 	ldw	r2,-20(fp)
 c00496c:	10800017 	ldw	r2,0(r2)
 c004970:	11000104 	addi	r4,r2,4
 c004974:	e0bffb17 	ldw	r2,-20(fp)
 c004978:	10800817 	ldw	r2,32(r2)
 c00497c:	1007883a 	mov	r3,r2
 c004980:	2005883a 	mov	r2,r4
 c004984:	10c00035 	stwio	r3,0(r2)
 c004988:	e0bff917 	ldw	r2,-28(fp)
 c00498c:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 c004990:	e0bff417 	ldw	r2,-48(fp)
 c004994:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
 c004998:	e0fffa17 	ldw	r3,-24(fp)
 c00499c:	e0bffc17 	ldw	r2,-16(fp)
 c0049a0:	18800526 	beq	r3,r2,c0049b8 <altera_avalon_jtag_uart_read+0x1e8>
    return ptr - buffer;
 c0049a4:	e0fffa17 	ldw	r3,-24(fp)
 c0049a8:	e0bffc17 	ldw	r2,-16(fp)
 c0049ac:	1887c83a 	sub	r3,r3,r2
 c0049b0:	e0ffff15 	stw	r3,-4(fp)
 c0049b4:	00000906 	br	c0049dc <altera_avalon_jtag_uart_read+0x20c>
  else if (flags & O_NONBLOCK)
 c0049b8:	e0bffe17 	ldw	r2,-8(fp)
 c0049bc:	1090000c 	andi	r2,r2,16384
 c0049c0:	1005003a 	cmpeq	r2,r2,zero
 c0049c4:	1000031e 	bne	r2,zero,c0049d4 <altera_avalon_jtag_uart_read+0x204>
    return -EWOULDBLOCK;
 c0049c8:	00bffd44 	movi	r2,-11
 c0049cc:	e0bfff15 	stw	r2,-4(fp)
 c0049d0:	00000206 	br	c0049dc <altera_avalon_jtag_uart_read+0x20c>
  else
    return -EIO;
 c0049d4:	00bffec4 	movi	r2,-5
 c0049d8:	e0bfff15 	stw	r2,-4(fp)
 c0049dc:	e0bfff17 	ldw	r2,-4(fp)
}
 c0049e0:	e037883a 	mov	sp,fp
 c0049e4:	dfc00117 	ldw	ra,4(sp)
 c0049e8:	df000017 	ldw	fp,0(sp)
 c0049ec:	dec00204 	addi	sp,sp,8
 c0049f0:	f800283a 	ret

0c0049f4 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
 c0049f4:	defff204 	addi	sp,sp,-56
 c0049f8:	dfc00d15 	stw	ra,52(sp)
 c0049fc:	df000c15 	stw	fp,48(sp)
 c004a00:	df000c04 	addi	fp,sp,48
 c004a04:	e13ffb15 	stw	r4,-20(fp)
 c004a08:	e17ffc15 	stw	r5,-16(fp)
 c004a0c:	e1bffd15 	stw	r6,-12(fp)
 c004a10:	e1fffe15 	stw	r7,-8(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
 c004a14:	e03ff915 	stw	zero,-28(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
 c004a18:	e0bffc17 	ldw	r2,-16(fp)
 c004a1c:	e0bff615 	stw	r2,-40(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
 c004a20:	00003a06 	br	c004b0c <altera_avalon_jtag_uart_write+0x118>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
 c004a24:	e0bffb17 	ldw	r2,-20(fp)
 c004a28:	10800c17 	ldw	r2,48(r2)
 c004a2c:	e0bffa15 	stw	r2,-24(fp)
      out = sp->tx_out;
 c004a30:	e0bffb17 	ldw	r2,-20(fp)
 c004a34:	10800d17 	ldw	r2,52(r2)
 c004a38:	e0bff915 	stw	r2,-28(fp)

      if (in < out)
 c004a3c:	e0fffa17 	ldw	r3,-24(fp)
 c004a40:	e0bff917 	ldw	r2,-28(fp)
 c004a44:	1880062e 	bgeu	r3,r2,c004a60 <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
 c004a48:	e0fff917 	ldw	r3,-28(fp)
 c004a4c:	e0bffa17 	ldw	r2,-24(fp)
 c004a50:	1885c83a 	sub	r2,r3,r2
 c004a54:	10bfffc4 	addi	r2,r2,-1
 c004a58:	e0bff815 	stw	r2,-32(fp)
 c004a5c:	00000c06 	br	c004a90 <altera_avalon_jtag_uart_write+0x9c>
      else if (out > 0)
 c004a60:	e0bff917 	ldw	r2,-28(fp)
 c004a64:	1005003a 	cmpeq	r2,r2,zero
 c004a68:	1000051e 	bne	r2,zero,c004a80 <altera_avalon_jtag_uart_write+0x8c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
 c004a6c:	00820004 	movi	r2,2048
 c004a70:	e0fffa17 	ldw	r3,-24(fp)
 c004a74:	10c5c83a 	sub	r2,r2,r3
 c004a78:	e0bff815 	stw	r2,-32(fp)
 c004a7c:	00000406 	br	c004a90 <altera_avalon_jtag_uart_write+0x9c>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
 c004a80:	0081ffc4 	movi	r2,2047
 c004a84:	e0fffa17 	ldw	r3,-24(fp)
 c004a88:	10c5c83a 	sub	r2,r2,r3
 c004a8c:	e0bff815 	stw	r2,-32(fp)

      if (n == 0)
 c004a90:	e0bff817 	ldw	r2,-32(fp)
 c004a94:	1005003a 	cmpeq	r2,r2,zero
 c004a98:	10001f1e 	bne	r2,zero,c004b18 <altera_avalon_jtag_uart_write+0x124>
        break;

      if (n > count)
 c004a9c:	e0fffd17 	ldw	r3,-12(fp)
 c004aa0:	e0bff817 	ldw	r2,-32(fp)
 c004aa4:	1880022e 	bgeu	r3,r2,c004ab0 <altera_avalon_jtag_uart_write+0xbc>
        n = count;
 c004aa8:	e0bffd17 	ldw	r2,-12(fp)
 c004aac:	e0bff815 	stw	r2,-32(fp)

      memcpy(sp->tx_buf + in, ptr, n);
 c004ab0:	e0bffb17 	ldw	r2,-20(fp)
 c004ab4:	10c20e04 	addi	r3,r2,2104
 c004ab8:	e0bffa17 	ldw	r2,-24(fp)
 c004abc:	1885883a 	add	r2,r3,r2
 c004ac0:	e0fffc17 	ldw	r3,-16(fp)
 c004ac4:	1009883a 	mov	r4,r2
 c004ac8:	180b883a 	mov	r5,r3
 c004acc:	e1bff817 	ldw	r6,-32(fp)
 c004ad0:	c00100c0 	call	c00100c <memcpy>
      ptr   += n;
 c004ad4:	e0fff817 	ldw	r3,-32(fp)
 c004ad8:	e0bffc17 	ldw	r2,-16(fp)
 c004adc:	10c5883a 	add	r2,r2,r3
 c004ae0:	e0bffc15 	stw	r2,-16(fp)
      count -= n;
 c004ae4:	e0fffd17 	ldw	r3,-12(fp)
 c004ae8:	e0bff817 	ldw	r2,-32(fp)
 c004aec:	1885c83a 	sub	r2,r3,r2
 c004af0:	e0bffd15 	stw	r2,-12(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 c004af4:	e0fffa17 	ldw	r3,-24(fp)
 c004af8:	e0bff817 	ldw	r2,-32(fp)
 c004afc:	1885883a 	add	r2,r3,r2
 c004b00:	10c1ffcc 	andi	r3,r2,2047
 c004b04:	e0bffb17 	ldw	r2,-20(fp)
 c004b08:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
 c004b0c:	e0bffd17 	ldw	r2,-12(fp)
 c004b10:	10800048 	cmpgei	r2,r2,1
 c004b14:	103fc31e 	bne	r2,zero,c004a24 <altera_avalon_jtag_uart_write+0x30>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 c004b18:	0005303a 	rdctl	r2,status
 c004b1c:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 c004b20:	e0fff517 	ldw	r3,-44(fp)
 c004b24:	00bfff84 	movi	r2,-2
 c004b28:	1884703a 	and	r2,r3,r2
 c004b2c:	1001703a 	wrctl	status,r2
  
  return context;
 c004b30:	e0bff517 	ldw	r2,-44(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
 c004b34:	e0bff715 	stw	r2,-36(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
 c004b38:	e0bffb17 	ldw	r2,-20(fp)
 c004b3c:	10800817 	ldw	r2,32(r2)
 c004b40:	10c00094 	ori	r3,r2,2
 c004b44:	e0bffb17 	ldw	r2,-20(fp)
 c004b48:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 c004b4c:	e0bffb17 	ldw	r2,-20(fp)
 c004b50:	10800017 	ldw	r2,0(r2)
 c004b54:	11000104 	addi	r4,r2,4
 c004b58:	e0bffb17 	ldw	r2,-20(fp)
 c004b5c:	10800817 	ldw	r2,32(r2)
 c004b60:	1007883a 	mov	r3,r2
 c004b64:	2005883a 	mov	r2,r4
 c004b68:	10c00035 	stwio	r3,0(r2)
 c004b6c:	e0bff717 	ldw	r2,-36(fp)
 c004b70:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 c004b74:	e0bff417 	ldw	r2,-48(fp)
 c004b78:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
 c004b7c:	e0bffd17 	ldw	r2,-12(fp)
 c004b80:	10800050 	cmplti	r2,r2,1
 c004b84:	1000111e 	bne	r2,zero,c004bcc <altera_avalon_jtag_uart_write+0x1d8>
    {
      if (flags & O_NONBLOCK)
 c004b88:	e0bffe17 	ldw	r2,-8(fp)
 c004b8c:	1090000c 	andi	r2,r2,16384
 c004b90:	1004c03a 	cmpne	r2,r2,zero
 c004b94:	1000101e 	bne	r2,zero,c004bd8 <altera_avalon_jtag_uart_write+0x1e4>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
 c004b98:	e0bffb17 	ldw	r2,-20(fp)
 c004b9c:	10c00d17 	ldw	r3,52(r2)
 c004ba0:	e0bff917 	ldw	r2,-28(fp)
 c004ba4:	1880051e 	bne	r3,r2,c004bbc <altera_avalon_jtag_uart_write+0x1c8>
 c004ba8:	e0bffb17 	ldw	r2,-20(fp)
 c004bac:	10c00917 	ldw	r3,36(r2)
 c004bb0:	e0bffb17 	ldw	r2,-20(fp)
 c004bb4:	10800117 	ldw	r2,4(r2)
 c004bb8:	18bff736 	bltu	r3,r2,c004b98 <altera_avalon_jtag_uart_write+0x1a4>
        ;
#endif /* __ucosii__ */

      if (out == sp->tx_out)
 c004bbc:	e0bffb17 	ldw	r2,-20(fp)
 c004bc0:	10c00d17 	ldw	r3,52(r2)
 c004bc4:	e0bff917 	ldw	r2,-28(fp)
 c004bc8:	18800326 	beq	r3,r2,c004bd8 <altera_avalon_jtag_uart_write+0x1e4>
         break;
    }
  }
  while (count > 0);
 c004bcc:	e0bffd17 	ldw	r2,-12(fp)
 c004bd0:	10800048 	cmpgei	r2,r2,1
 c004bd4:	103fcd1e 	bne	r2,zero,c004b0c <altera_avalon_jtag_uart_write+0x118>
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
 c004bd8:	e0fffc17 	ldw	r3,-16(fp)
 c004bdc:	e0bff617 	ldw	r2,-40(fp)
 c004be0:	18800526 	beq	r3,r2,c004bf8 <altera_avalon_jtag_uart_write+0x204>
    return ptr - start;
 c004be4:	e0fffc17 	ldw	r3,-16(fp)
 c004be8:	e0bff617 	ldw	r2,-40(fp)
 c004bec:	1887c83a 	sub	r3,r3,r2
 c004bf0:	e0ffff15 	stw	r3,-4(fp)
 c004bf4:	00000906 	br	c004c1c <altera_avalon_jtag_uart_write+0x228>
  else if (flags & O_NONBLOCK)
 c004bf8:	e0bffe17 	ldw	r2,-8(fp)
 c004bfc:	1090000c 	andi	r2,r2,16384
 c004c00:	1005003a 	cmpeq	r2,r2,zero
 c004c04:	1000031e 	bne	r2,zero,c004c14 <altera_avalon_jtag_uart_write+0x220>
    return -EWOULDBLOCK;
 c004c08:	00bffd44 	movi	r2,-11
 c004c0c:	e0bfff15 	stw	r2,-4(fp)
 c004c10:	00000206 	br	c004c1c <altera_avalon_jtag_uart_write+0x228>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
 c004c14:	00bffec4 	movi	r2,-5
 c004c18:	e0bfff15 	stw	r2,-4(fp)
 c004c1c:	e0bfff17 	ldw	r2,-4(fp)
}
 c004c20:	e037883a 	mov	sp,fp
 c004c24:	dfc00117 	ldw	ra,4(sp)
 c004c28:	df000017 	ldw	fp,0(sp)
 c004c2c:	dec00204 	addi	sp,sp,8
 c004c30:	f800283a 	ret

0c004c34 <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
 c004c34:	defffa04 	addi	sp,sp,-24
 c004c38:	dfc00515 	stw	ra,20(sp)
 c004c3c:	df000415 	stw	fp,16(sp)
 c004c40:	df000404 	addi	fp,sp,16
 c004c44:	e13fff15 	stw	r4,-4(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
 c004c48:	e0bfff17 	ldw	r2,-4(fp)
 c004c4c:	10000035 	stwio	zero,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
 c004c50:	e0bfff17 	ldw	r2,-4(fp)
 c004c54:	10800104 	addi	r2,r2,4
 c004c58:	10800037 	ldwio	r2,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 c004c5c:	0005303a 	rdctl	r2,status
 c004c60:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 c004c64:	e0fffd17 	ldw	r3,-12(fp)
 c004c68:	00bfff84 	movi	r2,-2
 c004c6c:	1884703a 	and	r2,r3,r2
 c004c70:	1001703a 	wrctl	status,r2
  
  return context;
 c004c74:	e0bffd17 	ldw	r2,-12(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
 c004c78:	e0bffe15 	stw	r2,-8(fp)
  alt_tick ();
 c004c7c:	c0069880 	call	c006988 <alt_tick>
 c004c80:	e0bffe17 	ldw	r2,-8(fp)
 c004c84:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 c004c88:	e0bffc17 	ldw	r2,-16(fp)
 c004c8c:	1001703a 	wrctl	status,r2
  alt_irq_enable_all(cpu_sr);
}
 c004c90:	e037883a 	mov	sp,fp
 c004c94:	dfc00117 	ldw	ra,4(sp)
 c004c98:	df000017 	ldw	fp,0(sp)
 c004c9c:	dec00204 	addi	sp,sp,8
 c004ca0:	f800283a 	ret

0c004ca4 <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
 c004ca4:	defff804 	addi	sp,sp,-32
 c004ca8:	dfc00715 	stw	ra,28(sp)
 c004cac:	df000615 	stw	fp,24(sp)
 c004cb0:	df000604 	addi	fp,sp,24
 c004cb4:	e13ffc15 	stw	r4,-16(fp)
 c004cb8:	e17ffd15 	stw	r5,-12(fp)
 c004cbc:	e1bffe15 	stw	r6,-8(fp)
 c004cc0:	e1ffff15 	stw	r7,-4(fp)
 c004cc4:	e0bfff17 	ldw	r2,-4(fp)
 c004cc8:	e0bffb15 	stw	r2,-20(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
 c004ccc:	00830074 	movhi	r2,3073
 c004cd0:	10aaf404 	addi	r2,r2,-21552
 c004cd4:	10800017 	ldw	r2,0(r2)
 c004cd8:	1004c03a 	cmpne	r2,r2,zero
 c004cdc:	1000041e 	bne	r2,zero,c004cf0 <alt_avalon_timer_sc_init+0x4c>
  {
    _alt_tick_rate = nticks;
 c004ce0:	00c30074 	movhi	r3,3073
 c004ce4:	18eaf404 	addi	r3,r3,-21552
 c004ce8:	e0bffb17 	ldw	r2,-20(fp)
 c004cec:	18800015 	stw	r2,0(r3)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
 c004cf0:	e0bffc17 	ldw	r2,-16(fp)
 c004cf4:	10800104 	addi	r2,r2,4
 c004cf8:	1007883a 	mov	r3,r2
 c004cfc:	008001c4 	movi	r2,7
 c004d00:	18800035 	stwio	r2,0(r3)
            ALTERA_AVALON_TIMER_CONTROL_CONT_MSK |
            ALTERA_AVALON_TIMER_CONTROL_START_MSK);

  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
 c004d04:	d8000015 	stw	zero,0(sp)
 c004d08:	e13ffd17 	ldw	r4,-12(fp)
 c004d0c:	e17ffe17 	ldw	r5,-8(fp)
 c004d10:	01830034 	movhi	r6,3072
 c004d14:	31930d04 	addi	r6,r6,19508
 c004d18:	e1fffc17 	ldw	r7,-16(fp)
 c004d1c:	c0061f00 	call	c0061f0 <alt_ic_isr_register>
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
#endif  
}
 c004d20:	e037883a 	mov	sp,fp
 c004d24:	dfc00117 	ldw	ra,4(sp)
 c004d28:	df000017 	ldw	fp,0(sp)
 c004d2c:	dec00204 	addi	sp,sp,8
 c004d30:	f800283a 	ret

0c004d34 <altera_avalon_uart_read_fd>:
 *
 */

int 
altera_avalon_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
 c004d34:	defffa04 	addi	sp,sp,-24
 c004d38:	dfc00515 	stw	ra,20(sp)
 c004d3c:	df000415 	stw	fp,16(sp)
 c004d40:	df000404 	addi	fp,sp,16
 c004d44:	e13ffd15 	stw	r4,-12(fp)
 c004d48:	e17ffe15 	stw	r5,-8(fp)
 c004d4c:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_uart_dev* dev = (altera_avalon_uart_dev*) fd->dev; 
 c004d50:	e0bffd17 	ldw	r2,-12(fp)
 c004d54:	10800017 	ldw	r2,0(r2)
 c004d58:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_uart_read(&dev->state, buffer, space,
 c004d5c:	e0bffc17 	ldw	r2,-16(fp)
 c004d60:	11000a04 	addi	r4,r2,40
 c004d64:	e0bffd17 	ldw	r2,-12(fp)
 c004d68:	11c00217 	ldw	r7,8(r2)
 c004d6c:	e17ffe17 	ldw	r5,-8(fp)
 c004d70:	e1bfff17 	ldw	r6,-4(fp)
 c004d74:	c00522c0 	call	c00522c <altera_avalon_uart_read>
      fd->fd_flags);
}
 c004d78:	e037883a 	mov	sp,fp
 c004d7c:	dfc00117 	ldw	ra,4(sp)
 c004d80:	df000017 	ldw	fp,0(sp)
 c004d84:	dec00204 	addi	sp,sp,8
 c004d88:	f800283a 	ret

0c004d8c <altera_avalon_uart_write_fd>:

int 
altera_avalon_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
 c004d8c:	defffa04 	addi	sp,sp,-24
 c004d90:	dfc00515 	stw	ra,20(sp)
 c004d94:	df000415 	stw	fp,16(sp)
 c004d98:	df000404 	addi	fp,sp,16
 c004d9c:	e13ffd15 	stw	r4,-12(fp)
 c004da0:	e17ffe15 	stw	r5,-8(fp)
 c004da4:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_uart_dev* dev = (altera_avalon_uart_dev*) fd->dev; 
 c004da8:	e0bffd17 	ldw	r2,-12(fp)
 c004dac:	10800017 	ldw	r2,0(r2)
 c004db0:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_uart_write(&dev->state, buffer, space,
 c004db4:	e0bffc17 	ldw	r2,-16(fp)
 c004db8:	11000a04 	addi	r4,r2,40
 c004dbc:	e0bffd17 	ldw	r2,-12(fp)
 c004dc0:	11c00217 	ldw	r7,8(r2)
 c004dc4:	e17ffe17 	ldw	r5,-8(fp)
 c004dc8:	e1bfff17 	ldw	r6,-4(fp)
 c004dcc:	c0054bc0 	call	c0054bc <altera_avalon_uart_write>
      fd->fd_flags);
}
 c004dd0:	e037883a 	mov	sp,fp
 c004dd4:	dfc00117 	ldw	ra,4(sp)
 c004dd8:	df000017 	ldw	fp,0(sp)
 c004ddc:	dec00204 	addi	sp,sp,8
 c004de0:	f800283a 	ret

0c004de4 <altera_avalon_uart_close_fd>:

#endif /* ALTERA_AVALON_UART_USE_IOCTL */

int 
altera_avalon_uart_close_fd(alt_fd* fd)
{
 c004de4:	defffc04 	addi	sp,sp,-16
 c004de8:	dfc00315 	stw	ra,12(sp)
 c004dec:	df000215 	stw	fp,8(sp)
 c004df0:	df000204 	addi	fp,sp,8
 c004df4:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_uart_dev* dev = (altera_avalon_uart_dev*) fd->dev; 
 c004df8:	e0bfff17 	ldw	r2,-4(fp)
 c004dfc:	10800017 	ldw	r2,0(r2)
 c004e00:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_uart_close(&dev->state, fd->fd_flags);
 c004e04:	e0bffe17 	ldw	r2,-8(fp)
 c004e08:	11000a04 	addi	r4,r2,40
 c004e0c:	e0bfff17 	ldw	r2,-4(fp)
 c004e10:	11400217 	ldw	r5,8(r2)
 c004e14:	c0051cc0 	call	c0051cc <altera_avalon_uart_close>
}
 c004e18:	e037883a 	mov	sp,fp
 c004e1c:	dfc00117 	ldw	ra,4(sp)
 c004e20:	df000017 	ldw	fp,0(sp)
 c004e24:	dec00204 	addi	sp,sp,8
 c004e28:	f800283a 	ret

0c004e2c <altera_avalon_uart_init>:
  alt_u32 status);

void 
altera_avalon_uart_init(altera_avalon_uart_state* sp, 
  alt_u32 irq_controller_id,  alt_u32 irq)
{
 c004e2c:	defff704 	addi	sp,sp,-36
 c004e30:	dfc00815 	stw	ra,32(sp)
 c004e34:	df000715 	stw	fp,28(sp)
 c004e38:	df000704 	addi	fp,sp,28
 c004e3c:	e13ffc15 	stw	r4,-16(fp)
 c004e40:	e17ffd15 	stw	r5,-12(fp)
 c004e44:	e1bffe15 	stw	r6,-8(fp)
  void* base = sp->base;
 c004e48:	e0bffc17 	ldw	r2,-16(fp)
 c004e4c:	10800017 	ldw	r2,0(r2)
 c004e50:	e0bffb15 	stw	r2,-20(fp)
 * HAL.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_no_error (void)
{
  return 0;
 c004e54:	0005883a 	mov	r2,zero
  /* 
   * Initialise the read and write flags and the semaphores used to 
   * protect access to the circular buffers when running in a multi-threaded
   * environment.
   */
  error = ALT_FLAG_CREATE (&sp->events, 0)    || 
 c004e58:	1004c03a 	cmpne	r2,r2,zero
 c004e5c:	1000061e 	bne	r2,zero,c004e78 <altera_avalon_uart_init+0x4c>
 c004e60:	0005883a 	mov	r2,zero
 c004e64:	1004c03a 	cmpne	r2,r2,zero
 c004e68:	1000031e 	bne	r2,zero,c004e78 <altera_avalon_uart_init+0x4c>
 c004e6c:	0005883a 	mov	r2,zero
 c004e70:	1005003a 	cmpeq	r2,r2,zero
 c004e74:	1000031e 	bne	r2,zero,c004e84 <altera_avalon_uart_init+0x58>
 c004e78:	00800044 	movi	r2,1
 c004e7c:	e0bfff15 	stw	r2,-4(fp)
 c004e80:	00000106 	br	c004e88 <altera_avalon_uart_init+0x5c>
 c004e84:	e03fff15 	stw	zero,-4(fp)
 c004e88:	e0bfff17 	ldw	r2,-4(fp)
 c004e8c:	e0bffa15 	stw	r2,-24(fp)
          ALT_SEM_CREATE (&sp->read_lock, 1)  ||
          ALT_SEM_CREATE (&sp->write_lock, 1);

  if (!error)
 c004e90:	e0bffa17 	ldw	r2,-24(fp)
 c004e94:	1004c03a 	cmpne	r2,r2,zero
 c004e98:	1000111e 	bne	r2,zero,c004ee0 <altera_avalon_uart_init+0xb4>
  {
    /* enable interrupts at the device */
    sp->ctrl = ALTERA_AVALON_UART_CONTROL_RTS_MSK  |
 c004e9c:	e0fffc17 	ldw	r3,-16(fp)
 c004ea0:	00832004 	movi	r2,3200
 c004ea4:	18800115 	stw	r2,4(r3)
                ALTERA_AVALON_UART_CONTROL_RRDY_MSK |
                ALTERA_AVALON_UART_CONTROL_DCTS_MSK;

    IOWR_ALTERA_AVALON_UART_CONTROL(base, sp->ctrl); 
 c004ea8:	e0bffb17 	ldw	r2,-20(fp)
 c004eac:	11000304 	addi	r4,r2,12
 c004eb0:	e0bffc17 	ldw	r2,-16(fp)
 c004eb4:	10800117 	ldw	r2,4(r2)
 c004eb8:	1007883a 	mov	r3,r2
 c004ebc:	2005883a 	mov	r2,r4
 c004ec0:	10c00035 	stwio	r3,0(r2)
  
    /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
    alt_ic_isr_register(irq_controller_id, irq, altera_avalon_uart_irq, sp, 
 c004ec4:	d8000015 	stw	zero,0(sp)
 c004ec8:	e13ffd17 	ldw	r4,-12(fp)
 c004ecc:	e17ffe17 	ldw	r5,-8(fp)
 c004ed0:	01830034 	movhi	r6,3072
 c004ed4:	3193bd04 	addi	r6,r6,20212
 c004ed8:	e1fffc17 	ldw	r7,-16(fp)
 c004edc:	c0061f00 	call	c0061f0 <alt_ic_isr_register>
      0x0);
#else
    alt_irq_register (irq, sp, altera_avalon_uart_irq);
#endif  
  }
}
 c004ee0:	e037883a 	mov	sp,fp
 c004ee4:	dfc00117 	ldw	ra,4(sp)
 c004ee8:	df000017 	ldw	fp,0(sp)
 c004eec:	dec00204 	addi	sp,sp,8
 c004ef0:	f800283a 	ret

0c004ef4 <altera_avalon_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_uart_irq(void* context)
#else
static void altera_avalon_uart_irq(void* context, alt_u32 id)
#endif
{
 c004ef4:	defffa04 	addi	sp,sp,-24
 c004ef8:	dfc00515 	stw	ra,20(sp)
 c004efc:	df000415 	stw	fp,16(sp)
 c004f00:	df000404 	addi	fp,sp,16
 c004f04:	e13fff15 	stw	r4,-4(fp)
  alt_u32 status;

  altera_avalon_uart_state* sp = (altera_avalon_uart_state*) context;
 c004f08:	e0bfff17 	ldw	r2,-4(fp)
 c004f0c:	e0bffd15 	stw	r2,-12(fp)
  void* base               = sp->base;
 c004f10:	e0bffd17 	ldw	r2,-12(fp)
 c004f14:	10800017 	ldw	r2,0(r2)
 c004f18:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Read the status register in order to determine the cause of the
   * interrupt.
   */

  status = IORD_ALTERA_AVALON_UART_STATUS(base);
 c004f1c:	e0bffc17 	ldw	r2,-16(fp)
 c004f20:	10800204 	addi	r2,r2,8
 c004f24:	10800037 	ldwio	r2,0(r2)
 c004f28:	e0bffe15 	stw	r2,-8(fp)

  /* Clear any error flags set at the device */
  IOWR_ALTERA_AVALON_UART_STATUS(base, 0);
 c004f2c:	e0bffc17 	ldw	r2,-16(fp)
 c004f30:	10800204 	addi	r2,r2,8
 c004f34:	10000035 	stwio	zero,0(r2)

  /* Dummy read to ensure IRQ is negated before ISR returns */
  IORD_ALTERA_AVALON_UART_STATUS(base);
 c004f38:	e0bffc17 	ldw	r2,-16(fp)
 c004f3c:	10800204 	addi	r2,r2,8
 c004f40:	10800037 	ldwio	r2,0(r2)
  
  /* process a read irq */
  if (status & ALTERA_AVALON_UART_STATUS_RRDY_MSK)
 c004f44:	e0bffe17 	ldw	r2,-8(fp)
 c004f48:	1080200c 	andi	r2,r2,128
 c004f4c:	1005003a 	cmpeq	r2,r2,zero
 c004f50:	1000031e 	bne	r2,zero,c004f60 <altera_avalon_uart_irq+0x6c>
  {
    altera_avalon_uart_rxirq(sp, status);
 c004f54:	e13ffd17 	ldw	r4,-12(fp)
 c004f58:	e17ffe17 	ldw	r5,-8(fp)
 c004f5c:	c004f900 	call	c004f90 <altera_avalon_uart_rxirq>
  }

  /* process a write irq */
  if (status & (ALTERA_AVALON_UART_STATUS_TRDY_MSK | 
 c004f60:	e0bffe17 	ldw	r2,-8(fp)
 c004f64:	1081100c 	andi	r2,r2,1088
 c004f68:	1005003a 	cmpeq	r2,r2,zero
 c004f6c:	1000031e 	bne	r2,zero,c004f7c <altera_avalon_uart_irq+0x88>
                  ALTERA_AVALON_UART_STATUS_DCTS_MSK))
  {
    altera_avalon_uart_txirq(sp, status);
 c004f70:	e13ffd17 	ldw	r4,-12(fp)
 c004f74:	e17ffe17 	ldw	r5,-8(fp)
 c004f78:	c0050700 	call	c005070 <altera_avalon_uart_txirq>
  }
  

}
 c004f7c:	e037883a 	mov	sp,fp
 c004f80:	dfc00117 	ldw	ra,4(sp)
 c004f84:	df000017 	ldw	fp,0(sp)
 c004f88:	dec00204 	addi	sp,sp,8
 c004f8c:	f800283a 	ret

0c004f90 <altera_avalon_uart_rxirq>:
 * the receive circular buffer, and sets the apropriate flags to indicate 
 * that there is data ready to be processed.
 */
static void 
altera_avalon_uart_rxirq(altera_avalon_uart_state* sp, alt_u32 status)
{
 c004f90:	defffc04 	addi	sp,sp,-16
 c004f94:	df000315 	stw	fp,12(sp)
 c004f98:	df000304 	addi	fp,sp,12
 c004f9c:	e13ffe15 	stw	r4,-8(fp)
 c004fa0:	e17fff15 	stw	r5,-4(fp)
  alt_u32 next;
  
  /* If there was an error, discard the data */

  if (status & (ALTERA_AVALON_UART_STATUS_PE_MSK | 
 c004fa4:	e0bfff17 	ldw	r2,-4(fp)
 c004fa8:	108000cc 	andi	r2,r2,3
 c004fac:	1004c03a 	cmpne	r2,r2,zero
 c004fb0:	10002b1e 	bne	r2,zero,c005060 <altera_avalon_uart_rxirq+0xd0>
   * In a multi-threaded environment, set the read event flag to indicate
   * that there is data ready. This is only done if the circular buffer was
   * previously empty.
   */

  if (sp->rx_end == sp->rx_start)
 c004fb4:	e0bffe17 	ldw	r2,-8(fp)
 c004fb8:	10800317 	ldw	r2,12(r2)
    ALT_FLAG_POST (sp->events, ALT_UART_READ_RDY, OS_FLAG_SET);
  }

  /* Determine which slot to use next in the circular buffer */

  next = (sp->rx_end + 1) & ALT_AVALON_UART_BUF_MSK;
 c004fbc:	e0bffe17 	ldw	r2,-8(fp)
 c004fc0:	10800317 	ldw	r2,12(r2)
 c004fc4:	10800044 	addi	r2,r2,1
 c004fc8:	10800fcc 	andi	r2,r2,63
 c004fcc:	e0bffd15 	stw	r2,-12(fp)

  /* Transfer data from the device to the circular buffer */

  sp->rx_buf[sp->rx_end] = IORD_ALTERA_AVALON_UART_RXDATA(sp->base);
 c004fd0:	e0bffe17 	ldw	r2,-8(fp)
 c004fd4:	11000317 	ldw	r4,12(r2)
 c004fd8:	e0bffe17 	ldw	r2,-8(fp)
 c004fdc:	10800017 	ldw	r2,0(r2)
 c004fe0:	10800037 	ldwio	r2,0(r2)
 c004fe4:	1007883a 	mov	r3,r2
 c004fe8:	e0bffe17 	ldw	r2,-8(fp)
 c004fec:	2085883a 	add	r2,r4,r2
 c004ff0:	10800704 	addi	r2,r2,28
 c004ff4:	10c00005 	stb	r3,0(r2)

  sp->rx_end = next;
 c004ff8:	e0fffe17 	ldw	r3,-8(fp)
 c004ffc:	e0bffd17 	ldw	r2,-12(fp)
 c005000:	18800315 	stw	r2,12(r3)

  next = (sp->rx_end + 1) & ALT_AVALON_UART_BUF_MSK;
 c005004:	e0bffe17 	ldw	r2,-8(fp)
 c005008:	10800317 	ldw	r2,12(r2)
 c00500c:	10800044 	addi	r2,r2,1
 c005010:	10800fcc 	andi	r2,r2,63
 c005014:	e0bffd15 	stw	r2,-12(fp)
  /*
   * If the cicular buffer was full, disable interrupts. Interrupts will be
   * re-enabled when data is removed from the buffer.
   */

  if (next == sp->rx_start)
 c005018:	e0bffe17 	ldw	r2,-8(fp)
 c00501c:	10c00217 	ldw	r3,8(r2)
 c005020:	e0bffd17 	ldw	r2,-12(fp)
 c005024:	18800e1e 	bne	r3,r2,c005060 <altera_avalon_uart_rxirq+0xd0>
  {
    sp->ctrl &= ~ALTERA_AVALON_UART_CONTROL_RRDY_MSK;
 c005028:	e0bffe17 	ldw	r2,-8(fp)
 c00502c:	10c00117 	ldw	r3,4(r2)
 c005030:	00bfdfc4 	movi	r2,-129
 c005034:	1886703a 	and	r3,r3,r2
 c005038:	e0bffe17 	ldw	r2,-8(fp)
 c00503c:	10c00115 	stw	r3,4(r2)
    IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl); 
 c005040:	e0bffe17 	ldw	r2,-8(fp)
 c005044:	10800017 	ldw	r2,0(r2)
 c005048:	11000304 	addi	r4,r2,12
 c00504c:	e0bffe17 	ldw	r2,-8(fp)
 c005050:	10800117 	ldw	r2,4(r2)
 c005054:	1007883a 	mov	r3,r2
 c005058:	2005883a 	mov	r2,r4
 c00505c:	10c00035 	stwio	r3,0(r2)
  }   
}
 c005060:	e037883a 	mov	sp,fp
 c005064:	df000017 	ldw	fp,0(sp)
 c005068:	dec00104 	addi	sp,sp,4
 c00506c:	f800283a 	ret

0c005070 <altera_avalon_uart_txirq>:
 * buffer to the device, and sets the apropriate flags to indicate that 
 * there is data ready to be processed.
 */
static void 
altera_avalon_uart_txirq(altera_avalon_uart_state* sp, alt_u32 status)
{
 c005070:	defffd04 	addi	sp,sp,-12
 c005074:	df000215 	stw	fp,8(sp)
 c005078:	df000204 	addi	fp,sp,8
 c00507c:	e13ffe15 	stw	r4,-8(fp)
 c005080:	e17fff15 	stw	r5,-4(fp)
  /* Transfer data if there is some ready to be transfered */

  if (sp->tx_start != sp->tx_end)
 c005084:	e0bffe17 	ldw	r2,-8(fp)
 c005088:	10c00417 	ldw	r3,16(r2)
 c00508c:	e0bffe17 	ldw	r2,-8(fp)
 c005090:	10800517 	ldw	r2,20(r2)
 c005094:	18803626 	beq	r3,r2,c005170 <altera_avalon_uart_txirq+0x100>
    /* 
     * If the device is using flow control (i.e. RTS/CTS), then the
     * transmitter is required to throttle if CTS is high.
     */

    if (!(sp->flags & ALT_AVALON_UART_FC) ||
 c005098:	e0bffe17 	ldw	r2,-8(fp)
 c00509c:	10800617 	ldw	r2,24(r2)
 c0050a0:	1080008c 	andi	r2,r2,2
 c0050a4:	1005003a 	cmpeq	r2,r2,zero
 c0050a8:	1000041e 	bne	r2,zero,c0050bc <altera_avalon_uart_txirq+0x4c>
 c0050ac:	e0bfff17 	ldw	r2,-4(fp)
 c0050b0:	1082000c 	andi	r2,r2,2048
 c0050b4:	1005003a 	cmpeq	r2,r2,zero
 c0050b8:	10001e1e 	bne	r2,zero,c005134 <altera_avalon_uart_txirq+0xc4>
       * In a multi-threaded environment, set the write event flag to indicate
       * that there is space in the circular buffer. This is only done if the
       * buffer was previously empty.
       */

      if (sp->tx_start == ((sp->tx_end + 1) & ALT_AVALON_UART_BUF_MSK))
 c0050bc:	e0bffe17 	ldw	r2,-8(fp)
 c0050c0:	10800417 	ldw	r2,16(r2)
                       OS_FLAG_SET);
      }

      /* Write the data to the device */

      IOWR_ALTERA_AVALON_UART_TXDATA(sp->base, sp->tx_buf[sp->tx_start]);
 c0050c4:	e0bffe17 	ldw	r2,-8(fp)
 c0050c8:	10800017 	ldw	r2,0(r2)
 c0050cc:	11000104 	addi	r4,r2,4
 c0050d0:	e0bffe17 	ldw	r2,-8(fp)
 c0050d4:	10c00417 	ldw	r3,16(r2)
 c0050d8:	e0bffe17 	ldw	r2,-8(fp)
 c0050dc:	1885883a 	add	r2,r3,r2
 c0050e0:	10801704 	addi	r2,r2,92
 c0050e4:	10800003 	ldbu	r2,0(r2)
 c0050e8:	10c03fcc 	andi	r3,r2,255
 c0050ec:	2005883a 	mov	r2,r4
 c0050f0:	10c00035 	stwio	r3,0(r2)

      sp->tx_start = (++sp->tx_start) & ALT_AVALON_UART_BUF_MSK;
 c0050f4:	e0bffe17 	ldw	r2,-8(fp)
 c0050f8:	10800417 	ldw	r2,16(r2)
 c0050fc:	10c00044 	addi	r3,r2,1
 c005100:	e0bffe17 	ldw	r2,-8(fp)
 c005104:	10c00415 	stw	r3,16(r2)
 c005108:	e0bffe17 	ldw	r2,-8(fp)
 c00510c:	10800417 	ldw	r2,16(r2)
 c005110:	10c00fcc 	andi	r3,r2,63
 c005114:	e0bffe17 	ldw	r2,-8(fp)
 c005118:	10c00415 	stw	r3,16(r2)
      /*
       * In case the tranmit interrupt had previously been disabled by 
       * detecting a low value on CTS, it is reenabled here.
       */ 

      sp->ctrl |= ALTERA_AVALON_UART_CONTROL_TRDY_MSK;
 c00511c:	e0bffe17 	ldw	r2,-8(fp)
 c005120:	10800117 	ldw	r2,4(r2)
 c005124:	10c01014 	ori	r3,r2,64
 c005128:	e0bffe17 	ldw	r2,-8(fp)
 c00512c:	10c00115 	stw	r3,4(r2)
    /* 
     * If the device is using flow control (i.e. RTS/CTS), then the
     * transmitter is required to throttle if CTS is high.
     */

    if (!(sp->flags & ALT_AVALON_UART_FC) ||
 c005130:	00000f06 	br	c005170 <altera_avalon_uart_txirq+0x100>
       * the last write to the status register. To avoid this resulting in
       * deadlock, it's necessary to re-check the status register here
       * before throttling.
       */
 
      status = IORD_ALTERA_AVALON_UART_STATUS(sp->base); 
 c005134:	e0bffe17 	ldw	r2,-8(fp)
 c005138:	10800017 	ldw	r2,0(r2)
 c00513c:	10800204 	addi	r2,r2,8
 c005140:	10800037 	ldwio	r2,0(r2)
 c005144:	e0bfff15 	stw	r2,-4(fp)

      if (!(status & ALTERA_AVALON_UART_STATUS_CTS_MSK))
 c005148:	e0bfff17 	ldw	r2,-4(fp)
 c00514c:	1082000c 	andi	r2,r2,2048
 c005150:	1004c03a 	cmpne	r2,r2,zero
 c005154:	1000061e 	bne	r2,zero,c005170 <altera_avalon_uart_txirq+0x100>
      {
        sp->ctrl &= ~ALTERA_AVALON_UART_CONTROL_TRDY_MSK;
 c005158:	e0bffe17 	ldw	r2,-8(fp)
 c00515c:	10c00117 	ldw	r3,4(r2)
 c005160:	00bfefc4 	movi	r2,-65
 c005164:	1886703a 	and	r3,r3,r2
 c005168:	e0bffe17 	ldw	r2,-8(fp)
 c00516c:	10c00115 	stw	r3,4(r2)
  /*
   * If the circular buffer is empty, disable the interrupt. This will be
   * re-enabled when new data is placed in the buffer.
   */

  if (sp->tx_start == sp->tx_end)
 c005170:	e0bffe17 	ldw	r2,-8(fp)
 c005174:	10c00417 	ldw	r3,16(r2)
 c005178:	e0bffe17 	ldw	r2,-8(fp)
 c00517c:	10800517 	ldw	r2,20(r2)
 c005180:	1880061e 	bne	r3,r2,c00519c <altera_avalon_uart_txirq+0x12c>
  {
    sp->ctrl &= ~(ALTERA_AVALON_UART_CONTROL_TRDY_MSK |
 c005184:	e0bffe17 	ldw	r2,-8(fp)
 c005188:	10c00117 	ldw	r3,4(r2)
 c00518c:	00beefc4 	movi	r2,-1089
 c005190:	1886703a 	and	r3,r3,r2
 c005194:	e0bffe17 	ldw	r2,-8(fp)
 c005198:	10c00115 	stw	r3,4(r2)
                    ALTERA_AVALON_UART_CONTROL_DCTS_MSK);
  }

  IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
 c00519c:	e0bffe17 	ldw	r2,-8(fp)
 c0051a0:	10800017 	ldw	r2,0(r2)
 c0051a4:	11000304 	addi	r4,r2,12
 c0051a8:	e0bffe17 	ldw	r2,-8(fp)
 c0051ac:	10800117 	ldw	r2,4(r2)
 c0051b0:	1007883a 	mov	r3,r2
 c0051b4:	2005883a 	mov	r2,r4
 c0051b8:	10c00035 	stwio	r3,0(r2)
}
 c0051bc:	e037883a 	mov	sp,fp
 c0051c0:	df000017 	ldw	fp,0(sp)
 c0051c4:	dec00104 	addi	sp,sp,4
 c0051c8:	f800283a 	ret

0c0051cc <altera_avalon_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_uart_close(altera_avalon_uart_state* sp, int flags)
{
 c0051cc:	defffc04 	addi	sp,sp,-16
 c0051d0:	df000315 	stw	fp,12(sp)
 c0051d4:	df000304 	addi	fp,sp,12
 c0051d8:	e13ffd15 	stw	r4,-12(fp)
 c0051dc:	e17ffe15 	stw	r5,-8(fp)
  /* 
   * Wait for all transmit data to be emptied by the UART ISR.
   */
  while (sp->tx_start != sp->tx_end) {
 c0051e0:	00000706 	br	c005200 <altera_avalon_uart_close+0x34>
    if (flags & O_NONBLOCK) {
 c0051e4:	e0bffe17 	ldw	r2,-8(fp)
 c0051e8:	1090000c 	andi	r2,r2,16384
 c0051ec:	1005003a 	cmpeq	r2,r2,zero
 c0051f0:	1000031e 	bne	r2,zero,c005200 <altera_avalon_uart_close+0x34>
      return -EWOULDBLOCK; 
 c0051f4:	00bffd44 	movi	r2,-11
 c0051f8:	e0bfff15 	stw	r2,-4(fp)
 c0051fc:	00000606 	br	c005218 <altera_avalon_uart_close+0x4c>
int altera_avalon_uart_close(altera_avalon_uart_state* sp, int flags)
{
  /* 
   * Wait for all transmit data to be emptied by the UART ISR.
   */
  while (sp->tx_start != sp->tx_end) {
 c005200:	e0bffd17 	ldw	r2,-12(fp)
 c005204:	10c00417 	ldw	r3,16(r2)
 c005208:	e0bffd17 	ldw	r2,-12(fp)
 c00520c:	10800517 	ldw	r2,20(r2)
 c005210:	18bff41e 	bne	r3,r2,c0051e4 <altera_avalon_uart_close+0x18>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
 c005214:	e03fff15 	stw	zero,-4(fp)
 c005218:	e0bfff17 	ldw	r2,-4(fp)
}
 c00521c:	e037883a 	mov	sp,fp
 c005220:	df000017 	ldw	fp,0(sp)
 c005224:	dec00104 	addi	sp,sp,4
 c005228:	f800283a 	ret

0c00522c <altera_avalon_uart_read>:
 */

int 
altera_avalon_uart_read(altera_avalon_uart_state* sp, char* ptr, int len,
  int flags)
{
 c00522c:	defff004 	addi	sp,sp,-64
 c005230:	dfc00f15 	stw	ra,60(sp)
 c005234:	df000e15 	stw	fp,56(sp)
 c005238:	df000e04 	addi	fp,sp,56
 c00523c:	e13ffb15 	stw	r4,-20(fp)
 c005240:	e17ffc15 	stw	r5,-16(fp)
 c005244:	e1bffd15 	stw	r6,-12(fp)
 c005248:	e1fffe15 	stw	r7,-8(fp)
  alt_irq_context context;
  int             block;
  alt_u32         next;
  alt_u8          read_would_block = 0;
 c00524c:	e03ff705 	stb	zero,-36(fp)
  int             count = 0;
 c005250:	e03ff615 	stw	zero,-40(fp)
  /* 
   * Construct a flag to indicate whether the device is being accessed in
   * blocking or non-blocking mode.
   */

  block = !(flags & O_NONBLOCK);
 c005254:	e0bffe17 	ldw	r2,-8(fp)
 c005258:	1090000c 	andi	r2,r2,16384
 c00525c:	1005003a 	cmpeq	r2,r2,zero
 c005260:	e0bff915 	stw	r2,-28(fp)
  /*
   * Calculate which slot in the circular buffer is the next one to read
   * data from.
   */

  next = (sp->rx_start + 1) & ALT_AVALON_UART_BUF_MSK;
 c005264:	e0bffb17 	ldw	r2,-20(fp)
 c005268:	10800217 	ldw	r2,8(r2)
 c00526c:	10800044 	addi	r2,r2,1
 c005270:	10800fcc 	andi	r2,r2,63
 c005274:	e0bff815 	stw	r2,-32(fp)
    /*
     * Read the required amount of data, until the circular buffer runs
     * empty
     */

    while ((count < len) && (sp->rx_start != sp->rx_end))
 c005278:	00001906 	br	c0052e0 <altera_avalon_uart_read+0xb4>
    {
      count++;
 c00527c:	e0bff617 	ldw	r2,-40(fp)
 c005280:	10800044 	addi	r2,r2,1
 c005284:	e0bff615 	stw	r2,-40(fp)
      *ptr++ = sp->rx_buf[sp->rx_start];
 c005288:	e0bffb17 	ldw	r2,-20(fp)
 c00528c:	10c00217 	ldw	r3,8(r2)
 c005290:	e0bffb17 	ldw	r2,-20(fp)
 c005294:	1885883a 	add	r2,r3,r2
 c005298:	10800704 	addi	r2,r2,28
 c00529c:	10800003 	ldbu	r2,0(r2)
 c0052a0:	1007883a 	mov	r3,r2
 c0052a4:	e0bffc17 	ldw	r2,-16(fp)
 c0052a8:	10c00005 	stb	r3,0(r2)
 c0052ac:	e0bffc17 	ldw	r2,-16(fp)
 c0052b0:	10800044 	addi	r2,r2,1
 c0052b4:	e0bffc15 	stw	r2,-16(fp)
      
      sp->rx_start = (++sp->rx_start) & ALT_AVALON_UART_BUF_MSK;
 c0052b8:	e0bffb17 	ldw	r2,-20(fp)
 c0052bc:	10800217 	ldw	r2,8(r2)
 c0052c0:	10c00044 	addi	r3,r2,1
 c0052c4:	e0bffb17 	ldw	r2,-20(fp)
 c0052c8:	10c00215 	stw	r3,8(r2)
 c0052cc:	e0bffb17 	ldw	r2,-20(fp)
 c0052d0:	10800217 	ldw	r2,8(r2)
 c0052d4:	10c00fcc 	andi	r3,r2,63
 c0052d8:	e0bffb17 	ldw	r2,-20(fp)
 c0052dc:	10c00215 	stw	r3,8(r2)
    /*
     * Read the required amount of data, until the circular buffer runs
     * empty
     */

    while ((count < len) && (sp->rx_start != sp->rx_end))
 c0052e0:	e0fff617 	ldw	r3,-40(fp)
 c0052e4:	e0bffd17 	ldw	r2,-12(fp)
 c0052e8:	1880050e 	bge	r3,r2,c005300 <altera_avalon_uart_read+0xd4>
 c0052ec:	e0bffb17 	ldw	r2,-20(fp)
 c0052f0:	10c00217 	ldw	r3,8(r2)
 c0052f4:	e0bffb17 	ldw	r2,-20(fp)
 c0052f8:	10800317 	ldw	r2,12(r2)
 c0052fc:	18bfdf1e 	bne	r3,r2,c00527c <altera_avalon_uart_read+0x50>
    /*
     * If no data has been transferred, the circular buffer is empty, and
     * this is not a non-blocking access, block waiting for data to arrive.
     */

    if (!count && (sp->rx_start == sp->rx_end))
 c005300:	e0bff617 	ldw	r2,-40(fp)
 c005304:	1004c03a 	cmpne	r2,r2,zero
 c005308:	1000271e 	bne	r2,zero,c0053a8 <altera_avalon_uart_read+0x17c>
 c00530c:	e0bffb17 	ldw	r2,-20(fp)
 c005310:	10c00217 	ldw	r3,8(r2)
 c005314:	e0bffb17 	ldw	r2,-20(fp)
 c005318:	10800317 	ldw	r2,12(r2)
 c00531c:	1880221e 	bne	r3,r2,c0053a8 <altera_avalon_uart_read+0x17c>
    {
      if (!block)
 c005320:	e0bff917 	ldw	r2,-28(fp)
 c005324:	1004c03a 	cmpne	r2,r2,zero
 c005328:	1000061e 	bne	r2,zero,c005344 <altera_avalon_uart_read+0x118>
      {
        /* Set errno to indicate the reason we're not returning any data */

        ALT_ERRNO = EWOULDBLOCK;
 c00532c:	c00545c0 	call	c00545c <alt_get_errno>
 c005330:	00c002c4 	movi	r3,11
 c005334:	10c00015 	stw	r3,0(r2)
        read_would_block = 1;
 c005338:	00800044 	movi	r2,1
 c00533c:	e0bff705 	stb	r2,-36(fp)
        break;
 c005340:	00001f06 	br	c0053c0 <altera_avalon_uart_read+0x194>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 c005344:	0005303a 	rdctl	r2,status
 c005348:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 c00534c:	e0fff517 	ldw	r3,-44(fp)
 c005350:	00bfff84 	movi	r2,-2
 c005354:	1884703a 	and	r2,r3,r2
 c005358:	1001703a 	wrctl	status,r2
  
  return context;
 c00535c:	e0bff517 	ldw	r2,-44(fp)
      {
       /* Block waiting for some data to arrive */

       /* First, ensure read interrupts are enabled to avoid deadlock */

       context = alt_irq_disable_all ();
 c005360:	e0bffa15 	stw	r2,-24(fp)
       sp->ctrl |= ALTERA_AVALON_UART_CONTROL_RRDY_MSK;
 c005364:	e0bffb17 	ldw	r2,-20(fp)
 c005368:	10800117 	ldw	r2,4(r2)
 c00536c:	10c02014 	ori	r3,r2,128
 c005370:	e0bffb17 	ldw	r2,-20(fp)
 c005374:	10c00115 	stw	r3,4(r2)
       IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
 c005378:	e0bffb17 	ldw	r2,-20(fp)
 c00537c:	10800017 	ldw	r2,0(r2)
 c005380:	11000304 	addi	r4,r2,12
 c005384:	e0bffb17 	ldw	r2,-20(fp)
 c005388:	10800117 	ldw	r2,4(r2)
 c00538c:	1007883a 	mov	r3,r2
 c005390:	2005883a 	mov	r2,r4
 c005394:	10c00035 	stwio	r3,0(r2)
 c005398:	e0bffa17 	ldw	r2,-24(fp)
 c00539c:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 c0053a0:	e0bff417 	ldw	r2,-48(fp)
 c0053a4:	1001703a 	wrctl	status,r2
                      OS_FLAG_WAIT_SET_ANY + OS_FLAG_CONSUME,
                      0);
      }
    }
  }
  while (!count && len);
 c0053a8:	e0bff617 	ldw	r2,-40(fp)
 c0053ac:	1004c03a 	cmpne	r2,r2,zero
 c0053b0:	1000031e 	bne	r2,zero,c0053c0 <altera_avalon_uart_read+0x194>
 c0053b4:	e0bffd17 	ldw	r2,-12(fp)
 c0053b8:	1004c03a 	cmpne	r2,r2,zero
 c0053bc:	103fc81e 	bne	r2,zero,c0052e0 <altera_avalon_uart_read+0xb4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 c0053c0:	0005303a 	rdctl	r2,status
 c0053c4:	e0bff315 	stw	r2,-52(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 c0053c8:	e0fff317 	ldw	r3,-52(fp)
 c0053cc:	00bfff84 	movi	r2,-2
 c0053d0:	1884703a 	and	r2,r3,r2
 c0053d4:	1001703a 	wrctl	status,r2
  
  return context;
 c0053d8:	e0bff317 	ldw	r2,-52(fp)
  /*
   * Ensure that interrupts are enabled, so that the circular buffer can
   * re-fill.
   */

  context = alt_irq_disable_all ();
 c0053dc:	e0bffa15 	stw	r2,-24(fp)
  sp->ctrl |= ALTERA_AVALON_UART_CONTROL_RRDY_MSK;
 c0053e0:	e0bffb17 	ldw	r2,-20(fp)
 c0053e4:	10800117 	ldw	r2,4(r2)
 c0053e8:	10c02014 	ori	r3,r2,128
 c0053ec:	e0bffb17 	ldw	r2,-20(fp)
 c0053f0:	10c00115 	stw	r3,4(r2)
  IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
 c0053f4:	e0bffb17 	ldw	r2,-20(fp)
 c0053f8:	10800017 	ldw	r2,0(r2)
 c0053fc:	11000304 	addi	r4,r2,12
 c005400:	e0bffb17 	ldw	r2,-20(fp)
 c005404:	10800117 	ldw	r2,4(r2)
 c005408:	1007883a 	mov	r3,r2
 c00540c:	2005883a 	mov	r2,r4
 c005410:	10c00035 	stwio	r3,0(r2)
 c005414:	e0bffa17 	ldw	r2,-24(fp)
 c005418:	e0bff215 	stw	r2,-56(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 c00541c:	e0bff217 	ldw	r2,-56(fp)
 c005420:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (context);

  /* Return the number of bytes read */
  if(read_would_block) {
 c005424:	e0bff703 	ldbu	r2,-36(fp)
 c005428:	1005003a 	cmpeq	r2,r2,zero
 c00542c:	1000031e 	bne	r2,zero,c00543c <altera_avalon_uart_read+0x210>
    return ~EWOULDBLOCK;
 c005430:	00bffd04 	movi	r2,-12
 c005434:	e0bfff15 	stw	r2,-4(fp)
 c005438:	00000206 	br	c005444 <altera_avalon_uart_read+0x218>
  }
  else {
    return count;
 c00543c:	e0bff617 	ldw	r2,-40(fp)
 c005440:	e0bfff15 	stw	r2,-4(fp)
 c005444:	e0bfff17 	ldw	r2,-4(fp)
  }
}
 c005448:	e037883a 	mov	sp,fp
 c00544c:	dfc00117 	ldw	ra,4(sp)
 c005450:	df000017 	ldw	fp,0(sp)
 c005454:	dec00204 	addi	sp,sp,8
 c005458:	f800283a 	ret

0c00545c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 c00545c:	defffd04 	addi	sp,sp,-12
 c005460:	dfc00215 	stw	ra,8(sp)
 c005464:	df000115 	stw	fp,4(sp)
 c005468:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
 c00546c:	00830074 	movhi	r2,3073
 c005470:	10a3ee04 	addi	r2,r2,-28744
 c005474:	10800017 	ldw	r2,0(r2)
 c005478:	1005003a 	cmpeq	r2,r2,zero
 c00547c:	1000061e 	bne	r2,zero,c005498 <alt_get_errno+0x3c>
 c005480:	00830074 	movhi	r2,3073
 c005484:	10a3ee04 	addi	r2,r2,-28744
 c005488:	10800017 	ldw	r2,0(r2)
 c00548c:	103ee83a 	callr	r2
 c005490:	e0bfff15 	stw	r2,-4(fp)
 c005494:	00000306 	br	c0054a4 <alt_get_errno+0x48>
 c005498:	00830074 	movhi	r2,3073
 c00549c:	10aaef04 	addi	r2,r2,-21572
 c0054a0:	e0bfff15 	stw	r2,-4(fp)
 c0054a4:	e0bfff17 	ldw	r2,-4(fp)
}
 c0054a8:	e037883a 	mov	sp,fp
 c0054ac:	dfc00117 	ldw	ra,4(sp)
 c0054b0:	df000017 	ldw	fp,0(sp)
 c0054b4:	dec00204 	addi	sp,sp,8
 c0054b8:	f800283a 	ret

0c0054bc <altera_avalon_uart_write>:
 */

int
altera_avalon_uart_write(altera_avalon_uart_state* sp, const char* ptr, int len,
  int flags)
{
 c0054bc:	defff204 	addi	sp,sp,-56
 c0054c0:	dfc00d15 	stw	ra,52(sp)
 c0054c4:	df000c15 	stw	fp,48(sp)
 c0054c8:	df000c04 	addi	fp,sp,48
 c0054cc:	e13ffc15 	stw	r4,-16(fp)
 c0054d0:	e17ffd15 	stw	r5,-12(fp)
 c0054d4:	e1bffe15 	stw	r6,-8(fp)
 c0054d8:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context context;
  int             no_block;
  alt_u32         next;
  int             count = len;
 c0054dc:	e0bffe17 	ldw	r2,-8(fp)
 c0054e0:	e0bff815 	stw	r2,-32(fp)
  /* 
   * Construct a flag to indicate whether the device is being accessed in
   * blocking or non-blocking mode.
   */

  no_block = (flags & O_NONBLOCK);
 c0054e4:	e0bfff17 	ldw	r2,-4(fp)
 c0054e8:	1090000c 	andi	r2,r2,16384
 c0054ec:	e0bffa15 	stw	r2,-24(fp)
   * Loop transferring data from the input buffer to the transmit circular
   * buffer. The loop is terminated once all the data has been transferred,
   * or, (if in non-blocking mode) the buffer becomes full.
   */

  while (count)
 c0054f0:	00004006 	br	c0055f4 <altera_avalon_uart_write+0x138>
  {
    /* Determine the next slot in the buffer to access */

    next = (sp->tx_end + 1) & ALT_AVALON_UART_BUF_MSK;
 c0054f4:	e0bffc17 	ldw	r2,-16(fp)
 c0054f8:	10800517 	ldw	r2,20(r2)
 c0054fc:	10800044 	addi	r2,r2,1
 c005500:	10800fcc 	andi	r2,r2,63
 c005504:	e0bff915 	stw	r2,-28(fp)

    /* block waiting for space if necessary */

    if (next == sp->tx_start)
 c005508:	e0bffc17 	ldw	r2,-16(fp)
 c00550c:	10c00417 	ldw	r3,16(r2)
 c005510:	e0bff917 	ldw	r2,-28(fp)
 c005514:	1880251e 	bne	r3,r2,c0055ac <altera_avalon_uart_write+0xf0>
    {
      if (no_block)
 c005518:	e0bffa17 	ldw	r2,-24(fp)
 c00551c:	1005003a 	cmpeq	r2,r2,zero
 c005520:	1000051e 	bne	r2,zero,c005538 <altera_avalon_uart_write+0x7c>
      {
        /* Set errno to indicate why this function returned early */
 
        ALT_ERRNO = EWOULDBLOCK;
 c005524:	c0056840 	call	c005684 <alt_get_errno>
 c005528:	1007883a 	mov	r3,r2
 c00552c:	008002c4 	movi	r2,11
 c005530:	18800015 	stw	r2,0(r3)
        break;
 c005534:	00003206 	br	c005600 <altera_avalon_uart_write+0x144>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 c005538:	0005303a 	rdctl	r2,status
 c00553c:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 c005540:	e0fff717 	ldw	r3,-36(fp)
 c005544:	00bfff84 	movi	r2,-2
 c005548:	1884703a 	and	r2,r3,r2
 c00554c:	1001703a 	wrctl	status,r2
  
  return context;
 c005550:	e0bff717 	ldw	r2,-36(fp)
      {
        /* Block waiting for space in the circular buffer */

        /* First, ensure transmit interrupts are enabled to avoid deadlock */

        context = alt_irq_disable_all ();
 c005554:	e0bffb15 	stw	r2,-20(fp)
        sp->ctrl |= (ALTERA_AVALON_UART_CONTROL_TRDY_MSK |
 c005558:	e0bffc17 	ldw	r2,-16(fp)
 c00555c:	10800117 	ldw	r2,4(r2)
 c005560:	10c11014 	ori	r3,r2,1088
 c005564:	e0bffc17 	ldw	r2,-16(fp)
 c005568:	10c00115 	stw	r3,4(r2)
                        ALTERA_AVALON_UART_CONTROL_DCTS_MSK);
        IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
 c00556c:	e0bffc17 	ldw	r2,-16(fp)
 c005570:	10800017 	ldw	r2,0(r2)
 c005574:	11000304 	addi	r4,r2,12
 c005578:	e0bffc17 	ldw	r2,-16(fp)
 c00557c:	10800117 	ldw	r2,4(r2)
 c005580:	1007883a 	mov	r3,r2
 c005584:	2005883a 	mov	r2,r4
 c005588:	10c00035 	stwio	r3,0(r2)
 c00558c:	e0bffb17 	ldw	r2,-20(fp)
 c005590:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 c005594:	e0bff617 	ldw	r2,-40(fp)
 c005598:	1001703a 	wrctl	status,r2
          ALT_FLAG_PEND (sp->events, 
                         ALT_UART_WRITE_RDY,
                         OS_FLAG_WAIT_SET_ANY + OS_FLAG_CONSUME,
                         0);
        }
        while ((next == sp->tx_start));
 c00559c:	e0bffc17 	ldw	r2,-16(fp)
 c0055a0:	10c00417 	ldw	r3,16(r2)
 c0055a4:	e0bff917 	ldw	r2,-28(fp)
 c0055a8:	18bffc26 	beq	r3,r2,c00559c <altera_avalon_uart_write+0xe0>
      }
    }

    count--;
 c0055ac:	e0bff817 	ldw	r2,-32(fp)
 c0055b0:	10bfffc4 	addi	r2,r2,-1
 c0055b4:	e0bff815 	stw	r2,-32(fp)

    /* Add the next character to the transmit buffer */

    sp->tx_buf[sp->tx_end] = *ptr++;
 c0055b8:	e0bffc17 	ldw	r2,-16(fp)
 c0055bc:	10c00517 	ldw	r3,20(r2)
 c0055c0:	e0bffd17 	ldw	r2,-12(fp)
 c0055c4:	10800003 	ldbu	r2,0(r2)
 c0055c8:	1009883a 	mov	r4,r2
 c0055cc:	e0bffc17 	ldw	r2,-16(fp)
 c0055d0:	1885883a 	add	r2,r3,r2
 c0055d4:	10801704 	addi	r2,r2,92
 c0055d8:	11000005 	stb	r4,0(r2)
 c0055dc:	e0bffd17 	ldw	r2,-12(fp)
 c0055e0:	10800044 	addi	r2,r2,1
 c0055e4:	e0bffd15 	stw	r2,-12(fp)
    sp->tx_end = next;
 c0055e8:	e0fffc17 	ldw	r3,-16(fp)
 c0055ec:	e0bff917 	ldw	r2,-28(fp)
 c0055f0:	18800515 	stw	r2,20(r3)
   * Loop transferring data from the input buffer to the transmit circular
   * buffer. The loop is terminated once all the data has been transferred,
   * or, (if in non-blocking mode) the buffer becomes full.
   */

  while (count)
 c0055f4:	e0bff817 	ldw	r2,-32(fp)
 c0055f8:	1004c03a 	cmpne	r2,r2,zero
 c0055fc:	103fbd1e 	bne	r2,zero,c0054f4 <altera_avalon_uart_write+0x38>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 c005600:	0005303a 	rdctl	r2,status
 c005604:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 c005608:	e0fff517 	ldw	r3,-44(fp)
 c00560c:	00bfff84 	movi	r2,-2
 c005610:	1884703a 	and	r2,r3,r2
 c005614:	1001703a 	wrctl	status,r2
  
  return context;
 c005618:	e0bff517 	ldw	r2,-44(fp)
  /* 
   * Ensure that interrupts are enabled, so that the circular buffer can 
   * drain.
   */

  context = alt_irq_disable_all ();
 c00561c:	e0bffb15 	stw	r2,-20(fp)
  sp->ctrl |= ALTERA_AVALON_UART_CONTROL_TRDY_MSK |
 c005620:	e0bffc17 	ldw	r2,-16(fp)
 c005624:	10800117 	ldw	r2,4(r2)
 c005628:	10c11014 	ori	r3,r2,1088
 c00562c:	e0bffc17 	ldw	r2,-16(fp)
 c005630:	10c00115 	stw	r3,4(r2)
                 ALTERA_AVALON_UART_CONTROL_DCTS_MSK;
  IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
 c005634:	e0bffc17 	ldw	r2,-16(fp)
 c005638:	10800017 	ldw	r2,0(r2)
 c00563c:	11000304 	addi	r4,r2,12
 c005640:	e0bffc17 	ldw	r2,-16(fp)
 c005644:	10800117 	ldw	r2,4(r2)
 c005648:	1007883a 	mov	r3,r2
 c00564c:	2005883a 	mov	r2,r4
 c005650:	10c00035 	stwio	r3,0(r2)
 c005654:	e0bffb17 	ldw	r2,-20(fp)
 c005658:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 c00565c:	e0bff417 	ldw	r2,-48(fp)
 c005660:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (context);

  /* return the number of bytes written */

  return (len - count);
 c005664:	e0fffe17 	ldw	r3,-8(fp)
 c005668:	e0bff817 	ldw	r2,-32(fp)
 c00566c:	1885c83a 	sub	r2,r3,r2
}
 c005670:	e037883a 	mov	sp,fp
 c005674:	dfc00117 	ldw	ra,4(sp)
 c005678:	df000017 	ldw	fp,0(sp)
 c00567c:	dec00204 	addi	sp,sp,8
 c005680:	f800283a 	ret

0c005684 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 c005684:	defffd04 	addi	sp,sp,-12
 c005688:	dfc00215 	stw	ra,8(sp)
 c00568c:	df000115 	stw	fp,4(sp)
 c005690:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
 c005694:	00830074 	movhi	r2,3073
 c005698:	10a3ee04 	addi	r2,r2,-28744
 c00569c:	10800017 	ldw	r2,0(r2)
 c0056a0:	1005003a 	cmpeq	r2,r2,zero
 c0056a4:	1000061e 	bne	r2,zero,c0056c0 <alt_get_errno+0x3c>
 c0056a8:	00830074 	movhi	r2,3073
 c0056ac:	10a3ee04 	addi	r2,r2,-28744
 c0056b0:	10800017 	ldw	r2,0(r2)
 c0056b4:	103ee83a 	callr	r2
 c0056b8:	e0bfff15 	stw	r2,-4(fp)
 c0056bc:	00000306 	br	c0056cc <alt_get_errno+0x48>
 c0056c0:	00830074 	movhi	r2,3073
 c0056c4:	10aaef04 	addi	r2,r2,-21572
 c0056c8:	e0bfff15 	stw	r2,-4(fp)
 c0056cc:	e0bfff17 	ldw	r2,-4(fp)
}
 c0056d0:	e037883a 	mov	sp,fp
 c0056d4:	dfc00117 	ldw	ra,4(sp)
 c0056d8:	df000017 	ldw	fp,0(sp)
 c0056dc:	dec00204 	addi	sp,sp,8
 c0056e0:	f800283a 	ret

0c0056e4 <epcs_read_status_register>:
#include "alt_types.h"
#include "epcs_commands.h"
#include "altera_avalon_spi.h"

alt_u8 epcs_read_status_register(alt_u32 base)
{
 c0056e4:	defff904 	addi	sp,sp,-28
 c0056e8:	dfc00615 	stw	ra,24(sp)
 c0056ec:	df000515 	stw	fp,20(sp)
 c0056f0:	df000504 	addi	fp,sp,20
 c0056f4:	e13fff15 	stw	r4,-4(fp)
  const alt_u8 rdsr = epcs_rdsr;
 c0056f8:	00800144 	movi	r2,5
 c0056fc:	e0bffe05 	stb	r2,-8(fp)
  alt_u8 status;
  alt_avalon_spi_command(
 c005700:	00800044 	movi	r2,1
 c005704:	d8800015 	stw	r2,0(sp)
 c005708:	e0bffe44 	addi	r2,fp,-7
 c00570c:	d8800115 	stw	r2,4(sp)
 c005710:	d8000215 	stw	zero,8(sp)
 c005714:	e13fff17 	ldw	r4,-4(fp)
 c005718:	000b883a 	mov	r5,zero
 c00571c:	01800044 	movi	r6,1
 c005720:	e1fffe04 	addi	r7,fp,-8
 c005724:	c006ab40 	call	c006ab4 <alt_avalon_spi_command>
    1,
    &status,
    0
  );

  return status;
 c005728:	e0bffe43 	ldbu	r2,-7(fp)
 c00572c:	10803fcc 	andi	r2,r2,255
}
 c005730:	e037883a 	mov	sp,fp
 c005734:	dfc00117 	ldw	ra,4(sp)
 c005738:	df000017 	ldw	fp,0(sp)
 c00573c:	dec00204 	addi	sp,sp,8
 c005740:	f800283a 	ret

0c005744 <epcs_sector_erase>:
  {
  }
}

void epcs_sector_erase(alt_u32 base, alt_u32 offset, alt_u32 four_bytes_mode)
{
 c005744:	defff504 	addi	sp,sp,-44
 c005748:	dfc00a15 	stw	ra,40(sp)
 c00574c:	df000915 	stw	fp,36(sp)
 c005750:	df000904 	addi	fp,sp,36
 c005754:	e13ffd15 	stw	r4,-12(fp)
 c005758:	e17ffe15 	stw	r5,-8(fp)
 c00575c:	e1bfff15 	stw	r6,-4(fp)
  alt_u8 se[5];
  alt_u8 len;
  
  if(four_bytes_mode)
 c005760:	e0bfff17 	ldw	r2,-4(fp)
 c005764:	1005003a 	cmpeq	r2,r2,zero
 c005768:	1000121e 	bne	r2,zero,c0057b4 <epcs_sector_erase+0x70>
  {
      se[0] = epcs_se;  /* Note: Use epcs_se for Micron EPCS256 */
 c00576c:	00bff604 	movi	r2,-40
 c005770:	e0bffb05 	stb	r2,-20(fp)
      se[1] = (offset >> 24) & 0xFF;
 c005774:	e0bffe17 	ldw	r2,-8(fp)
 c005778:	1004d63a 	srli	r2,r2,24
 c00577c:	e0bffb45 	stb	r2,-19(fp)
      se[2] = (offset >> 16) & 0xFF;
 c005780:	e0bffe17 	ldw	r2,-8(fp)
 c005784:	1004d43a 	srli	r2,r2,16
 c005788:	e0bffb85 	stb	r2,-18(fp)
      se[3] = (offset >> 8) & 0xFF;
 c00578c:	e0bffe17 	ldw	r2,-8(fp)
 c005790:	1004d23a 	srli	r2,r2,8
 c005794:	e0bffbc5 	stb	r2,-17(fp)
      se[4] = offset & 0xFF;
 c005798:	e0bffe17 	ldw	r2,-8(fp)
 c00579c:	e0bffc05 	stb	r2,-16(fp)
      len   = 5;
 c0057a0:	00800144 	movi	r2,5
 c0057a4:	e0bffa05 	stb	r2,-24(fp)
      epcs_enter_4_bytes_mode(base);
 c0057a8:	e13ffd17 	ldw	r4,-12(fp)
 c0057ac:	c005d080 	call	c005d08 <epcs_enter_4_bytes_mode>
 c0057b0:	00000c06 	br	c0057e4 <epcs_sector_erase+0xa0>
  }
  else
  {
      se[0] = epcs_se;
 c0057b4:	00bff604 	movi	r2,-40
 c0057b8:	e0bffb05 	stb	r2,-20(fp)
      se[1] = (offset >> 16) & 0xFF;
 c0057bc:	e0bffe17 	ldw	r2,-8(fp)
 c0057c0:	1004d43a 	srli	r2,r2,16
 c0057c4:	e0bffb45 	stb	r2,-19(fp)
      se[2] = (offset >> 8) & 0xFF;
 c0057c8:	e0bffe17 	ldw	r2,-8(fp)
 c0057cc:	1004d23a 	srli	r2,r2,8
 c0057d0:	e0bffb85 	stb	r2,-18(fp)
      se[3] = offset & 0xFF;
 c0057d4:	e0bffe17 	ldw	r2,-8(fp)
 c0057d8:	e0bffbc5 	stb	r2,-17(fp)
      len   = 4;
 c0057dc:	00800104 	movi	r2,4
 c0057e0:	e0bffa05 	stb	r2,-24(fp)
  }

  /* Execute a WREN instruction */
  epcs_write_enable(base);
 c0057e4:	e13ffd17 	ldw	r4,-12(fp)
 c0057e8:	c0059f80 	call	c0059f8 <epcs_write_enable>

  alt_avalon_spi_command(
 c0057ec:	e1bffa03 	ldbu	r6,-24(fp)
 c0057f0:	e1fffb04 	addi	r7,fp,-20
 c0057f4:	d8000015 	stw	zero,0(sp)
 c0057f8:	d8000115 	stw	zero,4(sp)
 c0057fc:	d8000215 	stw	zero,8(sp)
 c005800:	e13ffd17 	ldw	r4,-12(fp)
 c005804:	000b883a 	mov	r5,zero
 c005808:	c006ab40 	call	c006ab4 <alt_avalon_spi_command>
    0,
    (alt_u8*)0,
    0
  );

  epcs_await_wip_released(base);
 c00580c:	e13ffd17 	ldw	r4,-12(fp)
 c005810:	c00583c0 	call	c00583c <epcs_await_wip_released>

  if(four_bytes_mode)
 c005814:	e0bfff17 	ldw	r2,-4(fp)
 c005818:	1005003a 	cmpeq	r2,r2,zero
 c00581c:	1000021e 	bne	r2,zero,c005828 <epcs_sector_erase+0xe4>
  {
    epcs_exit_4_bytes_mode(base);
 c005820:	e13ffd17 	ldw	r4,-12(fp)
 c005824:	c005d600 	call	c005d60 <epcs_exit_4_bytes_mode>
  }
}
 c005828:	e037883a 	mov	sp,fp
 c00582c:	dfc00117 	ldw	ra,4(sp)
 c005830:	df000017 	ldw	fp,0(sp)
 c005834:	dec00204 	addi	sp,sp,8
 c005838:	f800283a 	ret

0c00583c <epcs_await_wip_released>:
{
  return epcs_read_status_register(base) & 1;
}

static ALT_INLINE void epcs_await_wip_released(alt_u32 base)
{
 c00583c:	defffd04 	addi	sp,sp,-12
 c005840:	dfc00215 	stw	ra,8(sp)
 c005844:	df000115 	stw	fp,4(sp)
 c005848:	df000104 	addi	fp,sp,4
 c00584c:	e13fff15 	stw	r4,-4(fp)
  /* Wait until the WIP bit goes low. */
  while (epcs_test_wip(base))
 c005850:	e13fff17 	ldw	r4,-4(fp)
 c005854:	c0058740 	call	c005874 <epcs_test_wip>
 c005858:	1004c03a 	cmpne	r2,r2,zero
 c00585c:	103ffc1e 	bne	r2,zero,c005850 <epcs_await_wip_released+0x14>
  {
  }
}
 c005860:	e037883a 	mov	sp,fp
 c005864:	dfc00117 	ldw	ra,4(sp)
 c005868:	df000017 	ldw	fp,0(sp)
 c00586c:	dec00204 	addi	sp,sp,8
 c005870:	f800283a 	ret

0c005874 <epcs_test_wip>:

  return status;
}

static ALT_INLINE int epcs_test_wip(alt_u32 base)
{
 c005874:	defffd04 	addi	sp,sp,-12
 c005878:	dfc00215 	stw	ra,8(sp)
 c00587c:	df000115 	stw	fp,4(sp)
 c005880:	df000104 	addi	fp,sp,4
 c005884:	e13fff15 	stw	r4,-4(fp)
  return epcs_read_status_register(base) & 1;
 c005888:	e13fff17 	ldw	r4,-4(fp)
 c00588c:	c0056e40 	call	c0056e4 <epcs_read_status_register>
 c005890:	10803fcc 	andi	r2,r2,255
 c005894:	1080004c 	andi	r2,r2,1
}
 c005898:	e037883a 	mov	sp,fp
 c00589c:	dfc00117 	ldw	ra,4(sp)
 c0058a0:	df000017 	ldw	fp,0(sp)
 c0058a4:	dec00204 	addi	sp,sp,8
 c0058a8:	f800283a 	ret

0c0058ac <epcs_read_buffer>:
  }
}

alt_32 epcs_read_buffer(alt_u32 base, int offset, alt_u8 *dest_addr, int length,
                        alt_u32 four_bytes_mode)
{
 c0058ac:	defff404 	addi	sp,sp,-48
 c0058b0:	dfc00b15 	stw	ra,44(sp)
 c0058b4:	df000a15 	stw	fp,40(sp)
 c0058b8:	df000a04 	addi	fp,sp,40
 c0058bc:	e13ffc15 	stw	r4,-16(fp)
 c0058c0:	e17ffd15 	stw	r5,-12(fp)
 c0058c4:	e1bffe15 	stw	r6,-8(fp)
 c0058c8:	e1ffff15 	stw	r7,-4(fp)
  alt_u8 read_command[5];
  alt_u32 cmd_len;

  read_command[0] = epcs_read;
 c0058cc:	008000c4 	movi	r2,3
 c0058d0:	e0bffa05 	stb	r2,-24(fp)
  
  if(four_bytes_mode)
 c0058d4:	e0800217 	ldw	r2,8(fp)
 c0058d8:	1005003a 	cmpeq	r2,r2,zero
 c0058dc:	10001c1e 	bne	r2,zero,c005950 <epcs_read_buffer+0xa4>
  {
        read_command[1] = (offset >> 24) & 0xFF;
 c0058e0:	e0bffd17 	ldw	r2,-12(fp)
 c0058e4:	1005d63a 	srai	r2,r2,24
 c0058e8:	1007883a 	mov	r3,r2
 c0058ec:	00bfffc4 	movi	r2,-1
 c0058f0:	1884703a 	and	r2,r3,r2
 c0058f4:	e0bffa45 	stb	r2,-23(fp)
        read_command[2] = (offset >> 16) & 0xFF;
 c0058f8:	e0bffd17 	ldw	r2,-12(fp)
 c0058fc:	1005d43a 	srai	r2,r2,16
 c005900:	1007883a 	mov	r3,r2
 c005904:	00bfffc4 	movi	r2,-1
 c005908:	1884703a 	and	r2,r3,r2
 c00590c:	e0bffa85 	stb	r2,-22(fp)
        read_command[3] = (offset >> 8) & 0xFF;
 c005910:	e0bffd17 	ldw	r2,-12(fp)
 c005914:	1005d23a 	srai	r2,r2,8
 c005918:	1007883a 	mov	r3,r2
 c00591c:	00bfffc4 	movi	r2,-1
 c005920:	1884703a 	and	r2,r3,r2
 c005924:	e0bffac5 	stb	r2,-21(fp)
        read_command[4] = offset & 0xFF;
 c005928:	e0bffd17 	ldw	r2,-12(fp)
 c00592c:	1007883a 	mov	r3,r2
 c005930:	00bfffc4 	movi	r2,-1
 c005934:	1884703a 	and	r2,r3,r2
 c005938:	e0bffb05 	stb	r2,-20(fp)
        cmd_len = 5;
 c00593c:	00800144 	movi	r2,5
 c005940:	e0bff915 	stw	r2,-28(fp)
        epcs_enter_4_bytes_mode(base);
 c005944:	e13ffc17 	ldw	r4,-16(fp)
 c005948:	c005d080 	call	c005d08 <epcs_enter_4_bytes_mode>
 c00594c:	00001306 	br	c00599c <epcs_read_buffer+0xf0>
  }
  else
  {
        read_command[1] = (offset >> 16) & 0xFF;
 c005950:	e0bffd17 	ldw	r2,-12(fp)
 c005954:	1005d43a 	srai	r2,r2,16
 c005958:	1007883a 	mov	r3,r2
 c00595c:	00bfffc4 	movi	r2,-1
 c005960:	1884703a 	and	r2,r3,r2
 c005964:	e0bffa45 	stb	r2,-23(fp)
        read_command[2] = (offset >> 8) & 0xFF;
 c005968:	e0bffd17 	ldw	r2,-12(fp)
 c00596c:	1005d23a 	srai	r2,r2,8
 c005970:	1007883a 	mov	r3,r2
 c005974:	00bfffc4 	movi	r2,-1
 c005978:	1884703a 	and	r2,r3,r2
 c00597c:	e0bffa85 	stb	r2,-22(fp)
        read_command[3] = offset & 0xFF;
 c005980:	e0bffd17 	ldw	r2,-12(fp)
 c005984:	1007883a 	mov	r3,r2
 c005988:	00bfffc4 	movi	r2,-1
 c00598c:	1884703a 	and	r2,r3,r2
 c005990:	e0bffac5 	stb	r2,-21(fp)
        cmd_len = 4;
 c005994:	00800104 	movi	r2,4
 c005998:	e0bff915 	stw	r2,-28(fp)
  }

  epcs_await_wip_released(base);
 c00599c:	e13ffc17 	ldw	r4,-16(fp)
 c0059a0:	c00583c0 	call	c00583c <epcs_await_wip_released>

  alt_avalon_spi_command(
 c0059a4:	e0bfff17 	ldw	r2,-4(fp)
 c0059a8:	e1fffa04 	addi	r7,fp,-24
 c0059ac:	d8800015 	stw	r2,0(sp)
 c0059b0:	e0bffe17 	ldw	r2,-8(fp)
 c0059b4:	d8800115 	stw	r2,4(sp)
 c0059b8:	d8000215 	stw	zero,8(sp)
 c0059bc:	e13ffc17 	ldw	r4,-16(fp)
 c0059c0:	000b883a 	mov	r5,zero
 c0059c4:	e1bff917 	ldw	r6,-28(fp)
 c0059c8:	c006ab40 	call	c006ab4 <alt_avalon_spi_command>
    length,
    (alt_u8*)dest_addr,
    0
  );

  if(four_bytes_mode)
 c0059cc:	e0800217 	ldw	r2,8(fp)
 c0059d0:	1005003a 	cmpeq	r2,r2,zero
 c0059d4:	1000021e 	bne	r2,zero,c0059e0 <epcs_read_buffer+0x134>
  {
    epcs_exit_4_bytes_mode(base);
 c0059d8:	e13ffc17 	ldw	r4,-16(fp)
 c0059dc:	c005d600 	call	c005d60 <epcs_exit_4_bytes_mode>
  }

  return length;
 c0059e0:	e0bfff17 	ldw	r2,-4(fp)
}
 c0059e4:	e037883a 	mov	sp,fp
 c0059e8:	dfc00117 	ldw	ra,4(sp)
 c0059ec:	df000017 	ldw	fp,0(sp)
 c0059f0:	dec00204 	addi	sp,sp,8
 c0059f4:	f800283a 	ret

0c0059f8 <epcs_write_enable>:

void epcs_write_enable(alt_u32 base)
{
 c0059f8:	defff904 	addi	sp,sp,-28
 c0059fc:	dfc00615 	stw	ra,24(sp)
 c005a00:	df000515 	stw	fp,20(sp)
 c005a04:	df000504 	addi	fp,sp,20
 c005a08:	e13fff15 	stw	r4,-4(fp)
  const alt_u8 wren = epcs_wren;
 c005a0c:	00800184 	movi	r2,6
 c005a10:	e0bffe05 	stb	r2,-8(fp)
  alt_avalon_spi_command(
 c005a14:	d8000015 	stw	zero,0(sp)
 c005a18:	d8000115 	stw	zero,4(sp)
 c005a1c:	d8000215 	stw	zero,8(sp)
 c005a20:	e13fff17 	ldw	r4,-4(fp)
 c005a24:	000b883a 	mov	r5,zero
 c005a28:	01800044 	movi	r6,1
 c005a2c:	e1fffe04 	addi	r7,fp,-8
 c005a30:	c006ab40 	call	c006ab4 <alt_avalon_spi_command>
    &wren,
    0,
    (alt_u8*)0,
    0
  );
}
 c005a34:	e037883a 	mov	sp,fp
 c005a38:	dfc00117 	ldw	ra,4(sp)
 c005a3c:	df000017 	ldw	fp,0(sp)
 c005a40:	dec00204 	addi	sp,sp,8
 c005a44:	f800283a 	ret

0c005a48 <epcs_write_status_register>:

void epcs_write_status_register(alt_u32 base, alt_u8 value)
{
 c005a48:	defff804 	addi	sp,sp,-32
 c005a4c:	dfc00715 	stw	ra,28(sp)
 c005a50:	df000615 	stw	fp,24(sp)
 c005a54:	df000604 	addi	fp,sp,24
 c005a58:	e13ffe15 	stw	r4,-8(fp)
 c005a5c:	e17fff05 	stb	r5,-4(fp)
  alt_u8 wrsr[2];
  
  wrsr[0] = epcs_wrsr;
 c005a60:	00800044 	movi	r2,1
 c005a64:	e0bffd05 	stb	r2,-12(fp)
  wrsr[1] = value;
 c005a68:	e0bfff03 	ldbu	r2,-4(fp)
 c005a6c:	e0bffd45 	stb	r2,-11(fp)

  alt_avalon_spi_command(
 c005a70:	d8000015 	stw	zero,0(sp)
 c005a74:	d8000115 	stw	zero,4(sp)
 c005a78:	d8000215 	stw	zero,8(sp)
 c005a7c:	e13ffe17 	ldw	r4,-8(fp)
 c005a80:	000b883a 	mov	r5,zero
 c005a84:	01800084 	movi	r6,2
 c005a88:	e1fffd04 	addi	r7,fp,-12
 c005a8c:	c006ab40 	call	c006ab4 <alt_avalon_spi_command>
    0,
    (alt_u8*)0,
    0
  );

  epcs_await_wip_released(base);
 c005a90:	e13ffe17 	ldw	r4,-8(fp)
 c005a94:	c00583c0 	call	c00583c <epcs_await_wip_released>
}
 c005a98:	e037883a 	mov	sp,fp
 c005a9c:	dfc00117 	ldw	ra,4(sp)
 c005aa0:	df000017 	ldw	fp,0(sp)
 c005aa4:	dec00204 	addi	sp,sp,8
 c005aa8:	f800283a 	ret

0c005aac <epcs_write_buffer>:

/* Write a partial or full page, assuming that page has been erased */
alt_32 epcs_write_buffer(alt_u32 base, int offset, const alt_u8* src_addr, 
                         int length, alt_u32 four_bytes_mode)
{
 c005aac:	defff404 	addi	sp,sp,-48
 c005ab0:	dfc00b15 	stw	ra,44(sp)
 c005ab4:	df000a15 	stw	fp,40(sp)
 c005ab8:	df000a04 	addi	fp,sp,40
 c005abc:	e13ffc15 	stw	r4,-16(fp)
 c005ac0:	e17ffd15 	stw	r5,-12(fp)
 c005ac4:	e1bffe15 	stw	r6,-8(fp)
 c005ac8:	e1ffff15 	stw	r7,-4(fp)
  alt_u8 pp[5];
  alt_u32 cmd_len;
  
  pp[0] = epcs_pp;
 c005acc:	00800084 	movi	r2,2
 c005ad0:	e0bffa05 	stb	r2,-24(fp)
  
  if(four_bytes_mode)
 c005ad4:	e0800217 	ldw	r2,8(fp)
 c005ad8:	1005003a 	cmpeq	r2,r2,zero
 c005adc:	10001c1e 	bne	r2,zero,c005b50 <epcs_write_buffer+0xa4>
  {
      pp[1] = (offset >> 24) & 0xFF;
 c005ae0:	e0bffd17 	ldw	r2,-12(fp)
 c005ae4:	1005d63a 	srai	r2,r2,24
 c005ae8:	1007883a 	mov	r3,r2
 c005aec:	00bfffc4 	movi	r2,-1
 c005af0:	1884703a 	and	r2,r3,r2
 c005af4:	e0bffa45 	stb	r2,-23(fp)
      pp[2] = (offset >> 16) & 0xFF;
 c005af8:	e0bffd17 	ldw	r2,-12(fp)
 c005afc:	1005d43a 	srai	r2,r2,16
 c005b00:	1007883a 	mov	r3,r2
 c005b04:	00bfffc4 	movi	r2,-1
 c005b08:	1884703a 	and	r2,r3,r2
 c005b0c:	e0bffa85 	stb	r2,-22(fp)
      pp[3] = (offset >> 8) & 0xFF;
 c005b10:	e0bffd17 	ldw	r2,-12(fp)
 c005b14:	1005d23a 	srai	r2,r2,8
 c005b18:	1007883a 	mov	r3,r2
 c005b1c:	00bfffc4 	movi	r2,-1
 c005b20:	1884703a 	and	r2,r3,r2
 c005b24:	e0bffac5 	stb	r2,-21(fp)
      pp[4] = offset & 0xFF;
 c005b28:	e0bffd17 	ldw	r2,-12(fp)
 c005b2c:	1007883a 	mov	r3,r2
 c005b30:	00bfffc4 	movi	r2,-1
 c005b34:	1884703a 	and	r2,r3,r2
 c005b38:	e0bffb05 	stb	r2,-20(fp)
      cmd_len = 5;
 c005b3c:	00800144 	movi	r2,5
 c005b40:	e0bff915 	stw	r2,-28(fp)
      epcs_enter_4_bytes_mode(base);
 c005b44:	e13ffc17 	ldw	r4,-16(fp)
 c005b48:	c005d080 	call	c005d08 <epcs_enter_4_bytes_mode>
 c005b4c:	00001306 	br	c005b9c <epcs_write_buffer+0xf0>
  }
  else
  {
      pp[1] = (offset >> 16) & 0xFF;
 c005b50:	e0bffd17 	ldw	r2,-12(fp)
 c005b54:	1005d43a 	srai	r2,r2,16
 c005b58:	1007883a 	mov	r3,r2
 c005b5c:	00bfffc4 	movi	r2,-1
 c005b60:	1884703a 	and	r2,r3,r2
 c005b64:	e0bffa45 	stb	r2,-23(fp)
      pp[2] = (offset >> 8) & 0xFF;
 c005b68:	e0bffd17 	ldw	r2,-12(fp)
 c005b6c:	1005d23a 	srai	r2,r2,8
 c005b70:	1007883a 	mov	r3,r2
 c005b74:	00bfffc4 	movi	r2,-1
 c005b78:	1884703a 	and	r2,r3,r2
 c005b7c:	e0bffa85 	stb	r2,-22(fp)
      pp[3] = offset & 0xFF;
 c005b80:	e0bffd17 	ldw	r2,-12(fp)
 c005b84:	1007883a 	mov	r3,r2
 c005b88:	00bfffc4 	movi	r2,-1
 c005b8c:	1884703a 	and	r2,r3,r2
 c005b90:	e0bffac5 	stb	r2,-21(fp)
      cmd_len = 4;
 c005b94:	00800104 	movi	r2,4
 c005b98:	e0bff915 	stw	r2,-28(fp)
  }

  /* First, WREN */
  epcs_write_enable(base);
 c005b9c:	e13ffc17 	ldw	r4,-16(fp)
 c005ba0:	c0059f80 	call	c0059f8 <epcs_write_enable>

  /* Send the PP command */
  alt_avalon_spi_command(
 c005ba4:	e1fffa04 	addi	r7,fp,-24
 c005ba8:	d8000015 	stw	zero,0(sp)
 c005bac:	d8000115 	stw	zero,4(sp)
 c005bb0:	00800044 	movi	r2,1
 c005bb4:	d8800215 	stw	r2,8(sp)
 c005bb8:	e13ffc17 	ldw	r4,-16(fp)
 c005bbc:	000b883a 	mov	r5,zero
 c005bc0:	e1bff917 	ldw	r6,-28(fp)
 c005bc4:	c006ab40 	call	c006ab4 <alt_avalon_spi_command>
    (alt_u8*)0,
    ALT_AVALON_SPI_COMMAND_MERGE
  );

  /* Send the user's buffer */
  alt_avalon_spi_command(
 c005bc8:	e1bfff17 	ldw	r6,-4(fp)
 c005bcc:	d8000015 	stw	zero,0(sp)
 c005bd0:	d8000115 	stw	zero,4(sp)
 c005bd4:	d8000215 	stw	zero,8(sp)
 c005bd8:	e13ffc17 	ldw	r4,-16(fp)
 c005bdc:	000b883a 	mov	r5,zero
 c005be0:	e1fffe17 	ldw	r7,-8(fp)
 c005be4:	c006ab40 	call	c006ab4 <alt_avalon_spi_command>
   * if the user's going to go off and ignore the flash for
   * a while, its writes could occur in parallel with user code
   * execution.  Unfortunately, I have to guard all reads/writes
   * with wip-tests, to make that happen.
   */
  epcs_await_wip_released(base);
 c005be8:	e13ffc17 	ldw	r4,-16(fp)
 c005bec:	c00583c0 	call	c00583c <epcs_await_wip_released>

  if(four_bytes_mode)
 c005bf0:	e0800217 	ldw	r2,8(fp)
 c005bf4:	1005003a 	cmpeq	r2,r2,zero
 c005bf8:	1000021e 	bne	r2,zero,c005c04 <epcs_write_buffer+0x158>
  {
    epcs_exit_4_bytes_mode(base);
 c005bfc:	e13ffc17 	ldw	r4,-16(fp)
 c005c00:	c005d600 	call	c005d60 <epcs_exit_4_bytes_mode>
  }

  return length;
 c005c04:	e0bfff17 	ldw	r2,-4(fp)
}
 c005c08:	e037883a 	mov	sp,fp
 c005c0c:	dfc00117 	ldw	ra,4(sp)
 c005c10:	df000017 	ldw	fp,0(sp)
 c005c14:	dec00204 	addi	sp,sp,8
 c005c18:	f800283a 	ret

0c005c1c <epcs_read_electronic_signature>:


alt_u8 epcs_read_electronic_signature(alt_u32 base)
{
 c005c1c:	defff804 	addi	sp,sp,-32
 c005c20:	dfc00715 	stw	ra,28(sp)
 c005c24:	df000615 	stw	fp,24(sp)
 c005c28:	df000604 	addi	fp,sp,24
 c005c2c:	e13fff15 	stw	r4,-4(fp)
  const alt_u8 res_cmd[] = {epcs_res, 0, 0, 0};
 c005c30:	00bfeac4 	movi	r2,-85
 c005c34:	e0bffd05 	stb	r2,-12(fp)
 c005c38:	e03ffd45 	stb	zero,-11(fp)
 c005c3c:	e03ffd85 	stb	zero,-10(fp)
 c005c40:	e03ffdc5 	stb	zero,-9(fp)
  alt_u8 res;

  alt_avalon_spi_command(
 c005c44:	00800044 	movi	r2,1
 c005c48:	d8800015 	stw	r2,0(sp)
 c005c4c:	e0bffe04 	addi	r2,fp,-8
 c005c50:	d8800115 	stw	r2,4(sp)
 c005c54:	d8000215 	stw	zero,8(sp)
 c005c58:	e13fff17 	ldw	r4,-4(fp)
 c005c5c:	000b883a 	mov	r5,zero
 c005c60:	01800104 	movi	r6,4
 c005c64:	e1fffd04 	addi	r7,fp,-12
 c005c68:	c006ab40 	call	c006ab4 <alt_avalon_spi_command>
    1,
    &res,
    0
  );

  return res;
 c005c6c:	e0bffe03 	ldbu	r2,-8(fp)
 c005c70:	10803fcc 	andi	r2,r2,255
}
 c005c74:	e037883a 	mov	sp,fp
 c005c78:	dfc00117 	ldw	ra,4(sp)
 c005c7c:	df000017 	ldw	fp,0(sp)
 c005c80:	dec00204 	addi	sp,sp,8
 c005c84:	f800283a 	ret

0c005c88 <epcs_read_device_id>:

alt_u32 epcs_read_device_id(alt_u32 base)
{
 c005c88:	defff804 	addi	sp,sp,-32
 c005c8c:	dfc00715 	stw	ra,28(sp)
 c005c90:	df000615 	stw	fp,24(sp)
 c005c94:	df000604 	addi	fp,sp,24
 c005c98:	e13fff15 	stw	r4,-4(fp)
  const alt_u8 rd_id_cmd[] = {epcs_rdid};
 c005c9c:	00bfe7c4 	movi	r2,-97
 c005ca0:	e0bffd05 	stb	r2,-12(fp)
  alt_u8 id[3];

  alt_avalon_spi_command(
 c005ca4:	008000c4 	movi	r2,3
 c005ca8:	d8800015 	stw	r2,0(sp)
 c005cac:	e0bffe04 	addi	r2,fp,-8
 c005cb0:	d8800115 	stw	r2,4(sp)
 c005cb4:	d8000215 	stw	zero,8(sp)
 c005cb8:	e13fff17 	ldw	r4,-4(fp)
 c005cbc:	000b883a 	mov	r5,zero
 c005cc0:	01800044 	movi	r6,1
 c005cc4:	e1fffd04 	addi	r7,fp,-12
 c005cc8:	c006ab40 	call	c006ab4 <alt_avalon_spi_command>
    3,
    id,
    0
  );

  return (alt_u32) ((id[0] << 16) | (id[1] << 8) | id[2]);
 c005ccc:	e0bffe03 	ldbu	r2,-8(fp)
 c005cd0:	10803fcc 	andi	r2,r2,255
 c005cd4:	1006943a 	slli	r3,r2,16
 c005cd8:	e0bffe43 	ldbu	r2,-7(fp)
 c005cdc:	10803fcc 	andi	r2,r2,255
 c005ce0:	1004923a 	slli	r2,r2,8
 c005ce4:	1886b03a 	or	r3,r3,r2
 c005ce8:	e0bffe83 	ldbu	r2,-6(fp)
 c005cec:	10803fcc 	andi	r2,r2,255
 c005cf0:	1884b03a 	or	r2,r3,r2
}
 c005cf4:	e037883a 	mov	sp,fp
 c005cf8:	dfc00117 	ldw	ra,4(sp)
 c005cfc:	df000017 	ldw	fp,0(sp)
 c005d00:	dec00204 	addi	sp,sp,8
 c005d04:	f800283a 	ret

0c005d08 <epcs_enter_4_bytes_mode>:

void epcs_enter_4_bytes_mode(alt_u32 base)
{
 c005d08:	defff904 	addi	sp,sp,-28
 c005d0c:	dfc00615 	stw	ra,24(sp)
 c005d10:	df000515 	stw	fp,20(sp)
 c005d14:	df000504 	addi	fp,sp,20
 c005d18:	e13fff15 	stw	r4,-4(fp)
  const alt_u8 en4b_cmd = epcs_en4b;
 c005d1c:	00bfedc4 	movi	r2,-73
 c005d20:	e0bffe05 	stb	r2,-8(fp)

  /* First, WREN */
  epcs_write_enable(base);
 c005d24:	e13fff17 	ldw	r4,-4(fp)
 c005d28:	c0059f80 	call	c0059f8 <epcs_write_enable>

  alt_avalon_spi_command(
 c005d2c:	d8000015 	stw	zero,0(sp)
 c005d30:	d8000115 	stw	zero,4(sp)
 c005d34:	d8000215 	stw	zero,8(sp)
 c005d38:	e13fff17 	ldw	r4,-4(fp)
 c005d3c:	000b883a 	mov	r5,zero
 c005d40:	01800044 	movi	r6,1
 c005d44:	e1fffe04 	addi	r7,fp,-8
 c005d48:	c006ab40 	call	c006ab4 <alt_avalon_spi_command>
    (alt_u8*)0,
    0
  );

  return;
}
 c005d4c:	e037883a 	mov	sp,fp
 c005d50:	dfc00117 	ldw	ra,4(sp)
 c005d54:	df000017 	ldw	fp,0(sp)
 c005d58:	dec00204 	addi	sp,sp,8
 c005d5c:	f800283a 	ret

0c005d60 <epcs_exit_4_bytes_mode>:

void epcs_exit_4_bytes_mode(alt_u32 base)
{
 c005d60:	defff904 	addi	sp,sp,-28
 c005d64:	dfc00615 	stw	ra,24(sp)
 c005d68:	df000515 	stw	fp,20(sp)
 c005d6c:	df000504 	addi	fp,sp,20
 c005d70:	e13fff15 	stw	r4,-4(fp)
  const alt_u8 exit4b_cmd = epcs_dis4b;
 c005d74:	00bffa44 	movi	r2,-23
 c005d78:	e0bffe05 	stb	r2,-8(fp)

  /* First, WREN */
  epcs_write_enable(base);
 c005d7c:	e13fff17 	ldw	r4,-4(fp)
 c005d80:	c0059f80 	call	c0059f8 <epcs_write_enable>

  alt_avalon_spi_command(
 c005d84:	d8000015 	stw	zero,0(sp)
 c005d88:	d8000115 	stw	zero,4(sp)
 c005d8c:	d8000215 	stw	zero,8(sp)
 c005d90:	e13fff17 	ldw	r4,-4(fp)
 c005d94:	000b883a 	mov	r5,zero
 c005d98:	01800044 	movi	r6,1
 c005d9c:	e1fffe04 	addi	r7,fp,-8
 c005da0:	c006ab40 	call	c006ab4 <alt_avalon_spi_command>
    (alt_u8*)0,
    0
  );

  return;
}
 c005da4:	e037883a 	mov	sp,fp
 c005da8:	dfc00117 	ldw	ra,4(sp)
 c005dac:	df000017 	ldw	fp,0(sp)
 c005db0:	dec00204 	addi	sp,sp,8
 c005db4:	f800283a 	ret

0c005db8 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
 c005db8:	defff404 	addi	sp,sp,-48
 c005dbc:	df000b15 	stw	fp,44(sp)
 c005dc0:	df000b04 	addi	fp,sp,44
 c005dc4:	e13ffb15 	stw	r4,-20(fp)
 c005dc8:	e17ffc15 	stw	r5,-16(fp)
 c005dcc:	e1bffd15 	stw	r6,-12(fp)
 c005dd0:	e1fffe15 	stw	r7,-8(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
 c005dd4:	e03ff915 	stw	zero,-28(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
 c005dd8:	00830074 	movhi	r2,3073
 c005ddc:	10aaf404 	addi	r2,r2,-21552
 c005de0:	10800017 	ldw	r2,0(r2)
  
  if (alt_ticks_per_second ())
 c005de4:	1005003a 	cmpeq	r2,r2,zero
 c005de8:	1000411e 	bne	r2,zero,c005ef0 <alt_alarm_start+0x138>
  {
    if (alarm)
 c005dec:	e0bffb17 	ldw	r2,-20(fp)
 c005df0:	1005003a 	cmpeq	r2,r2,zero
 c005df4:	10003b1e 	bne	r2,zero,c005ee4 <alt_alarm_start+0x12c>
    {
      alarm->callback = callback;
 c005df8:	e0fffb17 	ldw	r3,-20(fp)
 c005dfc:	e0bffd17 	ldw	r2,-12(fp)
 c005e00:	18800315 	stw	r2,12(r3)
      alarm->context  = context;
 c005e04:	e0fffb17 	ldw	r3,-20(fp)
 c005e08:	e0bffe17 	ldw	r2,-8(fp)
 c005e0c:	18800515 	stw	r2,20(r3)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 c005e10:	0005303a 	rdctl	r2,status
 c005e14:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 c005e18:	e0fff817 	ldw	r3,-32(fp)
 c005e1c:	00bfff84 	movi	r2,-2
 c005e20:	1884703a 	and	r2,r3,r2
 c005e24:	1001703a 	wrctl	status,r2
  
  return context;
 c005e28:	e0bff817 	ldw	r2,-32(fp)
 
      irq_context = alt_irq_disable_all ();
 c005e2c:	e0bffa15 	stw	r2,-24(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
 c005e30:	00830074 	movhi	r2,3073
 c005e34:	10aaf504 	addi	r2,r2,-21548
 c005e38:	10800017 	ldw	r2,0(r2)
      
      current_nticks = alt_nticks();
 c005e3c:	e0bff915 	stw	r2,-28(fp)
      
      alarm->time = nticks + current_nticks + 1; 
 c005e40:	e0fffc17 	ldw	r3,-16(fp)
 c005e44:	e0bff917 	ldw	r2,-28(fp)
 c005e48:	1885883a 	add	r2,r3,r2
 c005e4c:	10c00044 	addi	r3,r2,1
 c005e50:	e0bffb17 	ldw	r2,-20(fp)
 c005e54:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
 c005e58:	e0bffb17 	ldw	r2,-20(fp)
 c005e5c:	10c00217 	ldw	r3,8(r2)
 c005e60:	e0bff917 	ldw	r2,-28(fp)
 c005e64:	1880042e 	bgeu	r3,r2,c005e78 <alt_alarm_start+0xc0>
      {
        alarm->rollover = 1;
 c005e68:	e0fffb17 	ldw	r3,-20(fp)
 c005e6c:	00800044 	movi	r2,1
 c005e70:	18800405 	stb	r2,16(r3)
 c005e74:	00000206 	br	c005e80 <alt_alarm_start+0xc8>
      }
      else
      {
        alarm->rollover = 0;
 c005e78:	e0bffb17 	ldw	r2,-20(fp)
 c005e7c:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
 c005e80:	e0fffb17 	ldw	r3,-20(fp)
 c005e84:	00830074 	movhi	r2,3073
 c005e88:	10a3f304 	addi	r2,r2,-28724
 c005e8c:	e0bff615 	stw	r2,-40(fp)
 c005e90:	e0fff715 	stw	r3,-36(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
 c005e94:	e0fff717 	ldw	r3,-36(fp)
 c005e98:	e0bff617 	ldw	r2,-40(fp)
 c005e9c:	18800115 	stw	r2,4(r3)
  entry->next     = list->next;
 c005ea0:	e0bff617 	ldw	r2,-40(fp)
 c005ea4:	10c00017 	ldw	r3,0(r2)
 c005ea8:	e0bff717 	ldw	r2,-36(fp)
 c005eac:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
 c005eb0:	e0bff617 	ldw	r2,-40(fp)
 c005eb4:	10c00017 	ldw	r3,0(r2)
 c005eb8:	e0bff717 	ldw	r2,-36(fp)
 c005ebc:	18800115 	stw	r2,4(r3)
  list->next           = entry;
 c005ec0:	e0fff617 	ldw	r3,-40(fp)
 c005ec4:	e0bff717 	ldw	r2,-36(fp)
 c005ec8:	18800015 	stw	r2,0(r3)
 c005ecc:	e0bffa17 	ldw	r2,-24(fp)
 c005ed0:	e0bff515 	stw	r2,-44(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 c005ed4:	e0bff517 	ldw	r2,-44(fp)
 c005ed8:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
 c005edc:	e03fff15 	stw	zero,-4(fp)
 c005ee0:	00000506 	br	c005ef8 <alt_alarm_start+0x140>
    }
    else
    {
      return -EINVAL;
 c005ee4:	00bffa84 	movi	r2,-22
 c005ee8:	e0bfff15 	stw	r2,-4(fp)
 c005eec:	00000206 	br	c005ef8 <alt_alarm_start+0x140>
    }
  }
  else
  {
    return -ENOTSUP;
 c005ef0:	00bfde84 	movi	r2,-134
 c005ef4:	e0bfff15 	stw	r2,-4(fp)
 c005ef8:	e0bfff17 	ldw	r2,-4(fp)
  }
}
 c005efc:	e037883a 	mov	sp,fp
 c005f00:	df000017 	ldw	fp,0(sp)
 c005f04:	dec00104 	addi	sp,sp,4
 c005f08:	f800283a 	ret

0c005f0c <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
 c005f0c:	deffff04 	addi	sp,sp,-4
 c005f10:	df000015 	stw	fp,0(sp)
 c005f14:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
 c005f18:	e037883a 	mov	sp,fp
 c005f1c:	df000017 	ldw	fp,0(sp)
 c005f20:	dec00104 	addi	sp,sp,4
 c005f24:	f800283a 	ret

0c005f28 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
 c005f28:	defff904 	addi	sp,sp,-28
 c005f2c:	dfc00615 	stw	ra,24(sp)
 c005f30:	df000515 	stw	fp,20(sp)
 c005f34:	df000504 	addi	fp,sp,20
 c005f38:	e13ffd15 	stw	r4,-12(fp)
 c005f3c:	e17ffe15 	stw	r5,-8(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
 c005f40:	e0bffd17 	ldw	r2,-12(fp)
 c005f44:	1005003a 	cmpeq	r2,r2,zero
 c005f48:	1000041e 	bne	r2,zero,c005f5c <alt_dev_llist_insert+0x34>
 c005f4c:	e0bffd17 	ldw	r2,-12(fp)
 c005f50:	10800217 	ldw	r2,8(r2)
 c005f54:	1004c03a 	cmpne	r2,r2,zero
 c005f58:	1000071e 	bne	r2,zero,c005f78 <alt_dev_llist_insert+0x50>
  {
    ALT_ERRNO = EINVAL;
 c005f5c:	c005fdc0 	call	c005fdc <alt_get_errno>
 c005f60:	1007883a 	mov	r3,r2
 c005f64:	00800584 	movi	r2,22
 c005f68:	18800015 	stw	r2,0(r3)
    return -EINVAL;
 c005f6c:	00bffa84 	movi	r2,-22
 c005f70:	e0bfff15 	stw	r2,-4(fp)
 c005f74:	00001306 	br	c005fc4 <alt_dev_llist_insert+0x9c>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
 c005f78:	e0fffd17 	ldw	r3,-12(fp)
 c005f7c:	e0bffe17 	ldw	r2,-8(fp)
 c005f80:	e0bffb15 	stw	r2,-20(fp)
 c005f84:	e0fffc15 	stw	r3,-16(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
 c005f88:	e0fffc17 	ldw	r3,-16(fp)
 c005f8c:	e0bffb17 	ldw	r2,-20(fp)
 c005f90:	18800115 	stw	r2,4(r3)
  entry->next     = list->next;
 c005f94:	e0bffb17 	ldw	r2,-20(fp)
 c005f98:	10c00017 	ldw	r3,0(r2)
 c005f9c:	e0bffc17 	ldw	r2,-16(fp)
 c005fa0:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
 c005fa4:	e0bffb17 	ldw	r2,-20(fp)
 c005fa8:	10c00017 	ldw	r3,0(r2)
 c005fac:	e0bffc17 	ldw	r2,-16(fp)
 c005fb0:	18800115 	stw	r2,4(r3)
  list->next           = entry;
 c005fb4:	e0fffb17 	ldw	r3,-20(fp)
 c005fb8:	e0bffc17 	ldw	r2,-16(fp)
 c005fbc:	18800015 	stw	r2,0(r3)

  return 0;  
 c005fc0:	e03fff15 	stw	zero,-4(fp)
 c005fc4:	e0bfff17 	ldw	r2,-4(fp)
}
 c005fc8:	e037883a 	mov	sp,fp
 c005fcc:	dfc00117 	ldw	ra,4(sp)
 c005fd0:	df000017 	ldw	fp,0(sp)
 c005fd4:	dec00204 	addi	sp,sp,8
 c005fd8:	f800283a 	ret

0c005fdc <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 c005fdc:	defffd04 	addi	sp,sp,-12
 c005fe0:	dfc00215 	stw	ra,8(sp)
 c005fe4:	df000115 	stw	fp,4(sp)
 c005fe8:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
 c005fec:	00830074 	movhi	r2,3073
 c005ff0:	10a3ee04 	addi	r2,r2,-28744
 c005ff4:	10800017 	ldw	r2,0(r2)
 c005ff8:	1005003a 	cmpeq	r2,r2,zero
 c005ffc:	1000061e 	bne	r2,zero,c006018 <alt_get_errno+0x3c>
 c006000:	00830074 	movhi	r2,3073
 c006004:	10a3ee04 	addi	r2,r2,-28744
 c006008:	10800017 	ldw	r2,0(r2)
 c00600c:	103ee83a 	callr	r2
 c006010:	e0bfff15 	stw	r2,-4(fp)
 c006014:	00000306 	br	c006024 <alt_get_errno+0x48>
 c006018:	00830074 	movhi	r2,3073
 c00601c:	10aaef04 	addi	r2,r2,-21572
 c006020:	e0bfff15 	stw	r2,-4(fp)
 c006024:	e0bfff17 	ldw	r2,-4(fp)
}
 c006028:	e037883a 	mov	sp,fp
 c00602c:	dfc00117 	ldw	ra,4(sp)
 c006030:	df000017 	ldw	fp,0(sp)
 c006034:	dec00204 	addi	sp,sp,8
 c006038:	f800283a 	ret

0c00603c <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
 c00603c:	defffd04 	addi	sp,sp,-12
 c006040:	dfc00215 	stw	ra,8(sp)
 c006044:	df000115 	stw	fp,4(sp)
 c006048:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
 c00604c:	00bfff04 	movi	r2,-4
 c006050:	00c30034 	movhi	r3,3072
 c006054:	18dcdf04 	addi	r3,r3,29564
 c006058:	1885883a 	add	r2,r3,r2
 c00605c:	e0bfff15 	stw	r2,-4(fp)
 c006060:	00000606 	br	c00607c <_do_ctors+0x40>
        (*ctor) (); 
 c006064:	e0bfff17 	ldw	r2,-4(fp)
 c006068:	10800017 	ldw	r2,0(r2)
 c00606c:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
 c006070:	e0bfff17 	ldw	r2,-4(fp)
 c006074:	10bfff04 	addi	r2,r2,-4
 c006078:	e0bfff15 	stw	r2,-4(fp)
 c00607c:	e0ffff17 	ldw	r3,-4(fp)
 c006080:	00830034 	movhi	r2,3072
 c006084:	109cde04 	addi	r2,r2,29560
 c006088:	18bff62e 	bgeu	r3,r2,c006064 <_do_ctors+0x28>
        (*ctor) (); 
}
 c00608c:	e037883a 	mov	sp,fp
 c006090:	dfc00117 	ldw	ra,4(sp)
 c006094:	df000017 	ldw	fp,0(sp)
 c006098:	dec00204 	addi	sp,sp,8
 c00609c:	f800283a 	ret

0c0060a0 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
 c0060a0:	defffd04 	addi	sp,sp,-12
 c0060a4:	dfc00215 	stw	ra,8(sp)
 c0060a8:	df000115 	stw	fp,4(sp)
 c0060ac:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
 c0060b0:	00bfff04 	movi	r2,-4
 c0060b4:	00c30034 	movhi	r3,3072
 c0060b8:	18dcdf04 	addi	r3,r3,29564
 c0060bc:	1885883a 	add	r2,r3,r2
 c0060c0:	e0bfff15 	stw	r2,-4(fp)
 c0060c4:	00000606 	br	c0060e0 <_do_dtors+0x40>
        (*dtor) (); 
 c0060c8:	e0bfff17 	ldw	r2,-4(fp)
 c0060cc:	10800017 	ldw	r2,0(r2)
 c0060d0:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
 c0060d4:	e0bfff17 	ldw	r2,-4(fp)
 c0060d8:	10bfff04 	addi	r2,r2,-4
 c0060dc:	e0bfff15 	stw	r2,-4(fp)
 c0060e0:	e0ffff17 	ldw	r3,-4(fp)
 c0060e4:	00830034 	movhi	r2,3072
 c0060e8:	109cdf04 	addi	r2,r2,29564
 c0060ec:	18bff62e 	bgeu	r3,r2,c0060c8 <_do_dtors+0x28>
        (*dtor) (); 
}
 c0060f0:	e037883a 	mov	sp,fp
 c0060f4:	dfc00117 	ldw	ra,4(sp)
 c0060f8:	df000017 	ldw	fp,0(sp)
 c0060fc:	dec00204 	addi	sp,sp,8
 c006100:	f800283a 	ret

0c006104 <alt_flash_open_dev>:
#include "priv/alt_file.h"

ALT_LLIST_HEAD(alt_flash_dev_list);

alt_flash_fd* alt_flash_open_dev(const char* name)
{
 c006104:	defffb04 	addi	sp,sp,-20
 c006108:	dfc00415 	stw	ra,16(sp)
 c00610c:	df000315 	stw	fp,12(sp)
 c006110:	df000304 	addi	fp,sp,12
 c006114:	e13ffe15 	stw	r4,-8(fp)
  alt_flash_dev* dev = (alt_flash_dev*)alt_find_dev(name, &alt_flash_dev_list);
 c006118:	e13ffe17 	ldw	r4,-8(fp)
 c00611c:	d1600b04 	addi	r5,gp,-32724
 c006120:	c006cec0 	call	c006cec <alt_find_dev>
 c006124:	e0bffd15 	stw	r2,-12(fp)

  if ((dev) && dev->open)
 c006128:	e0bffd17 	ldw	r2,-12(fp)
 c00612c:	1005003a 	cmpeq	r2,r2,zero
 c006130:	10000b1e 	bne	r2,zero,c006160 <alt_flash_open_dev+0x5c>
 c006134:	e0bffd17 	ldw	r2,-12(fp)
 c006138:	10800317 	ldw	r2,12(r2)
 c00613c:	1005003a 	cmpeq	r2,r2,zero
 c006140:	1000071e 	bne	r2,zero,c006160 <alt_flash_open_dev+0x5c>
  {
    return dev->open(dev, name);
 c006144:	e0bffd17 	ldw	r2,-12(fp)
 c006148:	10800317 	ldw	r2,12(r2)
 c00614c:	e13ffd17 	ldw	r4,-12(fp)
 c006150:	e17ffe17 	ldw	r5,-8(fp)
 c006154:	103ee83a 	callr	r2
 c006158:	e0bfff15 	stw	r2,-4(fp)
 c00615c:	00000206 	br	c006168 <alt_flash_open_dev+0x64>
  }

  return dev;
 c006160:	e0bffd17 	ldw	r2,-12(fp)
 c006164:	e0bfff15 	stw	r2,-4(fp)
 c006168:	e0bfff17 	ldw	r2,-4(fp)
}
 c00616c:	e037883a 	mov	sp,fp
 c006170:	dfc00117 	ldw	ra,4(sp)
 c006174:	df000017 	ldw	fp,0(sp)
 c006178:	dec00204 	addi	sp,sp,8
 c00617c:	f800283a 	ret

0c006180 <alt_flash_close_dev>:

void alt_flash_close_dev(alt_flash_fd* fd)
{
 c006180:	defffd04 	addi	sp,sp,-12
 c006184:	dfc00215 	stw	ra,8(sp)
 c006188:	df000115 	stw	fp,4(sp)
 c00618c:	df000104 	addi	fp,sp,4
 c006190:	e13fff15 	stw	r4,-4(fp)
  if (fd && fd->close)
 c006194:	e0bfff17 	ldw	r2,-4(fp)
 c006198:	1005003a 	cmpeq	r2,r2,zero
 c00619c:	1000081e 	bne	r2,zero,c0061c0 <alt_flash_close_dev+0x40>
 c0061a0:	e0bfff17 	ldw	r2,-4(fp)
 c0061a4:	10800417 	ldw	r2,16(r2)
 c0061a8:	1005003a 	cmpeq	r2,r2,zero
 c0061ac:	1000041e 	bne	r2,zero,c0061c0 <alt_flash_close_dev+0x40>
  {
    fd->close(fd);
 c0061b0:	e0bfff17 	ldw	r2,-4(fp)
 c0061b4:	10800417 	ldw	r2,16(r2)
 c0061b8:	e13fff17 	ldw	r4,-4(fp)
 c0061bc:	103ee83a 	callr	r2
  }
  return;
}
 c0061c0:	e037883a 	mov	sp,fp
 c0061c4:	dfc00117 	ldw	ra,4(sp)
 c0061c8:	df000017 	ldw	fp,0(sp)
 c0061cc:	dec00204 	addi	sp,sp,8
 c0061d0:	f800283a 	ret

0c0061d4 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
 c0061d4:	deffff04 	addi	sp,sp,-4
 c0061d8:	df000015 	stw	fp,0(sp)
 c0061dc:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
#endif
}
 c0061e0:	e037883a 	mov	sp,fp
 c0061e4:	df000017 	ldw	fp,0(sp)
 c0061e8:	dec00104 	addi	sp,sp,4
 c0061ec:	f800283a 	ret

0c0061f0 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
 c0061f0:	defff904 	addi	sp,sp,-28
 c0061f4:	dfc00615 	stw	ra,24(sp)
 c0061f8:	df000515 	stw	fp,20(sp)
 c0061fc:	df000504 	addi	fp,sp,20
 c006200:	e13ffc15 	stw	r4,-16(fp)
 c006204:	e17ffd15 	stw	r5,-12(fp)
 c006208:	e1bffe15 	stw	r6,-8(fp)
 c00620c:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
 c006210:	e0800217 	ldw	r2,8(fp)
 c006214:	d8800015 	stw	r2,0(sp)
 c006218:	e13ffc17 	ldw	r4,-16(fp)
 c00621c:	e17ffd17 	ldw	r5,-12(fp)
 c006220:	e1bffe17 	ldw	r6,-8(fp)
 c006224:	e1ffff17 	ldw	r7,-4(fp)
 c006228:	c0063c40 	call	c0063c4 <alt_iic_isr_register>
}  
 c00622c:	e037883a 	mov	sp,fp
 c006230:	dfc00117 	ldw	ra,4(sp)
 c006234:	df000017 	ldw	fp,0(sp)
 c006238:	dec00204 	addi	sp,sp,8
 c00623c:	f800283a 	ret

0c006240 <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
 c006240:	defff904 	addi	sp,sp,-28
 c006244:	df000615 	stw	fp,24(sp)
 c006248:	df000604 	addi	fp,sp,24
 c00624c:	e13ffe15 	stw	r4,-8(fp)
 c006250:	e17fff15 	stw	r5,-4(fp)
 c006254:	e0bfff17 	ldw	r2,-4(fp)
 c006258:	e0bffc15 	stw	r2,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 c00625c:	0005303a 	rdctl	r2,status
 c006260:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 c006264:	e0fffb17 	ldw	r3,-20(fp)
 c006268:	00bfff84 	movi	r2,-2
 c00626c:	1884703a 	and	r2,r3,r2
 c006270:	1001703a 	wrctl	status,r2
  
  return context;
 c006274:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
 c006278:	e0bffd15 	stw	r2,-12(fp)

  alt_irq_active |= (1 << id);
 c00627c:	e0fffc17 	ldw	r3,-16(fp)
 c006280:	00800044 	movi	r2,1
 c006284:	10c4983a 	sll	r2,r2,r3
 c006288:	1007883a 	mov	r3,r2
 c00628c:	00830074 	movhi	r2,3073
 c006290:	10aaf304 	addi	r2,r2,-21556
 c006294:	10800017 	ldw	r2,0(r2)
 c006298:	1886b03a 	or	r3,r3,r2
 c00629c:	00830074 	movhi	r2,3073
 c0062a0:	10aaf304 	addi	r2,r2,-21556
 c0062a4:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
 c0062a8:	00830074 	movhi	r2,3073
 c0062ac:	10aaf304 	addi	r2,r2,-21556
 c0062b0:	10800017 	ldw	r2,0(r2)
 c0062b4:	100170fa 	wrctl	ienable,r2
 c0062b8:	e0bffd17 	ldw	r2,-12(fp)
 c0062bc:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 c0062c0:	e0bffa17 	ldw	r2,-24(fp)
 c0062c4:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
 c0062c8:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
}
 c0062cc:	e037883a 	mov	sp,fp
 c0062d0:	df000017 	ldw	fp,0(sp)
 c0062d4:	dec00104 	addi	sp,sp,4
 c0062d8:	f800283a 	ret

0c0062dc <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
 c0062dc:	defff904 	addi	sp,sp,-28
 c0062e0:	df000615 	stw	fp,24(sp)
 c0062e4:	df000604 	addi	fp,sp,24
 c0062e8:	e13ffe15 	stw	r4,-8(fp)
 c0062ec:	e17fff15 	stw	r5,-4(fp)
 c0062f0:	e0bfff17 	ldw	r2,-4(fp)
 c0062f4:	e0bffc15 	stw	r2,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 c0062f8:	0005303a 	rdctl	r2,status
 c0062fc:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 c006300:	e0fffb17 	ldw	r3,-20(fp)
 c006304:	00bfff84 	movi	r2,-2
 c006308:	1884703a 	and	r2,r3,r2
 c00630c:	1001703a 	wrctl	status,r2
  
  return context;
 c006310:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
 c006314:	e0bffd15 	stw	r2,-12(fp)

  alt_irq_active &= ~(1 << id);
 c006318:	e0fffc17 	ldw	r3,-16(fp)
 c00631c:	00800044 	movi	r2,1
 c006320:	10c4983a 	sll	r2,r2,r3
 c006324:	0084303a 	nor	r2,zero,r2
 c006328:	1007883a 	mov	r3,r2
 c00632c:	00830074 	movhi	r2,3073
 c006330:	10aaf304 	addi	r2,r2,-21556
 c006334:	10800017 	ldw	r2,0(r2)
 c006338:	1886703a 	and	r3,r3,r2
 c00633c:	00830074 	movhi	r2,3073
 c006340:	10aaf304 	addi	r2,r2,-21556
 c006344:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
 c006348:	00830074 	movhi	r2,3073
 c00634c:	10aaf304 	addi	r2,r2,-21556
 c006350:	10800017 	ldw	r2,0(r2)
 c006354:	100170fa 	wrctl	ienable,r2
 c006358:	e0bffd17 	ldw	r2,-12(fp)
 c00635c:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 c006360:	e0bffa17 	ldw	r2,-24(fp)
 c006364:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
 c006368:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
}
 c00636c:	e037883a 	mov	sp,fp
 c006370:	df000017 	ldw	fp,0(sp)
 c006374:	dec00104 	addi	sp,sp,4
 c006378:	f800283a 	ret

0c00637c <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
 c00637c:	defffc04 	addi	sp,sp,-16
 c006380:	df000315 	stw	fp,12(sp)
 c006384:	df000304 	addi	fp,sp,12
 c006388:	e13ffe15 	stw	r4,-8(fp)
 c00638c:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
 c006390:	000530fa 	rdctl	r2,ienable
 c006394:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
 c006398:	e0ffff17 	ldw	r3,-4(fp)
 c00639c:	00800044 	movi	r2,1
 c0063a0:	10c4983a 	sll	r2,r2,r3
 c0063a4:	1007883a 	mov	r3,r2
 c0063a8:	e0bffd17 	ldw	r2,-12(fp)
 c0063ac:	1884703a 	and	r2,r3,r2
 c0063b0:	1004c03a 	cmpne	r2,r2,zero
}
 c0063b4:	e037883a 	mov	sp,fp
 c0063b8:	df000017 	ldw	fp,0(sp)
 c0063bc:	dec00104 	addi	sp,sp,4
 c0063c0:	f800283a 	ret

0c0063c4 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
 c0063c4:	defff404 	addi	sp,sp,-48
 c0063c8:	dfc00b15 	stw	ra,44(sp)
 c0063cc:	df000a15 	stw	fp,40(sp)
 c0063d0:	df000a04 	addi	fp,sp,40
 c0063d4:	e13ffb15 	stw	r4,-20(fp)
 c0063d8:	e17ffc15 	stw	r5,-16(fp)
 c0063dc:	e1bffd15 	stw	r6,-12(fp)
 c0063e0:	e1fffe15 	stw	r7,-8(fp)
  int rc = -EINVAL;  
 c0063e4:	00bffa84 	movi	r2,-22
 c0063e8:	e0bffa15 	stw	r2,-24(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
 c0063ec:	e0bffc17 	ldw	r2,-16(fp)
 c0063f0:	e0bff915 	stw	r2,-28(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
 c0063f4:	e0bff917 	ldw	r2,-28(fp)
 c0063f8:	10800808 	cmpgei	r2,r2,32
 c0063fc:	1000291e 	bne	r2,zero,c0064a4 <alt_iic_isr_register+0xe0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 c006400:	0005303a 	rdctl	r2,status
 c006404:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 c006408:	e0fff717 	ldw	r3,-36(fp)
 c00640c:	00bfff84 	movi	r2,-2
 c006410:	1884703a 	and	r2,r3,r2
 c006414:	1001703a 	wrctl	status,r2
  
  return context;
 c006418:	e0bff717 	ldw	r2,-36(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
 c00641c:	e0bff815 	stw	r2,-32(fp)

    alt_irq[id].handler = isr;
 c006420:	e0bff917 	ldw	r2,-28(fp)
 c006424:	00c30074 	movhi	r3,3073
 c006428:	18eb0004 	addi	r3,r3,-21504
 c00642c:	100490fa 	slli	r2,r2,3
 c006430:	10c7883a 	add	r3,r2,r3
 c006434:	e0bffd17 	ldw	r2,-12(fp)
 c006438:	18800015 	stw	r2,0(r3)
    alt_irq[id].context = isr_context;
 c00643c:	e0bff917 	ldw	r2,-28(fp)
 c006440:	00c30074 	movhi	r3,3073
 c006444:	18eb0004 	addi	r3,r3,-21504
 c006448:	100490fa 	slli	r2,r2,3
 c00644c:	10c5883a 	add	r2,r2,r3
 c006450:	10c00104 	addi	r3,r2,4
 c006454:	e0bffe17 	ldw	r2,-8(fp)
 c006458:	18800015 	stw	r2,0(r3)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
 c00645c:	e0bffd17 	ldw	r2,-12(fp)
 c006460:	1005003a 	cmpeq	r2,r2,zero
 c006464:	1000051e 	bne	r2,zero,c00647c <alt_iic_isr_register+0xb8>
 c006468:	e17ff917 	ldw	r5,-28(fp)
 c00646c:	e13ffb17 	ldw	r4,-20(fp)
 c006470:	c0062400 	call	c006240 <alt_ic_irq_enable>
 c006474:	e0bfff15 	stw	r2,-4(fp)
 c006478:	00000406 	br	c00648c <alt_iic_isr_register+0xc8>
 c00647c:	e17ff917 	ldw	r5,-28(fp)
 c006480:	e13ffb17 	ldw	r4,-20(fp)
 c006484:	c0062dc0 	call	c0062dc <alt_ic_irq_disable>
 c006488:	e0bfff15 	stw	r2,-4(fp)
 c00648c:	e0bfff17 	ldw	r2,-4(fp)
 c006490:	e0bffa15 	stw	r2,-24(fp)
 c006494:	e0bff817 	ldw	r2,-32(fp)
 c006498:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 c00649c:	e0bff617 	ldw	r2,-40(fp)
 c0064a0:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
 c0064a4:	e0bffa17 	ldw	r2,-24(fp)
}
 c0064a8:	e037883a 	mov	sp,fp
 c0064ac:	dfc00117 	ldw	ra,4(sp)
 c0064b0:	df000017 	ldw	fp,0(sp)
 c0064b4:	dec00204 	addi	sp,sp,8
 c0064b8:	f800283a 	ret

0c0064bc <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
 c0064bc:	defff804 	addi	sp,sp,-32
 c0064c0:	dfc00715 	stw	ra,28(sp)
 c0064c4:	df000615 	stw	fp,24(sp)
 c0064c8:	dc000515 	stw	r16,20(sp)
 c0064cc:	df000504 	addi	fp,sp,20
 c0064d0:	e13ffc15 	stw	r4,-16(fp)
 c0064d4:	e17ffd15 	stw	r5,-12(fp)
 c0064d8:	e1bffe15 	stw	r6,-8(fp)
 c0064dc:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
 c0064e0:	e13ffd17 	ldw	r4,-12(fp)
 c0064e4:	e17ffe17 	ldw	r5,-8(fp)
 c0064e8:	e1bfff17 	ldw	r6,-4(fp)
 c0064ec:	c0067040 	call	c006704 <open>
 c0064f0:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
 c0064f4:	e0bffb17 	ldw	r2,-20(fp)
 c0064f8:	1004803a 	cmplt	r2,r2,zero
 c0064fc:	10001f1e 	bne	r2,zero,c00657c <alt_open_fd+0xc0>
  {
    fd->dev      = alt_fd_list[old].dev;
 c006500:	e13ffb17 	ldw	r4,-20(fp)
 c006504:	04030034 	movhi	r16,3072
 c006508:	841f0a04 	addi	r16,r16,31784
 c00650c:	01400304 	movi	r5,12
 c006510:	c002b680 	call	c002b68 <__mulsi3>
 c006514:	1405883a 	add	r2,r2,r16
 c006518:	10c00017 	ldw	r3,0(r2)
 c00651c:	e0bffc17 	ldw	r2,-16(fp)
 c006520:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
 c006524:	e13ffb17 	ldw	r4,-20(fp)
 c006528:	04030034 	movhi	r16,3072
 c00652c:	841f0a04 	addi	r16,r16,31784
 c006530:	01400304 	movi	r5,12
 c006534:	c002b680 	call	c002b68 <__mulsi3>
 c006538:	1405883a 	add	r2,r2,r16
 c00653c:	10800104 	addi	r2,r2,4
 c006540:	10c00017 	ldw	r3,0(r2)
 c006544:	e0bffc17 	ldw	r2,-16(fp)
 c006548:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
 c00654c:	e13ffb17 	ldw	r4,-20(fp)
 c006550:	04030034 	movhi	r16,3072
 c006554:	841f0a04 	addi	r16,r16,31784
 c006558:	01400304 	movi	r5,12
 c00655c:	c002b680 	call	c002b68 <__mulsi3>
 c006560:	1405883a 	add	r2,r2,r16
 c006564:	10800204 	addi	r2,r2,8
 c006568:	10c00017 	ldw	r3,0(r2)
 c00656c:	e0bffc17 	ldw	r2,-16(fp)
 c006570:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
 c006574:	e13ffb17 	ldw	r4,-20(fp)
 c006578:	c0033f80 	call	c0033f8 <alt_release_fd>
  }
} 
 c00657c:	e037883a 	mov	sp,fp
 c006580:	dfc00217 	ldw	ra,8(sp)
 c006584:	df000117 	ldw	fp,4(sp)
 c006588:	dc000017 	ldw	r16,0(sp)
 c00658c:	dec00304 	addi	sp,sp,12
 c006590:	f800283a 	ret

0c006594 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
 c006594:	defffb04 	addi	sp,sp,-20
 c006598:	dfc00415 	stw	ra,16(sp)
 c00659c:	df000315 	stw	fp,12(sp)
 c0065a0:	df000304 	addi	fp,sp,12
 c0065a4:	e13ffd15 	stw	r4,-12(fp)
 c0065a8:	e17ffe15 	stw	r5,-8(fp)
 c0065ac:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
 c0065b0:	01030034 	movhi	r4,3072
 c0065b4:	211f0d04 	addi	r4,r4,31796
 c0065b8:	e17ffd17 	ldw	r5,-12(fp)
 c0065bc:	01800044 	movi	r6,1
 c0065c0:	01c07fc4 	movi	r7,511
 c0065c4:	c0064bc0 	call	c0064bc <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
 c0065c8:	01030034 	movhi	r4,3072
 c0065cc:	211f0a04 	addi	r4,r4,31784
 c0065d0:	e17ffe17 	ldw	r5,-8(fp)
 c0065d4:	000d883a 	mov	r6,zero
 c0065d8:	01c07fc4 	movi	r7,511
 c0065dc:	c0064bc0 	call	c0064bc <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
 c0065e0:	01030034 	movhi	r4,3072
 c0065e4:	211f1004 	addi	r4,r4,31808
 c0065e8:	e17fff17 	ldw	r5,-4(fp)
 c0065ec:	01800044 	movi	r6,1
 c0065f0:	01c07fc4 	movi	r7,511
 c0065f4:	c0064bc0 	call	c0064bc <alt_open_fd>
}  
 c0065f8:	e037883a 	mov	sp,fp
 c0065fc:	dfc00117 	ldw	ra,4(sp)
 c006600:	df000017 	ldw	fp,0(sp)
 c006604:	dec00204 	addi	sp,sp,8
 c006608:	f800283a 	ret

0c00660c <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
 c00660c:	defffa04 	addi	sp,sp,-24
 c006610:	dfc00515 	stw	ra,20(sp)
 c006614:	df000415 	stw	fp,16(sp)
 c006618:	dc000315 	stw	r16,12(sp)
 c00661c:	df000304 	addi	fp,sp,12
 c006620:	e13ffe15 	stw	r4,-8(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
 c006624:	e0bffe17 	ldw	r2,-8(fp)
 c006628:	10800217 	ldw	r2,8(r2)
 c00662c:	10d00034 	orhi	r3,r2,16384
 c006630:	e0bffe17 	ldw	r2,-8(fp)
 c006634:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
 c006638:	e03ffd15 	stw	zero,-12(fp)
 c00663c:	00002306 	br	c0066cc <alt_file_locked+0xc0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
 c006640:	e13ffd17 	ldw	r4,-12(fp)
 c006644:	04030034 	movhi	r16,3072
 c006648:	841f0a04 	addi	r16,r16,31784
 c00664c:	01400304 	movi	r5,12
 c006650:	c002b680 	call	c002b68 <__mulsi3>
 c006654:	1405883a 	add	r2,r2,r16
 c006658:	10c00017 	ldw	r3,0(r2)
 c00665c:	e0bffe17 	ldw	r2,-8(fp)
 c006660:	10800017 	ldw	r2,0(r2)
 c006664:	1880161e 	bne	r3,r2,c0066c0 <alt_file_locked+0xb4>
 c006668:	e13ffd17 	ldw	r4,-12(fp)
 c00666c:	04030034 	movhi	r16,3072
 c006670:	841f0a04 	addi	r16,r16,31784
 c006674:	01400304 	movi	r5,12
 c006678:	c002b680 	call	c002b68 <__mulsi3>
 c00667c:	1405883a 	add	r2,r2,r16
 c006680:	10800204 	addi	r2,r2,8
 c006684:	10800017 	ldw	r2,0(r2)
 c006688:	1004403a 	cmpge	r2,r2,zero
 c00668c:	10000c1e 	bne	r2,zero,c0066c0 <alt_file_locked+0xb4>
 c006690:	e13ffd17 	ldw	r4,-12(fp)
 c006694:	01400304 	movi	r5,12
 c006698:	c002b680 	call	c002b68 <__mulsi3>
 c00669c:	1007883a 	mov	r3,r2
 c0066a0:	00830034 	movhi	r2,3072
 c0066a4:	109f0a04 	addi	r2,r2,31784
 c0066a8:	1887883a 	add	r3,r3,r2
 c0066ac:	e0bffe17 	ldw	r2,-8(fp)
 c0066b0:	18800326 	beq	r3,r2,c0066c0 <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
 c0066b4:	00bffcc4 	movi	r2,-13
 c0066b8:	e0bfff15 	stw	r2,-4(fp)
 c0066bc:	00000a06 	br	c0066e8 <alt_file_locked+0xdc>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
 c0066c0:	e0bffd17 	ldw	r2,-12(fp)
 c0066c4:	10800044 	addi	r2,r2,1
 c0066c8:	e0bffd15 	stw	r2,-12(fp)
 c0066cc:	00830074 	movhi	r2,3073
 c0066d0:	10a3ed04 	addi	r2,r2,-28748
 c0066d4:	10800017 	ldw	r2,0(r2)
 c0066d8:	1007883a 	mov	r3,r2
 c0066dc:	e0bffd17 	ldw	r2,-12(fp)
 c0066e0:	18bfd72e 	bgeu	r3,r2,c006640 <alt_file_locked+0x34>
    }
  }
  
  /* The device is not locked */
 
  return 0;
 c0066e4:	e03fff15 	stw	zero,-4(fp)
 c0066e8:	e0bfff17 	ldw	r2,-4(fp)
}
 c0066ec:	e037883a 	mov	sp,fp
 c0066f0:	dfc00217 	ldw	ra,8(sp)
 c0066f4:	df000117 	ldw	fp,4(sp)
 c0066f8:	dc000017 	ldw	r16,0(sp)
 c0066fc:	dec00304 	addi	sp,sp,12
 c006700:	f800283a 	ret

0c006704 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
 c006704:	defff404 	addi	sp,sp,-48
 c006708:	dfc00b15 	stw	ra,44(sp)
 c00670c:	df000a15 	stw	fp,40(sp)
 c006710:	df000a04 	addi	fp,sp,40
 c006714:	e13ffb15 	stw	r4,-20(fp)
 c006718:	e17ffc15 	stw	r5,-16(fp)
 c00671c:	e1bffd15 	stw	r6,-12(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
 c006720:	00bfffc4 	movi	r2,-1
 c006724:	e0bff815 	stw	r2,-32(fp)
  int status = -ENODEV;
 c006728:	00bffb44 	movi	r2,-19
 c00672c:	e0bff715 	stw	r2,-36(fp)
  int isafs = 0;
 c006730:	e03ff615 	stw	zero,-40(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
 c006734:	e13ffb17 	ldw	r4,-20(fp)
 c006738:	01430074 	movhi	r5,3073
 c00673c:	2963eb04 	addi	r5,r5,-28756
 c006740:	c006cec0 	call	c006cec <alt_find_dev>
 c006744:	e0bffa15 	stw	r2,-24(fp)
 c006748:	e0bffa17 	ldw	r2,-24(fp)
 c00674c:	1004c03a 	cmpne	r2,r2,zero
 c006750:	1000051e 	bne	r2,zero,c006768 <open+0x64>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
 c006754:	e13ffb17 	ldw	r4,-20(fp)
 c006758:	c006d800 	call	c006d80 <alt_find_file>
 c00675c:	e0bffa15 	stw	r2,-24(fp)
    isafs = 1;
 c006760:	00800044 	movi	r2,1
 c006764:	e0bff615 	stw	r2,-40(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
 c006768:	e0bffa17 	ldw	r2,-24(fp)
 c00676c:	1005003a 	cmpeq	r2,r2,zero
 c006770:	1000311e 	bne	r2,zero,c006838 <open+0x134>
  {
    if ((index = alt_get_fd (dev)) < 0)
 c006774:	e13ffa17 	ldw	r4,-24(fp)
 c006778:	c006ea00 	call	c006ea0 <alt_get_fd>
 c00677c:	e0bff815 	stw	r2,-32(fp)
 c006780:	e0bff817 	ldw	r2,-32(fp)
 c006784:	1004403a 	cmpge	r2,r2,zero
 c006788:	1000031e 	bne	r2,zero,c006798 <open+0x94>
    {
      status = index;
 c00678c:	e0bff817 	ldw	r2,-32(fp)
 c006790:	e0bff715 	stw	r2,-36(fp)
 c006794:	00002a06 	br	c006840 <open+0x13c>
    }
    else
    {
      fd = &alt_fd_list[index];
 c006798:	e13ff817 	ldw	r4,-32(fp)
 c00679c:	01400304 	movi	r5,12
 c0067a0:	c002b680 	call	c002b68 <__mulsi3>
 c0067a4:	1007883a 	mov	r3,r2
 c0067a8:	00830034 	movhi	r2,3072
 c0067ac:	109f0a04 	addi	r2,r2,31784
 c0067b0:	1885883a 	add	r2,r3,r2
 c0067b4:	e0bff915 	stw	r2,-28(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
 c0067b8:	e0fffc17 	ldw	r3,-16(fp)
 c0067bc:	00900034 	movhi	r2,16384
 c0067c0:	10bfffc4 	addi	r2,r2,-1
 c0067c4:	1886703a 	and	r3,r3,r2
 c0067c8:	e0bff917 	ldw	r2,-28(fp)
 c0067cc:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
 c0067d0:	e0bff617 	ldw	r2,-40(fp)
 c0067d4:	1004c03a 	cmpne	r2,r2,zero
 c0067d8:	1000061e 	bne	r2,zero,c0067f4 <open+0xf0>
 c0067dc:	e13ff917 	ldw	r4,-28(fp)
 c0067e0:	c00660c0 	call	c00660c <alt_file_locked>
 c0067e4:	e0bff715 	stw	r2,-36(fp)
 c0067e8:	e0bff717 	ldw	r2,-36(fp)
 c0067ec:	1004803a 	cmplt	r2,r2,zero
 c0067f0:	1000131e 	bne	r2,zero,c006840 <open+0x13c>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
 c0067f4:	e0bffa17 	ldw	r2,-24(fp)
 c0067f8:	10800317 	ldw	r2,12(r2)
 c0067fc:	1005003a 	cmpeq	r2,r2,zero
 c006800:	1000091e 	bne	r2,zero,c006828 <open+0x124>
 c006804:	e0bffa17 	ldw	r2,-24(fp)
 c006808:	10800317 	ldw	r2,12(r2)
 c00680c:	e13ff917 	ldw	r4,-28(fp)
 c006810:	e17ffb17 	ldw	r5,-20(fp)
 c006814:	e1bffc17 	ldw	r6,-16(fp)
 c006818:	e1fffd17 	ldw	r7,-12(fp)
 c00681c:	103ee83a 	callr	r2
 c006820:	e0bfff15 	stw	r2,-4(fp)
 c006824:	00000106 	br	c00682c <open+0x128>
 c006828:	e03fff15 	stw	zero,-4(fp)
 c00682c:	e0bfff17 	ldw	r2,-4(fp)
 c006830:	e0bff715 	stw	r2,-36(fp)
 c006834:	00000206 	br	c006840 <open+0x13c>
      }
    }
  }
  else
  {
    status = -ENODEV;
 c006838:	00bffb44 	movi	r2,-19
 c00683c:	e0bff715 	stw	r2,-36(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
 c006840:	e0bff717 	ldw	r2,-36(fp)
 c006844:	1004403a 	cmpge	r2,r2,zero
 c006848:	1000091e 	bne	r2,zero,c006870 <open+0x16c>
  {
    alt_release_fd (index);  
 c00684c:	e13ff817 	ldw	r4,-32(fp)
 c006850:	c0033f80 	call	c0033f8 <alt_release_fd>
    ALT_ERRNO = -status;
 c006854:	c0068900 	call	c006890 <alt_get_errno>
 c006858:	e0fff717 	ldw	r3,-36(fp)
 c00685c:	00c7c83a 	sub	r3,zero,r3
 c006860:	10c00015 	stw	r3,0(r2)
    return -1;
 c006864:	00bfffc4 	movi	r2,-1
 c006868:	e0bffe15 	stw	r2,-8(fp)
 c00686c:	00000206 	br	c006878 <open+0x174>
  }
  
  /* return the reference upon success */

  return index;
 c006870:	e0bff817 	ldw	r2,-32(fp)
 c006874:	e0bffe15 	stw	r2,-8(fp)
 c006878:	e0bffe17 	ldw	r2,-8(fp)
}
 c00687c:	e037883a 	mov	sp,fp
 c006880:	dfc00117 	ldw	ra,4(sp)
 c006884:	df000017 	ldw	fp,0(sp)
 c006888:	dec00204 	addi	sp,sp,8
 c00688c:	f800283a 	ret

0c006890 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 c006890:	defffd04 	addi	sp,sp,-12
 c006894:	dfc00215 	stw	ra,8(sp)
 c006898:	df000115 	stw	fp,4(sp)
 c00689c:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
 c0068a0:	00830074 	movhi	r2,3073
 c0068a4:	10a3ee04 	addi	r2,r2,-28744
 c0068a8:	10800017 	ldw	r2,0(r2)
 c0068ac:	1005003a 	cmpeq	r2,r2,zero
 c0068b0:	1000061e 	bne	r2,zero,c0068cc <alt_get_errno+0x3c>
 c0068b4:	00830074 	movhi	r2,3073
 c0068b8:	10a3ee04 	addi	r2,r2,-28744
 c0068bc:	10800017 	ldw	r2,0(r2)
 c0068c0:	103ee83a 	callr	r2
 c0068c4:	e0bfff15 	stw	r2,-4(fp)
 c0068c8:	00000306 	br	c0068d8 <alt_get_errno+0x48>
 c0068cc:	00830074 	movhi	r2,3073
 c0068d0:	10aaef04 	addi	r2,r2,-21572
 c0068d4:	e0bfff15 	stw	r2,-4(fp)
 c0068d8:	e0bfff17 	ldw	r2,-4(fp)
}
 c0068dc:	e037883a 	mov	sp,fp
 c0068e0:	dfc00117 	ldw	ra,4(sp)
 c0068e4:	df000017 	ldw	fp,0(sp)
 c0068e8:	dec00204 	addi	sp,sp,8
 c0068ec:	f800283a 	ret

0c0068f0 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
 c0068f0:	defffa04 	addi	sp,sp,-24
 c0068f4:	df000515 	stw	fp,20(sp)
 c0068f8:	df000504 	addi	fp,sp,20
 c0068fc:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 c006900:	0005303a 	rdctl	r2,status
 c006904:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 c006908:	e0fffd17 	ldw	r3,-12(fp)
 c00690c:	00bfff84 	movi	r2,-2
 c006910:	1884703a 	and	r2,r3,r2
 c006914:	1001703a 	wrctl	status,r2
  
  return context;
 c006918:	e0bffd17 	ldw	r2,-12(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
 c00691c:	e0bffe15 	stw	r2,-8(fp)
  alt_llist_remove (&alarm->llist);
 c006920:	e0bfff17 	ldw	r2,-4(fp)
 c006924:	e0bffc15 	stw	r2,-16(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
 c006928:	e0bffc17 	ldw	r2,-16(fp)
 c00692c:	10c00017 	ldw	r3,0(r2)
 c006930:	e0bffc17 	ldw	r2,-16(fp)
 c006934:	10800117 	ldw	r2,4(r2)
 c006938:	18800115 	stw	r2,4(r3)
  entry->previous->next = entry->next;
 c00693c:	e0bffc17 	ldw	r2,-16(fp)
 c006940:	10c00117 	ldw	r3,4(r2)
 c006944:	e0bffc17 	ldw	r2,-16(fp)
 c006948:	10800017 	ldw	r2,0(r2)
 c00694c:	18800015 	stw	r2,0(r3)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
 c006950:	e0fffc17 	ldw	r3,-16(fp)
 c006954:	e0bffc17 	ldw	r2,-16(fp)
 c006958:	18800115 	stw	r2,4(r3)
  entry->next     = entry;
 c00695c:	e0fffc17 	ldw	r3,-16(fp)
 c006960:	e0bffc17 	ldw	r2,-16(fp)
 c006964:	18800015 	stw	r2,0(r3)
 c006968:	e0bffe17 	ldw	r2,-8(fp)
 c00696c:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 c006970:	e0bffb17 	ldw	r2,-20(fp)
 c006974:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
 c006978:	e037883a 	mov	sp,fp
 c00697c:	df000017 	ldw	fp,0(sp)
 c006980:	dec00104 	addi	sp,sp,4
 c006984:	f800283a 	ret

0c006988 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
 c006988:	defffb04 	addi	sp,sp,-20
 c00698c:	dfc00415 	stw	ra,16(sp)
 c006990:	df000315 	stw	fp,12(sp)
 c006994:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
 c006998:	d0a00e17 	ldw	r2,-32712(gp)
 c00699c:	e0bffe15 	stw	r2,-8(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
 c0069a0:	d0a71017 	ldw	r2,-25536(gp)
 c0069a4:	10800044 	addi	r2,r2,1
 c0069a8:	d0a71015 	stw	r2,-25536(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
 c0069ac:	00003106 	br	c006a74 <alt_tick+0xec>
  {
    next = (alt_alarm*) alarm->llist.next;
 c0069b0:	e0bffe17 	ldw	r2,-8(fp)
 c0069b4:	10800017 	ldw	r2,0(r2)
 c0069b8:	e0bfff15 	stw	r2,-4(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
 c0069bc:	e0bffe17 	ldw	r2,-8(fp)
 c0069c0:	10800403 	ldbu	r2,16(r2)
 c0069c4:	10803fcc 	andi	r2,r2,255
 c0069c8:	1005003a 	cmpeq	r2,r2,zero
 c0069cc:	1000051e 	bne	r2,zero,c0069e4 <alt_tick+0x5c>
 c0069d0:	d0a71017 	ldw	r2,-25536(gp)
 c0069d4:	1004c03a 	cmpne	r2,r2,zero
 c0069d8:	1000021e 	bne	r2,zero,c0069e4 <alt_tick+0x5c>
    {
      alarm->rollover = 0;
 c0069dc:	e0bffe17 	ldw	r2,-8(fp)
 c0069e0:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
 c0069e4:	e0bffe17 	ldw	r2,-8(fp)
 c0069e8:	10c00217 	ldw	r3,8(r2)
 c0069ec:	d0a71017 	ldw	r2,-25536(gp)
 c0069f0:	10c01e36 	bltu	r2,r3,c006a6c <alt_tick+0xe4>
 c0069f4:	e0bffe17 	ldw	r2,-8(fp)
 c0069f8:	10800403 	ldbu	r2,16(r2)
 c0069fc:	10803fcc 	andi	r2,r2,255
 c006a00:	1004c03a 	cmpne	r2,r2,zero
 c006a04:	1000191e 	bne	r2,zero,c006a6c <alt_tick+0xe4>
    {
      next_callback = alarm->callback (alarm->context);
 c006a08:	e0bffe17 	ldw	r2,-8(fp)
 c006a0c:	10c00317 	ldw	r3,12(r2)
 c006a10:	e0bffe17 	ldw	r2,-8(fp)
 c006a14:	11000517 	ldw	r4,20(r2)
 c006a18:	183ee83a 	callr	r3
 c006a1c:	e0bffd15 	stw	r2,-12(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
 c006a20:	e0bffd17 	ldw	r2,-12(fp)
 c006a24:	1004c03a 	cmpne	r2,r2,zero
 c006a28:	1000031e 	bne	r2,zero,c006a38 <alt_tick+0xb0>
      {
        alt_alarm_stop (alarm);
 c006a2c:	e13ffe17 	ldw	r4,-8(fp)
 c006a30:	c0068f00 	call	c0068f0 <alt_alarm_stop>
 c006a34:	00000d06 	br	c006a6c <alt_tick+0xe4>
      }
      else
      {
        alarm->time += next_callback;
 c006a38:	e0bffe17 	ldw	r2,-8(fp)
 c006a3c:	10c00217 	ldw	r3,8(r2)
 c006a40:	e0bffd17 	ldw	r2,-12(fp)
 c006a44:	1887883a 	add	r3,r3,r2
 c006a48:	e0bffe17 	ldw	r2,-8(fp)
 c006a4c:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
 c006a50:	e0bffe17 	ldw	r2,-8(fp)
 c006a54:	10c00217 	ldw	r3,8(r2)
 c006a58:	d0a71017 	ldw	r2,-25536(gp)
 c006a5c:	1880032e 	bgeu	r3,r2,c006a6c <alt_tick+0xe4>
        {
          alarm->rollover = 1;
 c006a60:	e0fffe17 	ldw	r3,-8(fp)
 c006a64:	00800044 	movi	r2,1
 c006a68:	18800405 	stb	r2,16(r3)
        }
      }
    }
    alarm = next;
 c006a6c:	e0bfff17 	ldw	r2,-4(fp)
 c006a70:	e0bffe15 	stw	r2,-8(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
 c006a74:	d0e00e04 	addi	r3,gp,-32712
 c006a78:	e0bffe17 	ldw	r2,-8(fp)
 c006a7c:	10ffcc1e 	bne	r2,r3,c0069b0 <alt_tick+0x28>
  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
}
 c006a80:	e037883a 	mov	sp,fp
 c006a84:	dfc00117 	ldw	ra,4(sp)
 c006a88:	df000017 	ldw	fp,0(sp)
 c006a8c:	dec00204 	addi	sp,sp,8
 c006a90:	f800283a 	ret

0c006a94 <altera_nios2_qsys_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_qsys_irq_init(void) 
{
 c006a94:	deffff04 	addi	sp,sp,-4
 c006a98:	df000015 	stw	fp,0(sp)
 c006a9c:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
 c006aa0:	000170fa 	wrctl	ienable,zero
}
 c006aa4:	e037883a 	mov	sp,fp
 c006aa8:	df000017 	ldw	fp,0(sp)
 c006aac:	dec00104 	addi	sp,sp,4
 c006ab0:	f800283a 	ret

0c006ab4 <alt_avalon_spi_command>:

int alt_avalon_spi_command(alt_u32 base, alt_u32 slave,
                           alt_u32 write_length, const alt_u8 * write_data,
                           alt_u32 read_length, alt_u8 * read_data,
                           alt_u32 flags)
{
 c006ab4:	defff404 	addi	sp,sp,-48
 c006ab8:	df000b15 	stw	fp,44(sp)
 c006abc:	df000b04 	addi	fp,sp,44
 c006ac0:	e13ffc15 	stw	r4,-16(fp)
 c006ac4:	e17ffd15 	stw	r5,-12(fp)
 c006ac8:	e1bffe15 	stw	r6,-8(fp)
 c006acc:	e1ffff15 	stw	r7,-4(fp)
  const alt_u8 * write_end = write_data + write_length;
 c006ad0:	e0fffe17 	ldw	r3,-8(fp)
 c006ad4:	e0bfff17 	ldw	r2,-4(fp)
 c006ad8:	10c5883a 	add	r2,r2,r3
 c006adc:	e0bffb15 	stw	r2,-20(fp)
  alt_u8 * read_end = read_data + read_length;
 c006ae0:	e0c00117 	ldw	r3,4(fp)
 c006ae4:	e0800217 	ldw	r2,8(fp)
 c006ae8:	10c5883a 	add	r2,r2,r3
 c006aec:	e0bffa15 	stw	r2,-24(fp)

  alt_u32 write_zeros = read_length;
 c006af0:	e0800117 	ldw	r2,4(fp)
 c006af4:	e0bff915 	stw	r2,-28(fp)
  alt_u32 read_ignore = write_length;
 c006af8:	e0bffe17 	ldw	r2,-8(fp)
 c006afc:	e0bff815 	stw	r2,-32(fp)

  /* We must not send more than two bytes to the target before it has
   * returned any as otherwise it will overflow. */
  /* Unfortunately the hardware does not seem to work with credits > 1,
   * leave it at 1 for now. */
  alt_32 credits = 1;
 c006b00:	00800044 	movi	r2,1
 c006b04:	e0bff615 	stw	r2,-40(fp)
  /* Warning: this function is not currently safe if called in a multi-threaded
   * environment, something above must perform locking to make it safe if more
   * than one thread intends to use it.
   */

  IOWR_ALTERA_AVALON_SPI_SLAVE_SEL(base, 1 << slave);
 c006b08:	e0bffc17 	ldw	r2,-16(fp)
 c006b0c:	11000504 	addi	r4,r2,20
 c006b10:	e0fffd17 	ldw	r3,-12(fp)
 c006b14:	00800044 	movi	r2,1
 c006b18:	10c6983a 	sll	r3,r2,r3
 c006b1c:	2005883a 	mov	r2,r4
 c006b20:	10c00035 	stwio	r3,0(r2)
  
  /* Set the SSO bit (force chipselect) only if the toggle flag is not set */
  if ((flags & ALT_AVALON_SPI_COMMAND_TOGGLE_SS_N) == 0) {
 c006b24:	e0800317 	ldw	r2,12(fp)
 c006b28:	1080008c 	andi	r2,r2,2
 c006b2c:	1004c03a 	cmpne	r2,r2,zero
 c006b30:	1000051e 	bne	r2,zero,c006b48 <alt_avalon_spi_command+0x94>
    IOWR_ALTERA_AVALON_SPI_CONTROL(base, ALTERA_AVALON_SPI_CONTROL_SSO_MSK);
 c006b34:	e0bffc17 	ldw	r2,-16(fp)
 c006b38:	10800304 	addi	r2,r2,12
 c006b3c:	1007883a 	mov	r3,r2
 c006b40:	00810004 	movi	r2,1024
 c006b44:	18800035 	stwio	r2,0(r3)
  /*
   * Discard any stale data present in the RXDATA register, in case
   * previous communication was interrupted and stale data was left
   * behind.
   */
  IORD_ALTERA_AVALON_SPI_RXDATA(base);
 c006b48:	e0bffc17 	ldw	r2,-16(fp)
 c006b4c:	10800037 	ldwio	r2,0(r2)
 c006b50:	00000006 	br	c006b54 <alt_avalon_spi_command+0xa0>
  for ( ; ; )
  {
    
    do
    {
      status = IORD_ALTERA_AVALON_SPI_STATUS(base);
 c006b54:	e0bffc17 	ldw	r2,-16(fp)
 c006b58:	10800204 	addi	r2,r2,8
 c006b5c:	10800037 	ldwio	r2,0(r2)
 c006b60:	e0bff715 	stw	r2,-36(fp)
    }
    while (((status & ALTERA_AVALON_SPI_STATUS_TRDY_MSK) == 0 || credits == 0) &&
            (status & ALTERA_AVALON_SPI_STATUS_RRDY_MSK) == 0);
 c006b64:	e0bff717 	ldw	r2,-36(fp)
 c006b68:	1080100c 	andi	r2,r2,64
 c006b6c:	1005003a 	cmpeq	r2,r2,zero
 c006b70:	1000031e 	bne	r2,zero,c006b80 <alt_avalon_spi_command+0xcc>
 c006b74:	e0bff617 	ldw	r2,-40(fp)
 c006b78:	1004c03a 	cmpne	r2,r2,zero
 c006b7c:	1000041e 	bne	r2,zero,c006b90 <alt_avalon_spi_command+0xdc>
 c006b80:	e0bff717 	ldw	r2,-36(fp)
 c006b84:	1080200c 	andi	r2,r2,128
 c006b88:	1005003a 	cmpeq	r2,r2,zero
 c006b8c:	103ff11e 	bne	r2,zero,c006b54 <alt_avalon_spi_command+0xa0>

    if ((status & ALTERA_AVALON_SPI_STATUS_TRDY_MSK) != 0 && credits > 0)
 c006b90:	e0bff717 	ldw	r2,-36(fp)
 c006b94:	1080100c 	andi	r2,r2,64
 c006b98:	1005003a 	cmpeq	r2,r2,zero
 c006b9c:	1000201e 	bne	r2,zero,c006c20 <alt_avalon_spi_command+0x16c>
 c006ba0:	e0bff617 	ldw	r2,-40(fp)
 c006ba4:	10800050 	cmplti	r2,r2,1
 c006ba8:	10001d1e 	bne	r2,zero,c006c20 <alt_avalon_spi_command+0x16c>
    {
      credits--;
 c006bac:	e0bff617 	ldw	r2,-40(fp)
 c006bb0:	10bfffc4 	addi	r2,r2,-1
 c006bb4:	e0bff615 	stw	r2,-40(fp)

      if (write_data < write_end)
 c006bb8:	e0ffff17 	ldw	r3,-4(fp)
 c006bbc:	e0bffb17 	ldw	r2,-20(fp)
 c006bc0:	18800b2e 	bgeu	r3,r2,c006bf0 <alt_avalon_spi_command+0x13c>
        IOWR_ALTERA_AVALON_SPI_TXDATA(base, *write_data++);
 c006bc4:	e0bffc17 	ldw	r2,-16(fp)
 c006bc8:	11000104 	addi	r4,r2,4
 c006bcc:	e0bfff17 	ldw	r2,-4(fp)
 c006bd0:	10800003 	ldbu	r2,0(r2)
 c006bd4:	10c03fcc 	andi	r3,r2,255
 c006bd8:	e0bfff17 	ldw	r2,-4(fp)
 c006bdc:	10800044 	addi	r2,r2,1
 c006be0:	e0bfff15 	stw	r2,-4(fp)
 c006be4:	2005883a 	mov	r2,r4
 c006be8:	10c00035 	stwio	r3,0(r2)
 c006bec:	00000c06 	br	c006c20 <alt_avalon_spi_command+0x16c>
      else if (write_zeros > 0)
 c006bf0:	e0bff917 	ldw	r2,-28(fp)
 c006bf4:	1005003a 	cmpeq	r2,r2,zero
 c006bf8:	1000071e 	bne	r2,zero,c006c18 <alt_avalon_spi_command+0x164>
      {
        write_zeros--;
 c006bfc:	e0bff917 	ldw	r2,-28(fp)
 c006c00:	10bfffc4 	addi	r2,r2,-1
 c006c04:	e0bff915 	stw	r2,-28(fp)
        IOWR_ALTERA_AVALON_SPI_TXDATA(base, 0);
 c006c08:	e0bffc17 	ldw	r2,-16(fp)
 c006c0c:	10800104 	addi	r2,r2,4
 c006c10:	10000035 	stwio	zero,0(r2)
 c006c14:	00000206 	br	c006c20 <alt_avalon_spi_command+0x16c>
      }
      else
        credits = -1024;
 c006c18:	00bf0004 	movi	r2,-1024
 c006c1c:	e0bff615 	stw	r2,-40(fp)
    };

    if ((status & ALTERA_AVALON_SPI_STATUS_RRDY_MSK) != 0)
 c006c20:	e0bff717 	ldw	r2,-36(fp)
 c006c24:	1080200c 	andi	r2,r2,128
 c006c28:	1005003a 	cmpeq	r2,r2,zero
 c006c2c:	103fc91e 	bne	r2,zero,c006b54 <alt_avalon_spi_command+0xa0>
    {
      alt_u32 rxdata = IORD_ALTERA_AVALON_SPI_RXDATA(base);
 c006c30:	e0bffc17 	ldw	r2,-16(fp)
 c006c34:	10800037 	ldwio	r2,0(r2)
 c006c38:	e0bff515 	stw	r2,-44(fp)

      if (read_ignore > 0)
 c006c3c:	e0bff817 	ldw	r2,-32(fp)
 c006c40:	1005003a 	cmpeq	r2,r2,zero
 c006c44:	1000041e 	bne	r2,zero,c006c58 <alt_avalon_spi_command+0x1a4>
        read_ignore--;
 c006c48:	e0bff817 	ldw	r2,-32(fp)
 c006c4c:	10bfffc4 	addi	r2,r2,-1
 c006c50:	e0bff815 	stw	r2,-32(fp)
 c006c54:	00000706 	br	c006c74 <alt_avalon_spi_command+0x1c0>
      else
        *read_data++ = (alt_u8)rxdata;
 c006c58:	e0bff517 	ldw	r2,-44(fp)
 c006c5c:	1007883a 	mov	r3,r2
 c006c60:	e0800217 	ldw	r2,8(fp)
 c006c64:	10c00005 	stb	r3,0(r2)
 c006c68:	e0800217 	ldw	r2,8(fp)
 c006c6c:	10800044 	addi	r2,r2,1
 c006c70:	e0800215 	stw	r2,8(fp)
      credits++;
 c006c74:	e0bff617 	ldw	r2,-40(fp)
 c006c78:	10800044 	addi	r2,r2,1
 c006c7c:	e0bff615 	stw	r2,-40(fp)

      if (read_ignore == 0 && read_data == read_end)
 c006c80:	e0bff817 	ldw	r2,-32(fp)
 c006c84:	1004c03a 	cmpne	r2,r2,zero
 c006c88:	103fb21e 	bne	r2,zero,c006b54 <alt_avalon_spi_command+0xa0>
 c006c8c:	e0c00217 	ldw	r3,8(fp)
 c006c90:	e0bffa17 	ldw	r2,-24(fp)
 c006c94:	18800126 	beq	r3,r2,c006c9c <alt_avalon_spi_command+0x1e8>
        break;
    }
    
  }
 c006c98:	003fae06 	br	c006b54 <alt_avalon_spi_command+0xa0>

  /* Wait until the interface has finished transmitting */
  do
  {
    status = IORD_ALTERA_AVALON_SPI_STATUS(base);
 c006c9c:	e0bffc17 	ldw	r2,-16(fp)
 c006ca0:	10800204 	addi	r2,r2,8
 c006ca4:	10800037 	ldwio	r2,0(r2)
 c006ca8:	e0bff715 	stw	r2,-36(fp)
  }
  while ((status & ALTERA_AVALON_SPI_STATUS_TMT_MSK) == 0);
 c006cac:	e0bff717 	ldw	r2,-36(fp)
 c006cb0:	1080080c 	andi	r2,r2,32
 c006cb4:	1005003a 	cmpeq	r2,r2,zero
 c006cb8:	103ff81e 	bne	r2,zero,c006c9c <alt_avalon_spi_command+0x1e8>

  /* Clear SSO (release chipselect) unless the caller is going to
   * keep using this chip
   */
  if ((flags & ALT_AVALON_SPI_COMMAND_MERGE) == 0)
 c006cbc:	e0800317 	ldw	r2,12(fp)
 c006cc0:	1080004c 	andi	r2,r2,1
 c006cc4:	1004c03a 	cmpne	r2,r2,zero
 c006cc8:	1000031e 	bne	r2,zero,c006cd8 <alt_avalon_spi_command+0x224>
    IOWR_ALTERA_AVALON_SPI_CONTROL(base, 0);
 c006ccc:	e0bffc17 	ldw	r2,-16(fp)
 c006cd0:	10800304 	addi	r2,r2,12
 c006cd4:	10000035 	stwio	zero,0(r2)

  return read_length;
 c006cd8:	e0800117 	ldw	r2,4(fp)
}
 c006cdc:	e037883a 	mov	sp,fp
 c006ce0:	df000017 	ldw	fp,0(sp)
 c006ce4:	dec00104 	addi	sp,sp,4
 c006ce8:	f800283a 	ret

0c006cec <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
 c006cec:	defff904 	addi	sp,sp,-28
 c006cf0:	dfc00615 	stw	ra,24(sp)
 c006cf4:	df000515 	stw	fp,20(sp)
 c006cf8:	df000504 	addi	fp,sp,20
 c006cfc:	e13ffd15 	stw	r4,-12(fp)
 c006d00:	e17ffe15 	stw	r5,-8(fp)
  alt_dev* next = (alt_dev*) llist->next;
 c006d04:	e0bffe17 	ldw	r2,-8(fp)
 c006d08:	10800017 	ldw	r2,0(r2)
 c006d0c:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
 c006d10:	e13ffd17 	ldw	r4,-12(fp)
 c006d14:	c0002d80 	call	c0002d8 <strlen>
 c006d18:	10800044 	addi	r2,r2,1
 c006d1c:	e0bffb15 	stw	r2,-20(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
 c006d20:	00000d06 	br	c006d58 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
 c006d24:	e0bffc17 	ldw	r2,-16(fp)
 c006d28:	11000217 	ldw	r4,8(r2)
 c006d2c:	e1bffb17 	ldw	r6,-20(fp)
 c006d30:	e17ffd17 	ldw	r5,-12(fp)
 c006d34:	c006fbc0 	call	c006fbc <memcmp>
 c006d38:	1004c03a 	cmpne	r2,r2,zero
 c006d3c:	1000031e 	bne	r2,zero,c006d4c <alt_find_dev+0x60>
    {
      /* match found */

      return next;
 c006d40:	e0bffc17 	ldw	r2,-16(fp)
 c006d44:	e0bfff15 	stw	r2,-4(fp)
 c006d48:	00000706 	br	c006d68 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
 c006d4c:	e0bffc17 	ldw	r2,-16(fp)
 c006d50:	10800017 	ldw	r2,0(r2)
 c006d54:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
 c006d58:	e0fffe17 	ldw	r3,-8(fp)
 c006d5c:	e0bffc17 	ldw	r2,-16(fp)
 c006d60:	10fff01e 	bne	r2,r3,c006d24 <alt_find_dev+0x38>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
 c006d64:	e03fff15 	stw	zero,-4(fp)
 c006d68:	e0bfff17 	ldw	r2,-4(fp)
}
 c006d6c:	e037883a 	mov	sp,fp
 c006d70:	dfc00117 	ldw	ra,4(sp)
 c006d74:	df000017 	ldw	fp,0(sp)
 c006d78:	dec00204 	addi	sp,sp,8
 c006d7c:	f800283a 	ret

0c006d80 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
 c006d80:	defffa04 	addi	sp,sp,-24
 c006d84:	dfc00515 	stw	ra,20(sp)
 c006d88:	df000415 	stw	fp,16(sp)
 c006d8c:	df000404 	addi	fp,sp,16
 c006d90:	e13ffe15 	stw	r4,-8(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
 c006d94:	00830074 	movhi	r2,3073
 c006d98:	10a3e904 	addi	r2,r2,-28764
 c006d9c:	10800017 	ldw	r2,0(r2)
 c006da0:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
 c006da4:	00003306 	br	c006e74 <alt_find_file+0xf4>
  {
    len = strlen(next->name);
 c006da8:	e0bffd17 	ldw	r2,-12(fp)
 c006dac:	11000217 	ldw	r4,8(r2)
 c006db0:	c0002d80 	call	c0002d8 <strlen>
 c006db4:	e0bffc15 	stw	r2,-16(fp)
    
    if (next->name[len-1] == '/')
 c006db8:	e0bffd17 	ldw	r2,-12(fp)
 c006dbc:	10c00217 	ldw	r3,8(r2)
 c006dc0:	e0bffc17 	ldw	r2,-16(fp)
 c006dc4:	1885883a 	add	r2,r3,r2
 c006dc8:	10bfffc4 	addi	r2,r2,-1
 c006dcc:	10800003 	ldbu	r2,0(r2)
 c006dd0:	10803fcc 	andi	r2,r2,255
 c006dd4:	1080201c 	xori	r2,r2,128
 c006dd8:	10bfe004 	addi	r2,r2,-128
 c006ddc:	10800bd8 	cmpnei	r2,r2,47
 c006de0:	1000031e 	bne	r2,zero,c006df0 <alt_find_file+0x70>
    {
      len -= 1;
 c006de4:	e0bffc17 	ldw	r2,-16(fp)
 c006de8:	10bfffc4 	addi	r2,r2,-1
 c006dec:	e0bffc15 	stw	r2,-16(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
 c006df0:	e0bffc17 	ldw	r2,-16(fp)
 c006df4:	1007883a 	mov	r3,r2
 c006df8:	e0bffe17 	ldw	r2,-8(fp)
 c006dfc:	1885883a 	add	r2,r3,r2
 c006e00:	10800003 	ldbu	r2,0(r2)
 c006e04:	10803fcc 	andi	r2,r2,255
 c006e08:	1080201c 	xori	r2,r2,128
 c006e0c:	10bfe004 	addi	r2,r2,-128
 c006e10:	10800be0 	cmpeqi	r2,r2,47
 c006e14:	10000a1e 	bne	r2,zero,c006e40 <alt_find_file+0xc0>
 c006e18:	e0bffc17 	ldw	r2,-16(fp)
 c006e1c:	1007883a 	mov	r3,r2
 c006e20:	e0bffe17 	ldw	r2,-8(fp)
 c006e24:	1885883a 	add	r2,r3,r2
 c006e28:	10800003 	ldbu	r2,0(r2)
 c006e2c:	10803fcc 	andi	r2,r2,255
 c006e30:	1080201c 	xori	r2,r2,128
 c006e34:	10bfe004 	addi	r2,r2,-128
 c006e38:	1004c03a 	cmpne	r2,r2,zero
 c006e3c:	10000a1e 	bne	r2,zero,c006e68 <alt_find_file+0xe8>
 c006e40:	e0bffd17 	ldw	r2,-12(fp)
 c006e44:	11000217 	ldw	r4,8(r2)
 c006e48:	e1bffc17 	ldw	r6,-16(fp)
 c006e4c:	e17ffe17 	ldw	r5,-8(fp)
 c006e50:	c006fbc0 	call	c006fbc <memcmp>
 c006e54:	1004c03a 	cmpne	r2,r2,zero
 c006e58:	1000031e 	bne	r2,zero,c006e68 <alt_find_file+0xe8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
 c006e5c:	e0bffd17 	ldw	r2,-12(fp)
 c006e60:	e0bfff15 	stw	r2,-4(fp)
 c006e64:	00000806 	br	c006e88 <alt_find_file+0x108>
    }
    next = (alt_dev*) next->llist.next;
 c006e68:	e0bffd17 	ldw	r2,-12(fp)
 c006e6c:	10800017 	ldw	r2,0(r2)
 c006e70:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
 c006e74:	00c30074 	movhi	r3,3073
 c006e78:	18e3e904 	addi	r3,r3,-28764
 c006e7c:	e0bffd17 	ldw	r2,-12(fp)
 c006e80:	10ffc91e 	bne	r2,r3,c006da8 <alt_find_file+0x28>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
 c006e84:	e03fff15 	stw	zero,-4(fp)
 c006e88:	e0bfff17 	ldw	r2,-4(fp)
}
 c006e8c:	e037883a 	mov	sp,fp
 c006e90:	dfc00117 	ldw	ra,4(sp)
 c006e94:	df000017 	ldw	fp,0(sp)
 c006e98:	dec00204 	addi	sp,sp,8
 c006e9c:	f800283a 	ret

0c006ea0 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
 c006ea0:	defffa04 	addi	sp,sp,-24
 c006ea4:	dfc00515 	stw	ra,20(sp)
 c006ea8:	df000415 	stw	fp,16(sp)
 c006eac:	dc000315 	stw	r16,12(sp)
 c006eb0:	df000304 	addi	fp,sp,12
 c006eb4:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
 c006eb8:	00bffa04 	movi	r2,-24
 c006ebc:	e0bffd15 	stw	r2,-12(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
 c006ec0:	e03ffe15 	stw	zero,-8(fp)
 c006ec4:	00002006 	br	c006f48 <alt_get_fd+0xa8>
  {
    if (!alt_fd_list[i].dev)
 c006ec8:	e13ffe17 	ldw	r4,-8(fp)
 c006ecc:	04030034 	movhi	r16,3072
 c006ed0:	841f0a04 	addi	r16,r16,31784
 c006ed4:	01400304 	movi	r5,12
 c006ed8:	c002b680 	call	c002b68 <__mulsi3>
 c006edc:	1405883a 	add	r2,r2,r16
 c006ee0:	10800017 	ldw	r2,0(r2)
 c006ee4:	1004c03a 	cmpne	r2,r2,zero
 c006ee8:	1000141e 	bne	r2,zero,c006f3c <alt_get_fd+0x9c>
    {
      alt_fd_list[i].dev = dev;
 c006eec:	e13ffe17 	ldw	r4,-8(fp)
 c006ef0:	04030034 	movhi	r16,3072
 c006ef4:	841f0a04 	addi	r16,r16,31784
 c006ef8:	01400304 	movi	r5,12
 c006efc:	c002b680 	call	c002b68 <__mulsi3>
 c006f00:	1407883a 	add	r3,r2,r16
 c006f04:	e0bfff17 	ldw	r2,-4(fp)
 c006f08:	18800015 	stw	r2,0(r3)
      if (i > alt_max_fd)
 c006f0c:	00830074 	movhi	r2,3073
 c006f10:	10a3ed04 	addi	r2,r2,-28748
 c006f14:	10c00017 	ldw	r3,0(r2)
 c006f18:	e0bffe17 	ldw	r2,-8(fp)
 c006f1c:	1880040e 	bge	r3,r2,c006f30 <alt_get_fd+0x90>
      {
        alt_max_fd = i;
 c006f20:	00c30074 	movhi	r3,3073
 c006f24:	18e3ed04 	addi	r3,r3,-28748
 c006f28:	e0bffe17 	ldw	r2,-8(fp)
 c006f2c:	18800015 	stw	r2,0(r3)
      }
      rc = i;
 c006f30:	e0bffe17 	ldw	r2,-8(fp)
 c006f34:	e0bffd15 	stw	r2,-12(fp)
      goto alt_get_fd_exit;
 c006f38:	00000606 	br	c006f54 <alt_get_fd+0xb4>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
 c006f3c:	e0bffe17 	ldw	r2,-8(fp)
 c006f40:	10800044 	addi	r2,r2,1
 c006f44:	e0bffe15 	stw	r2,-8(fp)
 c006f48:	e0bffe17 	ldw	r2,-8(fp)
 c006f4c:	10800810 	cmplti	r2,r2,32
 c006f50:	103fdd1e 	bne	r2,zero,c006ec8 <alt_get_fd+0x28>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
 c006f54:	e0bffd17 	ldw	r2,-12(fp)
}
 c006f58:	e037883a 	mov	sp,fp
 c006f5c:	dfc00217 	ldw	ra,8(sp)
 c006f60:	df000117 	ldw	fp,4(sp)
 c006f64:	dc000017 	ldw	r16,0(sp)
 c006f68:	dec00304 	addi	sp,sp,12
 c006f6c:	f800283a 	ret

0c006f70 <atexit>:
 c006f70:	200b883a 	mov	r5,r4
 c006f74:	000d883a 	mov	r6,zero
 c006f78:	0009883a 	mov	r4,zero
 c006f7c:	000f883a 	mov	r7,zero
 c006f80:	c0070301 	jmpi	c007030 <__register_exitproc>

0c006f84 <exit>:
 c006f84:	defffe04 	addi	sp,sp,-8
 c006f88:	000b883a 	mov	r5,zero
 c006f8c:	dc000015 	stw	r16,0(sp)
 c006f90:	dfc00115 	stw	ra,4(sp)
 c006f94:	2021883a 	mov	r16,r4
 c006f98:	c0071680 	call	c007168 <__call_exitprocs>
 c006f9c:	00830074 	movhi	r2,3073
 c006fa0:	10a3e604 	addi	r2,r2,-28776
 c006fa4:	11000017 	ldw	r4,0(r2)
 c006fa8:	20800f17 	ldw	r2,60(r4)
 c006fac:	10000126 	beq	r2,zero,c006fb4 <exit+0x30>
 c006fb0:	103ee83a 	callr	r2
 c006fb4:	8009883a 	mov	r4,r16
 c006fb8:	c0073580 	call	c007358 <_exit>

0c006fbc <memcmp>:
 c006fbc:	00c000c4 	movi	r3,3
 c006fc0:	1980032e 	bgeu	r3,r6,c006fd0 <memcmp+0x14>
 c006fc4:	2144b03a 	or	r2,r4,r5
 c006fc8:	10c4703a 	and	r2,r2,r3
 c006fcc:	10000f26 	beq	r2,zero,c00700c <memcmp+0x50>
 c006fd0:	31ffffc4 	addi	r7,r6,-1
 c006fd4:	3000061e 	bne	r6,zero,c006ff0 <memcmp+0x34>
 c006fd8:	00000a06 	br	c007004 <memcmp+0x48>
 c006fdc:	39ffffc4 	addi	r7,r7,-1
 c006fe0:	00bfffc4 	movi	r2,-1
 c006fe4:	21000044 	addi	r4,r4,1
 c006fe8:	29400044 	addi	r5,r5,1
 c006fec:	38800526 	beq	r7,r2,c007004 <memcmp+0x48>
 c006ff0:	20c00003 	ldbu	r3,0(r4)
 c006ff4:	28800003 	ldbu	r2,0(r5)
 c006ff8:	18bff826 	beq	r3,r2,c006fdc <memcmp+0x20>
 c006ffc:	1885c83a 	sub	r2,r3,r2
 c007000:	f800283a 	ret
 c007004:	0005883a 	mov	r2,zero
 c007008:	f800283a 	ret
 c00700c:	180f883a 	mov	r7,r3
 c007010:	20c00017 	ldw	r3,0(r4)
 c007014:	28800017 	ldw	r2,0(r5)
 c007018:	18bfed1e 	bne	r3,r2,c006fd0 <memcmp+0x14>
 c00701c:	31bfff04 	addi	r6,r6,-4
 c007020:	21000104 	addi	r4,r4,4
 c007024:	29400104 	addi	r5,r5,4
 c007028:	39bff936 	bltu	r7,r6,c007010 <memcmp+0x54>
 c00702c:	003fe806 	br	c006fd0 <memcmp+0x14>

0c007030 <__register_exitproc>:
 c007030:	defffa04 	addi	sp,sp,-24
 c007034:	00830074 	movhi	r2,3073
 c007038:	10a3e604 	addi	r2,r2,-28776
 c00703c:	dc000015 	stw	r16,0(sp)
 c007040:	14000017 	ldw	r16,0(r2)
 c007044:	dd000415 	stw	r20,16(sp)
 c007048:	2829883a 	mov	r20,r5
 c00704c:	81405217 	ldw	r5,328(r16)
 c007050:	dcc00315 	stw	r19,12(sp)
 c007054:	dc800215 	stw	r18,8(sp)
 c007058:	dc400115 	stw	r17,4(sp)
 c00705c:	dfc00515 	stw	ra,20(sp)
 c007060:	2023883a 	mov	r17,r4
 c007064:	3027883a 	mov	r19,r6
 c007068:	3825883a 	mov	r18,r7
 c00706c:	28002526 	beq	r5,zero,c007104 <__register_exitproc+0xd4>
 c007070:	29000117 	ldw	r4,4(r5)
 c007074:	008007c4 	movi	r2,31
 c007078:	11002716 	blt	r2,r4,c007118 <__register_exitproc+0xe8>
 c00707c:	8800101e 	bne	r17,zero,c0070c0 <__register_exitproc+0x90>
 c007080:	2105883a 	add	r2,r4,r4
 c007084:	1085883a 	add	r2,r2,r2
 c007088:	20c00044 	addi	r3,r4,1
 c00708c:	1145883a 	add	r2,r2,r5
 c007090:	0009883a 	mov	r4,zero
 c007094:	15000215 	stw	r20,8(r2)
 c007098:	28c00115 	stw	r3,4(r5)
 c00709c:	2005883a 	mov	r2,r4
 c0070a0:	dfc00517 	ldw	ra,20(sp)
 c0070a4:	dd000417 	ldw	r20,16(sp)
 c0070a8:	dcc00317 	ldw	r19,12(sp)
 c0070ac:	dc800217 	ldw	r18,8(sp)
 c0070b0:	dc400117 	ldw	r17,4(sp)
 c0070b4:	dc000017 	ldw	r16,0(sp)
 c0070b8:	dec00604 	addi	sp,sp,24
 c0070bc:	f800283a 	ret
 c0070c0:	29802204 	addi	r6,r5,136
 c0070c4:	00800044 	movi	r2,1
 c0070c8:	110e983a 	sll	r7,r2,r4
 c0070cc:	30c04017 	ldw	r3,256(r6)
 c0070d0:	2105883a 	add	r2,r4,r4
 c0070d4:	1085883a 	add	r2,r2,r2
 c0070d8:	1185883a 	add	r2,r2,r6
 c0070dc:	19c6b03a 	or	r3,r3,r7
 c0070e0:	14802015 	stw	r18,128(r2)
 c0070e4:	14c00015 	stw	r19,0(r2)
 c0070e8:	00800084 	movi	r2,2
 c0070ec:	30c04015 	stw	r3,256(r6)
 c0070f0:	88bfe31e 	bne	r17,r2,c007080 <__register_exitproc+0x50>
 c0070f4:	30804117 	ldw	r2,260(r6)
 c0070f8:	11c4b03a 	or	r2,r2,r7
 c0070fc:	30804115 	stw	r2,260(r6)
 c007100:	003fdf06 	br	c007080 <__register_exitproc+0x50>
 c007104:	00830074 	movhi	r2,3073
 c007108:	10ab4004 	addi	r2,r2,-21248
 c00710c:	100b883a 	mov	r5,r2
 c007110:	80805215 	stw	r2,328(r16)
 c007114:	003fd606 	br	c007070 <__register_exitproc+0x40>
 c007118:	00800034 	movhi	r2,0
 c00711c:	10800004 	addi	r2,r2,0
 c007120:	1000021e 	bne	r2,zero,c00712c <__register_exitproc+0xfc>
 c007124:	013fffc4 	movi	r4,-1
 c007128:	003fdc06 	br	c00709c <__register_exitproc+0x6c>
 c00712c:	01006404 	movi	r4,400
 c007130:	103ee83a 	callr	r2
 c007134:	1007883a 	mov	r3,r2
 c007138:	103ffa26 	beq	r2,zero,c007124 <__register_exitproc+0xf4>
 c00713c:	80805217 	ldw	r2,328(r16)
 c007140:	180b883a 	mov	r5,r3
 c007144:	18000115 	stw	zero,4(r3)
 c007148:	18800015 	stw	r2,0(r3)
 c00714c:	80c05215 	stw	r3,328(r16)
 c007150:	18006215 	stw	zero,392(r3)
 c007154:	18006315 	stw	zero,396(r3)
 c007158:	0009883a 	mov	r4,zero
 c00715c:	883fc826 	beq	r17,zero,c007080 <__register_exitproc+0x50>
 c007160:	003fd706 	br	c0070c0 <__register_exitproc+0x90>

0c007164 <register_fini>:
 c007164:	f800283a 	ret

0c007168 <__call_exitprocs>:
 c007168:	00830074 	movhi	r2,3073
 c00716c:	10a3e604 	addi	r2,r2,-28776
 c007170:	10800017 	ldw	r2,0(r2)
 c007174:	defff304 	addi	sp,sp,-52
 c007178:	df000b15 	stw	fp,44(sp)
 c00717c:	d8800115 	stw	r2,4(sp)
 c007180:	00800034 	movhi	r2,0
 c007184:	10800004 	addi	r2,r2,0
 c007188:	1005003a 	cmpeq	r2,r2,zero
 c00718c:	d8800215 	stw	r2,8(sp)
 c007190:	d8800117 	ldw	r2,4(sp)
 c007194:	dd400815 	stw	r21,32(sp)
 c007198:	dd000715 	stw	r20,28(sp)
 c00719c:	10805204 	addi	r2,r2,328
 c0071a0:	dfc00c15 	stw	ra,48(sp)
 c0071a4:	ddc00a15 	stw	r23,40(sp)
 c0071a8:	dd800915 	stw	r22,36(sp)
 c0071ac:	dcc00615 	stw	r19,24(sp)
 c0071b0:	dc800515 	stw	r18,20(sp)
 c0071b4:	dc400415 	stw	r17,16(sp)
 c0071b8:	dc000315 	stw	r16,12(sp)
 c0071bc:	282b883a 	mov	r21,r5
 c0071c0:	2039883a 	mov	fp,r4
 c0071c4:	d8800015 	stw	r2,0(sp)
 c0071c8:	2829003a 	cmpeq	r20,r5,zero
 c0071cc:	d8800117 	ldw	r2,4(sp)
 c0071d0:	14405217 	ldw	r17,328(r2)
 c0071d4:	88001026 	beq	r17,zero,c007218 <__call_exitprocs+0xb0>
 c0071d8:	ddc00017 	ldw	r23,0(sp)
 c0071dc:	88800117 	ldw	r2,4(r17)
 c0071e0:	8c802204 	addi	r18,r17,136
 c0071e4:	143fffc4 	addi	r16,r2,-1
 c0071e8:	80000916 	blt	r16,zero,c007210 <__call_exitprocs+0xa8>
 c0071ec:	05bfffc4 	movi	r22,-1
 c0071f0:	a000151e 	bne	r20,zero,c007248 <__call_exitprocs+0xe0>
 c0071f4:	8409883a 	add	r4,r16,r16
 c0071f8:	2105883a 	add	r2,r4,r4
 c0071fc:	1485883a 	add	r2,r2,r18
 c007200:	10c02017 	ldw	r3,128(r2)
 c007204:	a8c01126 	beq	r21,r3,c00724c <__call_exitprocs+0xe4>
 c007208:	843fffc4 	addi	r16,r16,-1
 c00720c:	85bff81e 	bne	r16,r22,c0071f0 <__call_exitprocs+0x88>
 c007210:	d8800217 	ldw	r2,8(sp)
 c007214:	10003126 	beq	r2,zero,c0072dc <__call_exitprocs+0x174>
 c007218:	dfc00c17 	ldw	ra,48(sp)
 c00721c:	df000b17 	ldw	fp,44(sp)
 c007220:	ddc00a17 	ldw	r23,40(sp)
 c007224:	dd800917 	ldw	r22,36(sp)
 c007228:	dd400817 	ldw	r21,32(sp)
 c00722c:	dd000717 	ldw	r20,28(sp)
 c007230:	dcc00617 	ldw	r19,24(sp)
 c007234:	dc800517 	ldw	r18,20(sp)
 c007238:	dc400417 	ldw	r17,16(sp)
 c00723c:	dc000317 	ldw	r16,12(sp)
 c007240:	dec00d04 	addi	sp,sp,52
 c007244:	f800283a 	ret
 c007248:	8409883a 	add	r4,r16,r16
 c00724c:	88c00117 	ldw	r3,4(r17)
 c007250:	2105883a 	add	r2,r4,r4
 c007254:	1445883a 	add	r2,r2,r17
 c007258:	18ffffc4 	addi	r3,r3,-1
 c00725c:	11800217 	ldw	r6,8(r2)
 c007260:	1c001526 	beq	r3,r16,c0072b8 <__call_exitprocs+0x150>
 c007264:	10000215 	stw	zero,8(r2)
 c007268:	303fe726 	beq	r6,zero,c007208 <__call_exitprocs+0xa0>
 c00726c:	00c00044 	movi	r3,1
 c007270:	1c06983a 	sll	r3,r3,r16
 c007274:	90804017 	ldw	r2,256(r18)
 c007278:	8cc00117 	ldw	r19,4(r17)
 c00727c:	1884703a 	and	r2,r3,r2
 c007280:	10001426 	beq	r2,zero,c0072d4 <__call_exitprocs+0x16c>
 c007284:	90804117 	ldw	r2,260(r18)
 c007288:	1884703a 	and	r2,r3,r2
 c00728c:	10000c1e 	bne	r2,zero,c0072c0 <__call_exitprocs+0x158>
 c007290:	2105883a 	add	r2,r4,r4
 c007294:	1485883a 	add	r2,r2,r18
 c007298:	11400017 	ldw	r5,0(r2)
 c00729c:	e009883a 	mov	r4,fp
 c0072a0:	303ee83a 	callr	r6
 c0072a4:	88800117 	ldw	r2,4(r17)
 c0072a8:	98bfc81e 	bne	r19,r2,c0071cc <__call_exitprocs+0x64>
 c0072ac:	b8800017 	ldw	r2,0(r23)
 c0072b0:	147fd526 	beq	r2,r17,c007208 <__call_exitprocs+0xa0>
 c0072b4:	003fc506 	br	c0071cc <__call_exitprocs+0x64>
 c0072b8:	8c000115 	stw	r16,4(r17)
 c0072bc:	003fea06 	br	c007268 <__call_exitprocs+0x100>
 c0072c0:	2105883a 	add	r2,r4,r4
 c0072c4:	1485883a 	add	r2,r2,r18
 c0072c8:	11000017 	ldw	r4,0(r2)
 c0072cc:	303ee83a 	callr	r6
 c0072d0:	003ff406 	br	c0072a4 <__call_exitprocs+0x13c>
 c0072d4:	303ee83a 	callr	r6
 c0072d8:	003ff206 	br	c0072a4 <__call_exitprocs+0x13c>
 c0072dc:	88800117 	ldw	r2,4(r17)
 c0072e0:	1000081e 	bne	r2,zero,c007304 <__call_exitprocs+0x19c>
 c0072e4:	89000017 	ldw	r4,0(r17)
 c0072e8:	20000726 	beq	r4,zero,c007308 <__call_exitprocs+0x1a0>
 c0072ec:	b9000015 	stw	r4,0(r23)
 c0072f0:	8809883a 	mov	r4,r17
 c0072f4:	00000000 	call	0 <__reset-0xc000000>
 c0072f8:	bc400017 	ldw	r17,0(r23)
 c0072fc:	883fb71e 	bne	r17,zero,c0071dc <__call_exitprocs+0x74>
 c007300:	003fc506 	br	c007218 <__call_exitprocs+0xb0>
 c007304:	89000017 	ldw	r4,0(r17)
 c007308:	882f883a 	mov	r23,r17
 c00730c:	2023883a 	mov	r17,r4
 c007310:	883fb21e 	bne	r17,zero,c0071dc <__call_exitprocs+0x74>
 c007314:	003fc006 	br	c007218 <__call_exitprocs+0xb0>

0c007318 <alt_sim_halt>:

/*
 * Routine called on exit.
 */
static ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
 c007318:	defffd04 	addi	sp,sp,-12
 c00731c:	df000215 	stw	fp,8(sp)
 c007320:	df000204 	addi	fp,sp,8
 c007324:	e13fff15 	stw	r4,-4(fp)
  int r2 = exit_code;
 c007328:	e0bfff17 	ldw	r2,-4(fp)
 c00732c:	e0bffe15 	stw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "D02"(r2), "D03"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
 c007330:	e0bffe17 	ldw	r2,-8(fp)
 c007334:	1005003a 	cmpeq	r2,r2,zero
 c007338:	1000021e 	bne	r2,zero,c007344 <alt_sim_halt+0x2c>
    ALT_SIM_FAIL();
 c00733c:	002af070 	cmpltui	zero,zero,43969
 c007340:	00000106 	br	c007348 <alt_sim_halt+0x30>
  } else {
    ALT_SIM_PASS();
 c007344:	002af0b0 	cmpltui	zero,zero,43970
  }
#endif /* DEBUG_STUB */
}
 c007348:	e037883a 	mov	sp,fp
 c00734c:	df000017 	ldw	fp,0(sp)
 c007350:	dec00104 	addi	sp,sp,4
 c007354:	f800283a 	ret

0c007358 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
 c007358:	defffd04 	addi	sp,sp,-12
 c00735c:	dfc00215 	stw	ra,8(sp)
 c007360:	df000115 	stw	fp,4(sp)
 c007364:	df000104 	addi	fp,sp,4
 c007368:	e13fff15 	stw	r4,-4(fp)
  ALT_OS_STOP();

  /* Provide notification to the simulator that we've stopped */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_SIM_HALT().\r\n");
  ALT_SIM_HALT(exit_code);
 c00736c:	e13fff17 	ldw	r4,-4(fp)
 c007370:	c0073180 	call	c007318 <alt_sim_halt>

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
 c007374:	003fff06 	br	c007374 <_exit+0x1c>
 c007378:	0c007164 	muli	r16,at,453
